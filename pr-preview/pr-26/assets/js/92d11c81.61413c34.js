"use strict";(self.webpackChunkbetalectic_website=self.webpackChunkbetalectic_website||[]).push([["395"],{5662:function(e){e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"cloudflare-worker","metadata":{"permalink":"/pr-preview/pr-26/blog/cloudflare-worker","source":"@site/blog/2025-02-17-Cloudflare-worker.md","title":"When to use Cloudflare worker","description":"What is Serverless? Is There Really No Server?","date":"2025-02-17T00:00:00.000Z","tags":[],"readingTime":3.735,"hasTruncateMarker":true,"authors":[{"name":"Md. Amir Sohail","title":"Software Engineer, Betalectic","page":{"permalink":"/pr-preview/pr-26/blog/authors/amir"},"socials":{"linkedin":"https://www.linkedin.com/in/md-amir-sohail-86069b1aa/"},"imageURL":"https://media.licdn.com/dms/image/v2/D5603AQEB9WTYEPHzLg/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1714193197370?e=1745452800&v=beta&t=OtwdkDGDpxBriXjcsD9JpkKvNuvFV2mYVfvsB9JuJgw","key":"amir"}],"frontMatter":{"slug":"cloudflare-worker","title":"When to use Cloudflare worker","authors":["amir"],"image":"https://img.freepik.com/free-vector/cloud-hosting-concept-illustration_114360-650.jpg"},"unlisted":false,"nextItem":{"title":"Real-Time Bidding and Auctions: A Guide to Building a High-Performance Platform","permalink":"/pr-preview/pr-26/blog/bidding-and-auctions"}},"content":"## What is Serverless? Is There Really No Server?\\n\\nHave you ever heard the term **\\"serverless\\"** and wondered what it actually means? Does it mean there\u2019s no server at all? If there\u2019s a server, why do we call it **serverless**? \uD83E\uDD14\\n\x3c!-- truncate --\x3e\\n\\nIn this blog, we\u2019ll break down the concept of **serverless computing**, how it works, and why it\u2019s gaining popularity. We\u2019ll also explore **Cloudflare Workers**, one of the most efficient serverless solutions, and when to use it for your applications.\\n\\n## **What Does Serverless Actually Mean?**\\n\\nServerless doesn\u2019t mean there are no servers\u2014it just means you don\u2019t have to worry about them. Cloud providers like Cloudflare Workers, AWS Lambda, and Google Cloud Functions take care of everything behind the scenes, including servers, scaling, and maintenance. That\u2019s why it\u2019s called \\"serverless\\"\u2014because you don\u2019t have to deal with servers directly. You just write and deploy your code, and the platform runs it whenever needed. Plus, you only pay for what you use instead of keeping a server running all the time, making it a flexible and cost-effective choice.\\n\\n## **How Does Serverless Work?**\\n\\nWhen you deploy a serverless function, it doesn\u2019t run all the time like a traditional server. Instead, it **executes only when triggered**\u2014for example, when a user requests data from an API or visits a webpage. The cloud provider automatically starts the function, runs the code, and then shuts it down when it\u2019s done.\\n\\nThis **event-driven execution model** makes serverless highly **efficient, scalable, and cost-effective**. Since the platform takes care of scaling automatically, your application can handle a single request or millions of requests without any manual intervention.\\n\\n## **Cloudflare Workers**\\n\\nImagine if your website could run super fast no matter where your users are in the world. That\u2019s exactly what **Cloudflare Workers** do! They let you run code on Cloudflare\u2019s massive network of **300+ data centers worldwide**, so instead of waiting for a request to travel across the internet to a faraway server, it gets processed **closer to the user**\u2014making everything load **much faster**.\\n\\n**How Cloudflare Workers Work**\\n\\nThink of Cloudflare Workers as tiny, on-demand programs that run whenever someone visits your site or uses your API. Here\u2019s what happens step by step:\\n\\n### **1\uFE0F\u20E3 A User Makes a Request**\\n\\nWhen someone visits your site or calls your API, instead of going to a traditional server, the request is sent to the **nearest Cloudflare data center**. This saves time by reducing how far the data has to travel.\\n\\n### **2\uFE0F\u20E3 The Worker Runs Instantly**\\n\\nOnce the request reaches Cloudflare, the Worker **executes your code on demand**. It runs in a super lightweight and isolated environment (powered by the same V8 engine as Chrome and Node.js).\\n\\n### **3\uFE0F\u20E3 A Response is Sent Back \u2013 Fast!**\\n\\nThe Worker can do all sorts of things\u2014fetching data, modifying responses, checking authentication, caching content, and more. Once it\u2019s done, the response **goes back to the user from the closest edge server**, making everything feel snappy.\\n\\n---\\n\\n## **Why Use Cloudflare Workers?**\\n\\nHere\u2019s what makes Workers awesome:\\n\\n\u2705 **No Servers to Manage** \u2013 Just write your code, deploy it, and Cloudflare takes care of everything. No need to worry about setting up or maintaining servers.\\n\\n\u2705 **Scales Instantly** \u2013 Whether you get **1 request or 1 million**, Cloudflare Workers scale automatically, ensuring smooth performance.\\n\\n\u2705 **Runs Everywhere** \u2013 Unlike traditional cloud servers locked to a specific region, Workers **run globally** on Cloudflare\u2019s network.\\n\\n\u2705 **Only Pay for What You Use** \u2013 Workers only run when needed, so you don\u2019t have to pay for idle servers.\\n\\n\u2705 **Secure by Design** \u2013 Workers run in a **sandboxed** environment, protecting your app from security threats.\\n\\n---\\n\\n## **What Can You Build with Cloudflare Workers?**\\n\\n\uD83D\uDD39 **API Gateway** \u2013 Manage API requests and modify responses without needing a backend.\\n\\n\uD83D\uDD39 **Authentication & Security** \u2013 Validate JWT tokens, block bad traffic, and add security headers.\\n\\n\uD83D\uDD39 **Edge Caching** \u2013 Store API responses and static content at the edge to speed things up.\\n\\n\uD83D\uDD39 **Dynamic Content Rewriting** \u2013 Modify requests before they reach your server.\\n\\n\uD83D\uDD39 **Serverless Applications** \u2013 Build things like URL shorteners, real-time webhooks, and microservices.\\n\\n---\\n\\nCloudflare Workers make it **super easy** to build **fast, secure, and scalable** applications **without managing infrastructure**. Since they run on the edge, your code executes closer to users, reducing delays and improving performance.\\n\\n\uD83D\uDE80 **Want to give it a try?** You can start for free with [Cloudflare\u2019s Workers Playground](https://workers.cloudflare.com/playground#LYVwNgLglgDghgJwgegGYHsHALQBM4RwDcABAEbogB2+CAngLzbPYDqApmQNJQQBimYACFKNRHQBqADVwBNAI50oABjIBlAJLKAorKggAXCxYduvAVhHVakmQqWrNOvSACwAKADC6KhHa-sABEoAGcYdBDeKB8DEgwsPAJiEio4YHYGACJ8QgA6ACsQzNJUKDB-NIzspIKij29ffwhsABU6GHZYuBgYMCgAYwJoqmR8uAA3OBD+hFgIAGpgdFxwdg8PdgAPcKQSXHZUOHAIEgBvdwBIVPTYzO1NtN72EgBBAAUNTIAaS8IAcxCsQA2pkto9yt8SJlulBIZkEOwwj4QuxMgBdH4AXyI7g8xmYph4-EEVjE9GkckUKnUWl0+nqPj8AWCSMi0BicUEiUIpGuVSgNC2tWKcTKFXSWQF+02woZjQCbQ6XR6fUG7JGY0m01mMAWSxW5XW7igwB2JwA7uwwP10Ok4ghbVDLdbbexcgALCDAMDFdzuZAAKgD7hIAZIAAEIO12PtUGcAPJkfLsfoQTEkbRUcYhgPIP1bM17A5HSBnS6B4MXUMR+AINJnABK7HkIERaZICJbbcu1fDtfrp0z43T-mzVbDfcQA-uKZA6oafk27dTmx7E4REBACCoITObwdwFC7AAPE2kTv2AA+TFrvMXKZ0Kj9OLsCD9d0ACk7rZCEC+JFHf8VwASjLC4LhtHcTi3MASAYFJ2HNEgAFUGwAGS-ZsfwgXIYOAnFwMgkJ0HKXIwHQP4PwAAwACStciSAAElOVJxigP4CEwXCUQQF4-iadMCBIeAIHdJjThg3IRPdPlMQAQio-C-XAqA4w-STpL5OCGHgzJkBhTJQPOcCLmQZASFkSgSBtcBcBIOAwGI6yHNguASFEqAEDs2so1eD4SHddgEUuQjkROHI3PguBzTgXgSBNM0P0yXJkAi4UlJMjctyoEgz3CC9ah8D8Ioyi4b3ArLtwQpC8uRdgP2dG10n-YzwMCuB9gQQEwJMzJIKZZoow6TJbkXFBPW9b4QrKn5wMxDLMSxHE8XxQlzBJUQbApexqScOk3C8RkmiCUJwjZYZYniHAIt5Soska10PS9H0SjFPl7qtJq3Qmn05QG1po1iMbkF6WKqCNY85MCeNPBaWQ3m0ALnsvdxjx+kgwDgKg-iyfxMhRi40fYDqCcJ9JCGs91EBRCAsmQlo+GwAAOTISGQUnj3JtzPQgGBsCwqBxiyKRsGQl5sG8U0hjICFrKO3wsg0bQGBjfjWfZkLOdfNz3syNjELNVn+qae6oFwUSGH2Nj+nYbBzTN0T-wFKIHOwaYHIyABGXJlHVjnoAgcpL08ciQFwVBMYREhWEwABrILdzeTG6D+B1rGPZAA6DzW+ioWPpoRMAsl-OhyhCQLX0yab3QRVAsh5mBATM0GU7TmhcitmAHVwXJ+lD8PI7dK3kAe9I3ajUj+hCIoQo1wnkHa3AUcuY8KFwOgOdwQXrMx6esgjxBEXx6bjxNP4SBCBB+nriBeabkHk9TzaO-YcYu+WXv+4PhEX-GNBB5CFJbGftNapUFhzYAYNSaEy3uMHeUwQj3TjgnbA5E-joHxhnWB0DjwwGgRcDgLp0hyRQiidy7pQgkCTnAVum13LoHcm2PYsxxjPDcjHBA8cEBAQRAQNhRYlj0Omhccuh8SA+Fzuwf8WM7LmkCjlXh68iy9HQHQPYnkUyBzURABholniq2eGQNRNNoDYxICAGA9lhEh0oAPMRcB+g2V8LkE+IMcHuk9peVgVMTiUPYcghAAB+DOHicF4OES8EgNiw7f2eBwrh8VdwACkJhwDUDMOYct9gkDoFZc0sw-DkKElTGgZccmUAQCQS0ZBhFsnYAAcl3DRFoLQ3juTrKgUoz4t4IlTGANRAoolf0Ho0gCuB+IY3QGqYYu5EB0L0cI80mAwC4GkWAci9szG5JAPQyZapng2myX3CIzwdHlK3ABGg5ieK7kGZgTqQiTIXAROeOyZy9HABIEsKOLYBix36a48JJk0aeJaPQeKJxtldStKgEJniT5ApMvGHKUKMYHF8bMi+4I4kBKKRijs1AqACnPj4chlC6m5AslZQYVBhExjinFPorD7JXJRKcwKHZETHF3IFH+GYt4nD0cJAgYk4AUGZWc-SMAoCPJMmygK6AkJCrBKaco0dcUlNwGUrenSgpNA7JQPwgCqU7JpfZRyDD6UQGEUKw5pyGHyrkQQUZZ1IgyzYVcsgswtkVIQkueK+w3JnL6KgN0gKObIEgQKAmGc14b1RgvZGuJ3D4jYJwIkFhhCbXENtKkjhaQuD+sdFkZ0ogciutyZIusuYRRFKUcousZboDIJkItCpAb2RVAMIYPhRjEXBsm04fVbQiSgGQMovA6AAH0ciogMJkAATMoBdAAWbAygADM66ADs3xh1S2gOOvoUYp0HwBCNEEVBljsEKFOpqIl0RfEyFGqgU79SrBGpkKUQpCiZExCtYwa1iSWGzeSOweaaTOH0MwDwQA) or deploy your first Worker in minutes!"},{"id":"bidding-and-auctions","metadata":{"permalink":"/pr-preview/pr-26/blog/bidding-and-auctions","source":"@site/blog/2025-02-16-bidding-and-auctions.md","title":"Real-Time Bidding and Auctions: A Guide to Building a High-Performance Platform","description":"In the modern digital landscape, auctions have gone beyond the traditional auction houses and taken center stage online. Whether you\u2019re building an e-commerce platform, a ticket resale marketplace, or a fundraising site,","date":"2025-02-16T00:00:00.000Z","tags":[{"inline":false,"label":"Fintech","permalink":"/pr-preview/pr-26/blog/tags/fintech","description":"Fintech Apps"}],"readingTime":5.905,"hasTruncateMarker":true,"authors":[{"name":"Manasa Madapu","title":"Co-Founder, Betalectic","url":"https://github.com/ManasaMadapu","page":{"permalink":"/pr-preview/pr-26/blog/authors/manasa"},"socials":{"x":"https://x.com/ManasaMadapu","linkedin":"https://www.linkedin.com/in/manasa-madapu/"},"imageURL":"https://pbs.twimg.com/profile_images/1854874782384201728/ad8jUVyx_400x400.jpg","key":"manasa"}],"frontMatter":{"slug":"bidding-and-auctions","title":"Real-Time Bidding and Auctions: A Guide to Building a High-Performance Platform","authors":["manasa"],"tags":["fintech"],"image":"https://img.freepik.com/free-vector/judge-online-service-platform-court-worker-stand-justice-law-judge-traditional-black-robe-hearing-case-website-flat-vector-illustration_613284-1530.jpg"},"unlisted":false,"prevItem":{"title":"When to use Cloudflare worker","permalink":"/pr-preview/pr-26/blog/cloudflare-worker"},"nextItem":{"title":"Building a Dynamic Table Component: Backend Config Driven","permalink":"/pr-preview/pr-26/blog/dynamic-table-component"}},"content":"In the modern digital landscape, auctions have gone beyond the traditional auction houses and taken center stage online. Whether you\u2019re building an e-commerce platform, a ticket resale marketplace, or a fundraising site, \\n\x3c!-- truncate --\x3e\\nreal-time bidding keeps your users engaged and ensures fair competition. This guide will walk you through the process of designing and implementing a high-performance real-time auction system using AWS services\u2014specifically Amazon SQS FIFO queues, AWS Lambda, and Pusher.\\n\\n\\n\\n1. [ Introduction to Real-Time Bidding and Auctions](#1-introduction-to-real-time-bidding-and-auctions)\\n\\n2. [ Core Architecture Overview](#2-core-architecture-overview)\\n\\n3. [ Why Amazon SQS FIFO Queues?](#3-why-amazon-sqs-fifo-queues)\\n\\n4. [ Processing Bids with AWS Lambda](#4-processing-bids-with-aws-lambda)\\n\\n5. [ Ensuring Real-Time Updates with Pusher](#5-ensuring-real-time-updates-with-pusher)\\n\\n6. [ Handling Multiple Auctions Concurrently](#6-handling-multiple-auctions-concurrently)\\n\\n7. [ Best Practices and Tips](#7-best-practices-and-tips)\\n\\n8. [ Conclusion](#8-conclusion)\\n---\\n\\n## 1. Introduction to Real-Time Bidding and Auctions\\n\\n**What is real-time bidding (RTB)?**\\n\\nReal-time bidding refers to the process of making live offers or bids in a fraction of a second\u2014while an auction is ongoing. In an online auction environment, multiple bidders simultaneously submit their bids on an item (or multiple items) within a specified timeframe. The goal is to capture each bid accurately, determine the highest valid offer, and then display the latest leading bid to all participants in real-time.\\n\\n**Key challenges:**\\n\\n- **Concurrency**: Multiple bidders submitting offers at the same time.\\n- **Ordering**: Ensuring that each bid is processed in the correct sequence.\\n- **Scalability**: Handling multiple concurrent auctions without performance degradation.\\n- **Real-time updates**: Notifying all bidders of the latest bid status as soon as possible.\\n\\n---\\n\\n## 2. Core Architecture Overview\\n\\nA robust real-time auction platform typically involves the following components:\\n\\n1. **Front-End**: Displays the auction interface, shows real-time bid updates, and captures user bids.\\n2. **Queue**: Ensures reliable, ordered message handling for incoming bids.\\n3. **Processing Layer**: A serverless or microservices layer that processes each bid and updates the system state.\\n4. **Real-Time Notification Service**: Broadcasts live updates to all participants.\\n5. **Database**: Stores bid history, user data, and auction details.\\n\\nBelow is a high-level architecture:\\n\\n```mermaid\\nflowchart LR\\n    A[Bidders] --\x3e|Submit Bid| B[Front-End]\\n    B --\x3e|Send Bid<br>to SQS FIFO| C[SQS FIFO Queue]\\n    C --\x3e|Trigger Lambda| D[AWS Lambda]\\n    D --\x3e|Update Auction<br>State| E[Database]\\n    D --\x3e|Publish<br>New Bid Event| F[Pusher]\\n    F --\x3e|Real-time Updates| B\\n\\n```\\n\\n---\\n\\n## 3. Why Amazon SQS FIFO Queues?\\n\\n**Amazon SQS (Simple Queue Service)** is a fully managed message queuing service from AWS. The FIFO (First-In-First-Out) variant guarantees that messages (bids) are processed in the exact order they are received and that each message is processed exactly once. This is critical in an auction environment where the timing and sequence of bids can determine the winner.\\n\\n### Key Benefits of SQS FIFO:\\n\\n- **Ordering Guarantee**: Ensures the first bid in is the first processed, preventing race conditions.\\n- **Exactly-Once Processing**: Avoids the dreaded \u201Cdouble-processing\u201D of a single bid.\\n- **High Throughput**: Scales to handle thousands of messages per second.\\n- **Easy Integration**: Works seamlessly with AWS Lambda.\\n\\nFor more details on the intricacies of FIFO queues, you can read [Solving Complex Ordering Challenges with Amazon SQS FIFO Queues](https://aws.amazon.com/blogs/compute/solving-complex-ordering-challenges-with-amazon-sqs-fifo-queues/).\\n\\n---\\n\\n## 4. Processing Bids with AWS Lambda\\n\\n**AWS Lambda** is a serverless compute service that lets you run code without managing servers. In a real-time auction scenario, each new bid triggers a Lambda function. The function then:\\n\\n1. **Validates the bid**: Checks if the bid is higher than the current highest bid, whether the auction is still open, etc.\\n2. **Updates the auction state**: Stores or updates relevant information in the database (e.g., new highest bid, bidder ID, timestamp).\\n3. **Notifies the front-end**: Publishes a message to Pusher (or another real-time messaging service) so all participants see the new highest bid.\\n\\nIn your Lambda code, you might have a structure like this:\\n\\n- **index.js**: Entry point for the Lambda, orchestrating the workflow.\\n- **processBids.js**: Contains the core business logic to validate and process bids.\\n- **Other utility files**: Handle different scenarios, such as auctions with extended bidding periods, concurrency checks, etc.\\n\\nThis modular approach keeps the code maintainable and easy to extend.\\n\\n---\\n\\n## 5. Ensuring Real-Time Updates with Pusher\\n\\nOnce a valid bid is processed, it\u2019s crucial to broadcast the updated information to all active participants immediately. **Pusher** is a popular real-time messaging service that makes this possible with minimal overhead. By integrating Pusher into your Lambda function:\\n\\n1. **Push New Bid Events**: Each time the Lambda validates a new highest bid, it sends a push notification to a Pusher channel dedicated to that auction.\\n2. **Front-End Listeners**: The browser (or mobile app) listens for these channel events. Upon receiving a new bid event, the interface updates automatically, showing the latest highest bid and the bidder\u2019s details (or masked identifier).\\n\\nThis mechanism provides a **seamless** real-time experience for users, similar to a live auction house setting.\\n\\n---\\n\\n## 6. Handling Multiple Auctions Concurrently\\n\\nWhen you have multiple auctions running at once, concurrency can skyrocket. Here\u2019s how you can manage it:\\n\\n1. **Unique Identifiers**: Each auction has a unique queue group ID or message group ID in SQS FIFO to ensure that bids for different auctions don\u2019t mix.\\n2. **Scalable Architecture**: AWS Lambda automatically scales to handle as many concurrent invocations as needed, provided your concurrency limits are set appropriately.\\n3. **Separate Pusher Channels**: Each auction should have its own Pusher channel. This way, messages (bid updates) only go to participants in that specific auction.\\n\\n---\\n\\n## 7. Best Practices and Tips\\n\\n1. **Use Timeouts Wisely**: Make sure your Lambda function has an appropriate timeout setting. In most cases, your bid processing should be quick, but be mindful of edge cases like network latency.\\n2. **Implement Idempotency**: If your system somehow reprocesses a message (very rare with FIFO queues, but still possible), ensure your logic can handle duplicates gracefully.\\n3. **Monitor and Alert**: Set up CloudWatch metrics and alarms to track Lambda invocation errors, queue backlogs, or unusual spikes in bidding volume.\\n4. **Database Transactions**: Use atomic database operations (like DynamoDB\u2019s conditional writes or relational transactions) to ensure data consistency when updating the highest bid.\\n5. **Security**: Implement appropriate authentication and authorization, ensuring only authorized bidders can place bids, and the data is transmitted securely (HTTPS/WSS).\\n\\n---\\n\\n## 8. Conclusion\\n\\nBuilding a **high-performance real-time bidding and auction platform** requires careful attention to concurrency, ordering, and real-time communication. By leveraging **Amazon SQS FIFO queues** for message ordering, **AWS Lambda** for bid processing, and **Pusher** for live updates, you can create an architecture that scales automatically and provides a seamless experience for your users.\\n\\nThis combination of services allows you to handle multiple auctions concurrently with **confidence** in the accuracy of each bid. With minimal infrastructure management (thanks to serverless components), your development team can focus on enhancing user experience, implementing new features, and ensuring the platform continues to run smoothly.\\n\\nIf you\u2019re looking to dive deeper, make sure to check out AWS\u2019s official guide on [Solving Complex Ordering Challenges with Amazon SQS FIFO Queues](https://aws.amazon.com/blogs/compute/solving-complex-ordering-challenges-with-amazon-sqs-fifo-queues/). By following these best practices and leveraging the right AWS services, you can build an auction platform that is both **powerful** and **reliable**\u2014ready for the demands of real-time bidding at any scale."},{"id":"dynamic-table-component","metadata":{"permalink":"/pr-preview/pr-26/blog/dynamic-table-component","source":"@site/blog/2025-02-15-dynamic-table-component.md","title":"Building a Dynamic Table Component: Backend Config Driven","description":"Introduction","date":"2025-02-15T00:00:00.000Z","tags":[{"inline":false,"label":"Fintech","permalink":"/pr-preview/pr-26/blog/tags/fintech","description":"Fintech Apps"}],"readingTime":4.195,"hasTruncateMarker":true,"authors":[{"name":"Manasa Madapu","title":"Co-Founder, Betalectic","url":"https://github.com/ManasaMadapu","page":{"permalink":"/pr-preview/pr-26/blog/authors/manasa"},"socials":{"x":"https://x.com/ManasaMadapu","linkedin":"https://www.linkedin.com/in/manasa-madapu/"},"imageURL":"https://pbs.twimg.com/profile_images/1854874782384201728/ad8jUVyx_400x400.jpg","key":"manasa"}],"frontMatter":{"slug":"dynamic-table-component","title":"Building a Dynamic Table Component: Backend Config Driven","authors":["manasa"],"tags":["fintech"],"image":"https://img.freepik.com/free-vector/minimalist-project-management-daily-checklist_742173-5121.jpg"},"unlisted":false,"prevItem":{"title":"Real-Time Bidding and Auctions: A Guide to Building a High-Performance Platform","permalink":"/pr-preview/pr-26/blog/bidding-and-auctions"},"nextItem":{"title":"Second Story Post","permalink":"/pr-preview/pr-26/blog/second-story"}},"content":"### **Introduction**\\n\\nIn this post, I\'ll walk you through the development of a dynamic and highly customizable table component. The key idea behind this table is its configuration-driven nature\u2014where all the features, \\n\x3c!-- truncate --\x3e\\n\\nsuch as column visibility, order, resizing, and more, are controlled by configurations fetched from a backend API. This allows for unparalleled flexibility and adaptability in building complex, data-heavy UIs.\\n\\n### **Why a Configuration-Driven Table?**\\n\\nModern applications often need tables that can handle various data types, support user interactions, and fit into different use cases. While building such a table from scratch could be cumbersome, a configuration-driven approach allows:\\n\\n- **Separation of concerns:** Let the backend decide on the table\u2019s structure, columns, and behaviour.\\n- **Flexibility:** Changing the table\'s configuration requires no code changes in the frontend, making it more scalable and adaptable.\\n- **Feature-rich tables:** Easily enable or disable powerful table features like sorting, resizing, and variant control by simply updating the configuration.\\n\\n### **Key Features of the Table Component**\\n\\n**1. Configuration-Driven Setup**\\nThe table component fetches its entire setup from an API. This includes which columns to display, their visibility, order, and custom configurations such as alignment or variant styling. Here\u2019s how the table structure is controlled:\\n    - **Column Definitions:** The API provides details about each column, including field name, label, and whether it\u2019s visible or hidden.\\n    - **Visibility Rules:** Specific columns can be hidden based on roles, user preferences, or other business rules.\\n    - **Dynamic Order:** The column order is not static, and the backend configuration can dictate how the columns should appear.\\n \\n**2. Out-of-the-Box Features**\\nTo enhance the user experience, this table component offers several built-in features:\\n    - **Column Ordering:** Users can reorder columns, and these settings can be synced with the backend, ensuring the changes persist across sessions.\\n    - **Column Visibility:** Users can toggle which columns to show or hide based on their preferences or needs.\\n    - **Resizing:** Column widths can be adjusted to improve readability and fit more content.\\n    - **Variants & Table Sizing:** The configuration also allows setting different table styles (compact, spacious, etc.) and variants (striped, bordered, etc.), giving the table a unique look-and-feel based on the context.\\n\\n**3. Backend-Driven Flexibility**\\nOne of the key aspects of this table is that most of its features are enabled or disabled by backend configurations. This allows for easy customization and quicker adaptations to business needs without touching frontend code. The API configuration includes:\\n    - **Feature Toggles:** Resizing, sorting, and even advanced features like pagination or infinite scroll can be toggled on/off via configuration.\\n    - **Responsive Design:** Backend can dictate how the table should behave at different breakpoints, ensuring optimal user experience across devices.\\n    - **Theme & Styling:** Configurations can also control table styles, enabling easy changes between themes (dark/light) or modifying borders, row colors, and more.\\n\\n### **How It Works: A Closer Look at the API Configuration**\\n\\nThe heart of this table component lies in the configuration fetched from the API. Here\'s an example of what a configuration response might look like:\\n\\n```json\\n{\\n   \\"resource\\":\\"sample-data\\",\\n   \\"identifierKey\\":\\"data-value\\",\\n   \\"selectionType\\":\\"multiple\\",\\n   \\"actions\\":{\\n      \\"header\\":\\"Actions\\",\\n      \\"align\\":\\"end\\",\\n      \\"fixed\\":true,\\n      \\"minWidth\\":200,\\n      \\"options\\":[\\n         {\\n            \\"key\\":\\"edit\\",\\n            \\"url\\":\\"/edit/:id\\",\\n            \\"icon\\":\\"SquarePen\\",\\n            \\"method\\":\\"GET\\"\\n         }\\n      ]\\n   },\\n   \\"columns\\":[\\n      {\\n         \\"accessorKey\\":\\"id\\",\\n         \\"header\\":\\"Sr no.\\",\\n         \\"width\\":80,\\n         \\"maxWidth\\":80,\\n         \\"minWidth\\":80,\\n         \\"fixed\\":true\\n      },\\n      {\\n         \\"accessorKey\\":\\"state\\",\\n         \\"header\\":\\"State\\",\\n         \\"width\\":100,\\n         \\"minWidth\\":100,\\n         \\"show\\":false\\n      },\\n   ],\\n   \\"filters\\":{\\n      \\"category\\":{\\n         \\"label\\":\\"Category\\",\\n         \\"type\\":\\"enum\\",\\n         \\"isNullable\\":false,\\n         \\"options\\":[\\n            {\\n               \\"label\\":\\"One\\",\\n               \\"value\\":\\"One\\"\\n            },\\n            {\\n               \\"label\\":\\"Two\\",\\n               \\"value\\":\\"Two\\"\\n            }\\n         ]\\n      },\\n      \\"state\\":{\\n         \\"label\\":\\"State\\",\\n         \\"type\\":\\"enum\\",\\n         \\"isNullable\\":false,\\n         \\"modelName\\":\\"state\\"\\n      },\\n      \\"city\\":{\\n         \\"label\\":\\"City\\",\\n         \\"type\\":\\"enum\\",\\n         \\"isNullable\\":false,\\n         \\"dependsOn\\":[\\n            \\"state\\",\\n            \\"district\\"\\n         ],\\n         \\"modelName\\":\\"city\\"\\n      },\\n      \\"locality\\":{\\n         \\"label\\":\\"Locality\\",\\n         \\"type\\":\\"enum\\",\\n         \\"isNullable\\":false,\\n         \\"dependsOn\\":[\\n            \\"state\\",\\n            \\"city\\"\\n         ],\\n         \\"modelName\\":\\"locality\\"\\n      },\\n      \\"availability\\":{\\n         \\"label\\":\\"Availablity\\",\\n         \\"type\\":\\"boolean\\"\\n      }\\n   }\\n}\\n```\\n\\nThis configuration informs the table component of:\\n\\n- What columns to display.\\n- The initial order of columns.\\n- Filters to be available to users and type of value input to be rendered for that filter.\\n\\n### **Benefits of This Approach**\\n\\n**1. Easy to Maintain and Scale:** No need to update the frontend codebase every time a column or feature needs to be added or removed\u2014just update the backend configuration.\\n\\n**2. Improved User Experience:** By giving users control over how they view and interact with the table, it caters to personalized experiences.\\n\\n**3. Faster Development Cycles:** Decoupling the table\u2019s features from the code allows for faster iterations, as the backend can dictate new table features or adjustments.\\n\\n### **Challenges & Considerations**\\n\\n- **API Design**: The backend needs to be designed carefully to ensure the configurations are granular enough for flexibility but not overly complex.\\n- **Syncing State**: Handling user preferences, such as column order or visibility, and syncing them with the backend can be challenging, especially in real-time scenarios.\\n- **Performance**: Fetching large configurations or dealing with very complex tables may introduce performance bottlenecks, which would require optimisation.\\n\\n\\n### **Conclusion**\\n\\nBuilding a configuration-driven table component has made managing data-rich interfaces easier, more flexible, and more powerful. By leveraging backend configurations, this approach decouples the frontend and backend, allowing for greater scalability, maintainability, and faster iteration times. Whether you\'re building dashboards, reports, or admin panels, this method ensures your tables are not just functional but also adaptive to changing business needs\\n\\n---"},{"id":"second-story","metadata":{"permalink":"/pr-preview/pr-26/blog/second-story","source":"@site/blog/2024-12-03-second-blog-post.md","title":"Second Story Post","description":"My ideas for blog posts inevitably start to dry up after over two years at Apache APISIX. Hence, I did some triage on the APISIX repo. I stumbled upon this one question:","date":"2024-12-03T00:00:00.000Z","tags":[{"inline":true,"label":"facebook","permalink":"/pr-preview/pr-26/blog/tags/facebook"},{"inline":false,"label":"Docusaurus","permalink":"/pr-preview/pr-26/blog/tags/docusaurus","description":"Docusaurus tag description"}],"readingTime":1.835,"hasTruncateMarker":true,"authors":[{"name":"Shrey Dhyani","title":"Software Engineer & Avid Reader","page":{"permalink":"/pr-preview/pr-26/blog/authors/all-sebastien-lorber-articles"},"socials":{"x":"https://x.com/sebastienlorber","linkedin":"https://www.linkedin.com/in/sebastienlorber/"},"imageURL":"https://avatars.githubusercontent.com/u/107391802?s=96&v=4","key":"shrey"}],"frontMatter":{"slug":"second-story","title":"Second Story Post","authors":["shrey"],"tags":["facebook","docusaurus"],"image":"https://img.freepik.com/free-photo/colorful-design-with-spiral-design_188544-9588.jpg"},"unlisted":false,"prevItem":{"title":"Building a Dynamic Table Component: Backend Config Driven","permalink":"/pr-preview/pr-26/blog/dynamic-table-component"},"nextItem":{"title":"First Amazing Featured Post","permalink":"/pr-preview/pr-26/blog/2024/12/02/first-amazing-post copy"}},"content":"My ideas for blog posts inevitably start to dry up after over two years at Apache APISIX. Hence, I did some triage on the APISIX repo. I stumbled upon this one question:\\n\\nWe have a requirement to use a plugin, where we need to route the traffic on percentage basis. I\'ll give an example for better understanding.\\n\\n\x3c!-- truncate --\x3e\\n\\n## What is URL\\n\\nWe have an URL https://xyz.com/ca/fr/index.html where ca is country (canada) and fr is french language. Now the traffic needs to routed 10% to https://xyz.com/ca/en/index.html and the remaining 90% to https://xyz.com/ca/fr/index.html. And whenever we\'re routing the traffic to https://xyz.com/ca/en/index.html we need to set a cookie. So for next call, if the cookie is there, it should directly go to https://xyz.com/ca/en/index.html else it should go via a 10:90 traffic split. What is the best possible way to achieve this ??\\n\\n-- help request: Setting cookie based on a condition\\n\\n## Use case\\n\\nThe use case is interesting, and I decided to tackle it.\\n\\nI\'ll rephrase the requirements first:\\n\\nIf no cookie is set, randomly forward the request to one of the upstreams\\nIf a cookie has been set, forward the request to the correct upstream.\\nFor easier testing:\\n\\nSoftware engineering is a field that always changes to keep up with innovation and client needs. As developers, we have a difficult job staying up to date with these swift changes. It is imperative that we approach our information sources selectively because it is so easy for anyone to create a blog and publish anything.\\n\\n## Change of odds\\n\\nI change the odds from 10:90 to 50:50\\nI use the root instead of a host plus a path\\nFinally, I assume that the upstream sets the cookie.\\n\\nNewcomers to Apache APISIX understand the matching algorithm very quickly: if a request matches a route\'s host, method, and path, forward it to the upstream set.\\n\\nEverything you need to know about CSS in blog and guide form. CSS Tricks is a top resource for developers who need to find out how anything in CSS works. I definitely use their site as a main resource for figuring out the best practices to meet the designs of designers on my products!"},{"id":"/2024/12/02/first-amazing-post copy","metadata":{"permalink":"/pr-preview/pr-26/blog/2024/12/02/first-amazing-post copy","source":"@site/blog/2024-12-02-first-amazing-post copy.md","title":"First Amazing Featured Post","description":"This is a featured blog post.","date":"2024-12-01T00:00:00.000Z","tags":[{"inline":false,"label":"Featured","permalink":"/pr-preview/pr-26/blog/tags/featured","description":"Featured tag description"}],"readingTime":0.505,"hasTruncateMarker":true,"authors":[{"name":"Manasa Madapu","title":"Co-Founder, Betalectic","url":"https://github.com/ManasaMadapu","page":{"permalink":"/pr-preview/pr-26/blog/authors/manasa"},"socials":{"x":"https://x.com/ManasaMadapu","linkedin":"https://www.linkedin.com/in/manasa-madapu/"},"imageURL":"https://pbs.twimg.com/profile_images/1854874782384201728/ad8jUVyx_400x400.jpg","key":"manasa"},{"name":"Shrey Dhyani","title":"Software Engineer & Avid Reader","page":{"permalink":"/pr-preview/pr-26/blog/authors/all-sebastien-lorber-articles"},"socials":{"x":"https://x.com/sebastienlorber","linkedin":"https://www.linkedin.com/in/sebastienlorber/"},"imageURL":"https://avatars.githubusercontent.com/u/107391802?s=96&v=4","key":"shrey"}],"frontMatter":{"title":"First Amazing Featured Post","date":"2024-12-01T00:00:00.000Z","description":"This is a featured blog post.","tags":["featured"],"authors":["manasa","shrey"]},"unlisted":false,"prevItem":{"title":"Second Story Post","permalink":"/pr-preview/pr-26/blog/second-story"},"nextItem":{"title":"First Amazing Featured Post","permalink":"/pr-preview/pr-26/blog/2024/12/02/first-amazing-post"}},"content":"Content of the featured post goes here.\\n\\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\\n\\n\x3c!-- truncate --\x3e\\n\\nIt has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum."},{"id":"/2024/12/02/first-amazing-post","metadata":{"permalink":"/pr-preview/pr-26/blog/2024/12/02/first-amazing-post","source":"@site/blog/2024-12-02-first-amazing-post.md","title":"First Amazing Featured Post","description":"This is a featured blog post.","date":"2024-12-01T00:00:00.000Z","tags":[{"inline":false,"label":"Featured","permalink":"/pr-preview/pr-26/blog/tags/featured","description":"Featured tag description"}],"readingTime":0.505,"hasTruncateMarker":true,"authors":[{"name":"Manasa Madapu","title":"Co-Founder, Betalectic","url":"https://github.com/ManasaMadapu","page":{"permalink":"/pr-preview/pr-26/blog/authors/manasa"},"socials":{"x":"https://x.com/ManasaMadapu","linkedin":"https://www.linkedin.com/in/manasa-madapu/"},"imageURL":"https://pbs.twimg.com/profile_images/1854874782384201728/ad8jUVyx_400x400.jpg","key":"manasa"},{"name":"Shrey Dhyani","title":"Software Engineer & Avid Reader","page":{"permalink":"/pr-preview/pr-26/blog/authors/all-sebastien-lorber-articles"},"socials":{"x":"https://x.com/sebastienlorber","linkedin":"https://www.linkedin.com/in/sebastienlorber/"},"imageURL":"https://avatars.githubusercontent.com/u/107391802?s=96&v=4","key":"shrey"}],"frontMatter":{"title":"First Amazing Featured Post","date":"2024-12-01T00:00:00.000Z","description":"This is a featured blog post.","tags":["featured"],"authors":["manasa","shrey"]},"unlisted":false,"prevItem":{"title":"First Amazing Featured Post","permalink":"/pr-preview/pr-26/blog/2024/12/02/first-amazing-post copy"},"nextItem":{"title":"Building Scalable Mobile Apps for Financial Services - Key Features and Best Practices","permalink":"/pr-preview/pr-26/blog/user-story"}},"content":"Content of the featured post goes here.\\n\\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\\n\\n\x3c!-- truncate --\x3e\\n\\nIt has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum."},{"id":"user-story","metadata":{"permalink":"/pr-preview/pr-26/blog/user-story","source":"@site/blog/2024-10-12-welcome/index.md","title":"Building Scalable Mobile Apps for Financial Services - Key Features and Best Practices","description":"In today\u2019s fast-paced digital landscape, mobile apps have become an essential tool for financial services to engage with customers and deliver value. With the rise of fintech innovations and the proliferation of smartphones, consumers now expect instant access to banking, investment, insurance, and payment services at their fingertips. This shift has driven financial institutions to prioritize mobile-first strategies to meet the demands of tech-savvy users.","date":"2024-10-12T00:00:00.000Z","tags":[{"inline":true,"label":"finTech","permalink":"/pr-preview/pr-26/blog/tags/fin-tech"},{"inline":false,"label":"Docusaurus","permalink":"/pr-preview/pr-26/blog/tags/docusaurus","description":"Docusaurus tag description"}],"readingTime":3.145,"hasTruncateMarker":true,"authors":[{"name":"Manasa Madapu","title":"Co-Founder, Betalectic","url":"https://github.com/ManasaMadapu","page":{"permalink":"/pr-preview/pr-26/blog/authors/manasa"},"socials":{"x":"https://x.com/ManasaMadapu","linkedin":"https://www.linkedin.com/in/manasa-madapu/"},"imageURL":"https://pbs.twimg.com/profile_images/1854874782384201728/ad8jUVyx_400x400.jpg","key":"manasa"}],"frontMatter":{"slug":"user-story","title":"Building Scalable Mobile Apps for Financial Services - Key Features and Best Practices","authors":["manasa"],"tags":["finTech","docusaurus"]},"unlisted":false,"prevItem":{"title":"First Amazing Featured Post","permalink":"/pr-preview/pr-26/blog/2024/12/02/first-amazing-post"}},"content":"In today\u2019s fast-paced digital landscape, mobile apps have become an essential tool for financial services to engage with customers and deliver value. With the rise of fintech innovations and the proliferation of smartphones, consumers now expect instant access to banking, investment, insurance, and payment services at their fingertips. This shift has driven financial institutions to prioritize mobile-first strategies to meet the demands of tech-savvy users.\\n\\n\x3c!-- truncate --\x3e\\n\\nFrom managing portfolios to making real-time payments, the convenience and accessibility offered by mobile apps have redefined the way financial services are consumed. As a result, the financial services sector is witnessing a growing demand for mobile apps that combine functionality, security, and personalization to create a superior user experience.\\n\\nHowever, meeting this demand isn\u2019t without challenges. One critical aspect of mobile app development in the financial domain is scalability. Financial apps often face significant fluctuations in usage, particularly during market volatility, seasonal peaks, or promotional campaigns. Scalability ensures that an app can handle these surges in traffic and transactions without compromising on performance or user satisfaction. A scalable app not only provides a seamless experience during peak loads but also supports long-term growth as the user base expands.\\n\\n## Key Features of Scalable Financial Apps\\n\\n## Robust Security\\n\\n**End-to-end encryption and secure data storage**: End-to-end encryption ensures that sensitive data, such as financial transactions and personal details, remains secure during transmission by encrypting it from the sender\u2019s device to the recipient\u2019s, making it inaccessible to unauthorized parties. Complementing this, secure data storage techniques, such as encrypted databases and tokenization, protect user information from breaches and unauthorized access, ensuring compliance with regulatory standards and safeguarding user trust.\\n\\n**Multi-factor authentication** and compliance with regulations like RBI, SEBI, IRDAI, Data Protection Bill (expected) etc. In the financial services sector, robust security measures are non-negotiable, with multi-factor authentication (MFA) serving as a cornerstone for user protection. MFA adds an extra layer of security by requiring users to verify their identity through multiple factors such as passwords, biometric scans, or one-time passwords (OTPs), ensuring that sensitive financial data remains safeguarded.\\n\\n## User-Friendly Interface:\\n\\n**Intuitive UI/UX for financial literacy and accessibility**\\n\\nAn intuitive UI/UX is essential in financial apps to simplify complex financial processes and make them easily understandable for users of all experience levels, thereby promoting financial literacy. Additionally, accessibility features, such as screen readers, adjustable text sizes, and multi-language support, ensure that the app is inclusive and usable by a diverse audience, enhancing user engagement and satisfaction.\\n\\n## Real-Time Data Processing\\n\\nReal-time data processing enables financial apps to integrate live market feeds, providing users with up-to-the-minute updates on stock prices, currency rates, and other market dynamics essential for informed decision-making. Additionally, instant transaction updates ensure transparency and build user trust by confirming payments, transfers, or trades without delays, creating a seamless and reliable user experience.\\n\\n## Customizable Dashboards\\n\\nCustomizable dashboards empower users by presenting personalized insights tailored to their financial goals, preferences, and activity patterns, such as spending trends, portfolio performance, or savings milestones. By allowing users to configure widgets, select relevant data, and prioritize key metrics, these dashboards enhance engagement and decision-making, creating a more user-centric experience.\\n\\n**In modern mutual fund (MF) apps**, custom portfolios and dashboards go beyond basic portfolio tracking by offering deeply personalized goal-tracking features tailored to each investor\u2019s unique objectives. Investors can define specific financial goals, such as saving for a vacation, purchasing a home, or planning for retirement, and the app aligns their investments with these targets.\\n\\nThe dashboard provides clear visualizations of progress toward each goal, highlighting contributions, returns, and remaining targets in an intuitive format. Additionally, these apps often use advanced algorithms to suggest rebalancing strategies or additional investments to help users stay on track, ensuring a highly individualized investment experience that evolves with their needs."}]}}')}}]);