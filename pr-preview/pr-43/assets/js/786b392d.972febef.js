"use strict";(self.webpackChunkbetalectic_website=self.webpackChunkbetalectic_website||[]).push([["1944"],{832:function(e,n,r){r.r(n),r.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return t},metadata:function(){return s},toc:function(){return a}});var s=r(2595),o=r(5893),i=r(65);let t={slug:"orchestrating-laravel-queues",title:"Orchestrating Laravel Queues & Scheduling in Docker with Cron & Supervisor",authors:["rajesh"],image:"/img/blogs/docker_laravel_cron.jpg"},l="Orchestrating Laravel Queues & Scheduling in Docker with Cron & Supervisor",c={authorsImageUrls:[void 0]},a=[{value:"<strong>Introduction</strong>",id:"introduction",level:2},{value:"Problem Statement",id:"problem-statement",level:3},{value:"Initial Entrypoint Approach",id:"initial-entrypoint-approach",level:3},{value:"Introducing Cron for the Scheduler",id:"introducing-cron-for-the-scheduler",level:3},{value:"Managing Queue Workers with Supervisor",id:"managing-queue-workers-with-supervisor",level:3},{value:"The Final Dockerfile",id:"the-final-dockerfile",level:3},{value:"Verifying Your Background Processes",id:"verifying-your-background-processes",level:3},{value:"Conclusion",id:"conclusion",level:3}];function d(e){let n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"introduction",children:(0,o.jsx)(n.strong,{children:"Introduction"})}),"\n",(0,o.jsx)(n.p,{children:"Deploying Laravel applications in Docker often means packaging not only the HTTP server but also background processes\u2014namely, the queue workers and the scheduler. While it\u2019s easy to get \u201Cthe app\u201D running, orchestrating and monitoring  these long\u2013running processes reliably can be tricky. In this post, we\u2019ll walk through how I moved from a basic shell\u2010loop entrypoint to a more robust setup using cron for the scheduler and Supervisor for queue workers."}),"\n",(0,o.jsx)(n.h3,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,o.jsx)(n.p,{children:"A production-ready Laravel container needs to handle three things:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"The web server"})," (",(0,o.jsx)(n.code,{children:"FrankenPHP"}),")"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Queue workers"})," (",(0,o.jsx)(n.code,{children:"php artisan queue:work"}),")"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"The scheduler"})," (",(0,o.jsx)(n.code,{children:"php artisan schedule:run"}),")"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"My initial Docker entrypoint bundled 2 & 3 into a shell loop, but it lacked visibility, crash recovery, and proper PID management. Let\u2019s fix that."}),"\n",(0,o.jsx)(n.h3,{id:"initial-entrypoint-approach",children:"Initial Entrypoint Approach"}),"\n",(0,o.jsx)(n.p,{children:"Here\u2019s the one-liner I started with:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'ENTRYPOINT ["sh", "-c", "php artisan queue:work & while true; do php artisan schedule:run --verbose --no-interaction; sleep 60; done"]\n'})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Pros"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Extremely simple."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Cons"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Both processes run under the same PID 1\u2014no clean signals, no easy restarts."}),"\n",(0,o.jsx)(n.li,{children:"If the scheduler crashes, it silently stops, and you won\u2019t notice."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"introducing-cron-for-the-scheduler",children:"Introducing Cron for the Scheduler"}),"\n",(0,o.jsxs)(n.p,{children:["Offload scheduling to cron for reliability and observability. Create ",(0,o.jsx)(n.code,{children:"franken-scheduler-cron"})," in your project root:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"* * * * * root cd /app && /usr/local/bin/php artisan schedule:run --verbose --no-interaction >> /proc/1/fd/1 2>&1\n\n# \u2190 **Make sure there\u2019s an empty line after the above entry!**\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Why cron?"})," Cron is battle-tested for running periodic jobs. By redirecting to ",(0,o.jsx)(n.code,{children:"/proc/1/fd/1"}),", Laravel\u2019s scheduler logs appear in Docker\u2019s stdout."]}),"\n",(0,o.jsx)(n.p,{children:"In your Dockerfile:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"# install and register cron\nRUN apt-get update \\\n && apt-get install -y cron\n\nCOPY franken-scheduler-cron /etc/cron.d/franken-scheduler-cron\nRUN chmod 0644 /etc/cron.d/franken-scheduler-cron \\\n    && crontab /etc/cron.d/franken-scheduler-cron\n"})}),"\n",(0,o.jsx)(n.p,{children:"You can verify inside the container:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"docker exec -it my-app-container crontab -l\n\n* * * * * root cd /app && /usr/local/bin/php artisan schedule:run --verbose --no-interaction >> /proc/1/fd/1 2>&1\n\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Learn more about Laravel scheduling:"})," ",(0,o.jsx)(n.a,{href:"https://laravel.com/docs/11.x/scheduling",children:"Scheduling \u2192 Laravel Docs"})]}),"\n",(0,o.jsx)(n.h3,{id:"managing-queue-workers-with-supervisor",children:"Managing Queue Workers with Supervisor"}),"\n",(0,o.jsx)(n.p,{children:"Supervisor provides automatic restarts, log management, and multi-process control\u2014ideal for Laravel queues."}),"\n",(0,o.jsxs)(n.p,{children:["Create ",(0,o.jsx)(n.code,{children:"supervisor.conf"})," in your project root:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"[unix_http_server]\nfile=/var/run/supervisor.sock\nchmod=0700\n\n[supervisord]\nlogfile=/dev/stdout\nlogfile_maxbytes=0\n\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n\n[supervisorctl]\nserverurl=unix:///var/run/supervisor.sock\n\n[program:laravel-worker]\nprocess_name=%(program_name)s_%(process_num)02d\ncommand=/usr/local/bin/php artisan queue:work sqs --sleep=3 --tries=3 --max-jobs=1000 --max-time=3600\nautostart=true\nautorestart=true\nstopasgroup=true\nkillasgroup=true\nuser=root\nnumprocs=2\nredirect_stderr=true\nstdout_logfile=/dev/stdout\nstdout_logfile_maxbytes=0\nstopwaitsecs=3600\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"numprocs=2"})," launches two workers"]}),"\n",(0,o.jsx)(n.li,{children:"Logs stream to Docker\u2019s stdout"}),"\n",(0,o.jsx)(n.li,{children:"Workers auto-restart on failure"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Install Supervisor and add your config in your dockerfile:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"RUN apt-get install -y supervisor\n\nADD supervisord.conf /etc/supervisord.conf\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsxs)(n.strong,{children:["Learn more about ",(0,o.jsx)(n.a,{href:"https://supervisord.org/",children:"Supervisor"})," and ",(0,o.jsx)(n.a,{href:"https://laravel.com/docs/11.x/queues#running-the-queue-worker",children:"Running Laravel queues"})]})}),"\n",(0,o.jsx)(n.h3,{id:"the-final-dockerfile",children:"The Final Dockerfile"}),"\n",(0,o.jsxs)(n.p,{children:["Here\u2019s the polished image, based on ",(0,o.jsx)(n.code,{children:"dunglas/frankenphp"}),". Since cron and Supervisor both daemonize (run in the background), the container would exit immediately\u2014so we append ",(0,o.jsx)(n.code,{children:"tail -f /dev/null"})," to keep it alive."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'FROM dunglas/frankenphp\n\nRUN apt-get update \\\n    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n    git \\\n    unzip \\\n    librabbitmq-dev \\\n    libpq-dev \\\n    jq \\\n    libfreetype6-dev \\\n    libjpeg62-turbo-dev \\\n    libpng-dev \\\n    libzip-dev \\\n    procps \\\n    cron \\\n    supervisor\n\nRUN install-php-extensions pcntl pdo_pgsql gd zip\n\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\nRUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \\\n    apt-get install -y nodejs\n\nCOPY . /app\n\n# install our cron job\nCOPY franken-scheduler-cron /etc/cron.d/franken-scheduler-cron\nRUN chmod 0644 /etc/cron.d/franken-scheduler-cron \\\n    && crontab /etc/cron.d/franken-scheduler-cron\n\nADD supervisord.conf /etc/\n\nRUN composer install --no-dev --optimize-autoloader\n\nENTRYPOINT ["sh", "-c", "cron && supervisord -c /etc/supervisord.conf && tail -f /dev/null"]\n'})}),"\n",(0,o.jsx)(n.h3,{id:"verifying-your-background-processes",children:"Verifying Your Background Processes"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"List All Processes"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"docker exec -it <container> ps aux\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You should see ",(0,o.jsx)(n.code,{children:"cron"}),", ",(0,o.jsx)(n.code,{children:"supervisord"}),", and your ",(0,o.jsx)(n.code,{children:"php artisan queue:work"})," processes."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Check Supervisor Status"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"docker exec -it <container> supervisorctl status\n"})}),"\n",(0,o.jsx)(n.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsxs)(n.p,{children:["By splitting responsibilities\u2014",(0,o.jsx)(n.strong,{children:"cron"})," for scheduling and ",(0,o.jsx)(n.strong,{children:"Supervisor"})," for queue workers\u2014you gain:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Crash recovery:"})," Supervisor auto-restarts failed workers"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Observability:"})," All logs in docker logs"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Clean process trees:"})," Proper PID handling and signal propagation"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This pattern scales to any long-running tasks in Docker. Happy deploying!"})]})}function u(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},65:function(e,n,r){r.d(n,{Z:function(){return l},a:function(){return t}});var s=r(7294);let o={},i=s.createContext(o);function t(e){let n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),s.createElement(i.Provider,{value:n},e.children)}},2595:function(e){e.exports=JSON.parse('{"permalink":"/pr-preview/pr-43/blog/orchestrating-laravel-queues","source":"@site/blog/2025-05-21-orchestrating-laravel-queues.md","title":"Orchestrating Laravel Queues & Scheduling in Docker with Cron & Supervisor","description":"Introduction","date":"2025-05-21T00:00:00.000Z","tags":[],"hasTruncateMarker":true,"authors":[{"name":"Rajesh Nautiyal","title":"Software Engineer, Betalectic","page":{"permalink":"/pr-preview/pr-43/blog/authors/rajesh"},"socials":{"x":"https://x.com/Rajssj4","linkedin":"https://www.linkedin.com/in/rajesh-nautiyal/"},"imageURL":"/pr-preview/pr-43/img/blogs/AuthorProfile/rajesh.jpeg","key":"rajesh"}],"frontMatter":{"slug":"orchestrating-laravel-queues","title":"Orchestrating Laravel Queues & Scheduling in Docker with Cron & Supervisor","authors":["rajesh"],"image":"/img/blogs/docker_laravel_cron.jpg"},"unlisted":false,"nextItem":{"title":"Scaling Node.js Concurrency with the Cluster Module","permalink":"/pr-preview/pr-43/blog/concurrency-in-nodejs"}}')}}]);