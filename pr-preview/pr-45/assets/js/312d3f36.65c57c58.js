"use strict";(self.webpackChunkbetalectic_website=self.webpackChunkbetalectic_website||[]).push([["5455"],{733:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return o},metadata:function(){return i},toc:function(){return c}});var i=t(9060),s=t(5893),r=t(65);let o={slug:"cron-health-laravel",title:"Cron Health in Laravel: A Practical Monitoring Setup",authors:["arihant","param"],image:"/img/blogs/cronhealth.jpg"},a="Cron Health in Laravel: A Practical Monitoring Setup",l={authorsImageUrls:[void 0,void 0]},c=[{value:"Why Not Sentry?",id:"why-not-sentry",level:2},{value:"Why Healthchecks.io Works (for Cron)",id:"why-healthchecksio-works-for-cron",level:2},{value:"Understanding Cron Monitoring (Sync vs Async)",id:"understanding-cron-monitoring-sync-vs-async",level:2},{value:"Alternative: Monitoring When Schedule Dispatches a Job",id:"alternative-monitoring-when-schedule-dispatches-a-job",level:2},{value:"Step-by-Step Flow",id:"step-by-step-flow",level:3},{value:"Example",id:"example",level:3},{value:"Securing and Scaling This Setup",id:"securing-and-scaling-this-setup",level:2},{value:"1. Store Ping URLs in <code>.env</code>",id:"1-store-ping-urls-in-env",level:3},{value:"2. Set Timeouts Per Job",id:"2-set-timeouts-per-job",level:3},{value:"Final Thoughts",id:"final-thoughts",level:2}];function h(e){let n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Ensuring your background jobs and scheduled tasks run reliably is essential for any modern web application. Laravel offers solid queue and scheduling capabilities, but ",(0,s.jsx)(n.strong,{children:"observability"}),"\u2014knowing ",(0,s.jsx)(n.em,{children:"what\u2019s running, what\u2019s stuck, and what\u2019s failed"}),"\u2014is often overlooked."]}),"\n",(0,s.jsxs)(n.p,{children:["In this post, I\u2019ll walk you through how we built a system to monitor the ",(0,s.jsx)(n.strong,{children:"health of cron jobs and queued jobs"})," in Laravel using ",(0,s.jsx)(n.a,{href:"https://healthchecks.io/",children:"Healthchecks.io"})," (free tier) for scheduled tasks"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"why-not-sentry",children:"Why Not Sentry?"}),"\n",(0,s.jsxs)(n.p,{children:["We initially tried ",(0,s.jsx)(n.strong,{children:"Sentry\u2019s job monitor"})," to track failed jobs. It\u2019s a powerful tool and provides rich diagnostics - like stack traces, job context, and alerting capabilities - which can be incredibly helpful when debugging production issues. However, for our use case, the ",(0,s.jsx)(n.strong,{children:"cost became a constraint"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Sentry\u2019s free tier is quite limited: it includes only ",(0,s.jsx)(n.strong,{children:"one cron monitor"}),", and after that, they charge based on the number of monitors and event volume. For teams running multiple background jobs, scheduled tasks, or high-throughput queues, it\u2019s easy to ",(0,s.jsx)(n.strong,{children:"outgrow the free plan quickly"}),". Once you cross the free limits, pricing scales up significantly, especially if you want detailed event retention, multiple projects, or alerting features."]}),"\n",(0,s.jsxs)(n.p,{children:["We needed a ",(0,s.jsx)(n.strong,{children:"free or low-cost alternative"})," that still gave us insight into what's happening behind the scenes - without the pricing model scaling steeply as our system grows."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"why-healthchecksio-works-for-cron",children:"Why Healthchecks.io Works (for Cron)"}),"\n",(0,s.jsxs)(n.p,{children:["I\u2019ve continued using ",(0,s.jsx)(n.a,{href:"https://healthchecks.io/",children:(0,s.jsx)(n.strong,{children:"Healthchecks.io"})})," to track cron jobs. It's perfect for scheduled tasks and gives you 20 free monitors - plenty for most small to mid-sized applications."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Integration with Laravel is simple"}),", using ",(0,s.jsx)(n.code,{children:"->pingBefore()"})," and ",(0,s.jsx)(n.code,{children:"->thenPing()"})," in your ",(0,s.jsx)(n.code,{children:"App\\Console\\Kernel"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$schedule->command('your:daily-task')\n    ->daily()\n    ->before(function () {\n        Http::get('https://hc-ping.com/your-uuid/start');\n    })\n    ->after(function () {\n        Http::get('https://hc-ping.com/your-uuid');\n    });\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Healthchecks will notify you if a cron job ",(0,s.jsx)(n.strong,{children:"doesn't run"}),", ",(0,s.jsx)(n.strong,{children:"takes too long"}),", or ",(0,s.jsx)(n.strong,{children:"fails silently"}),"\u2014and that\u2019s invaluable."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"understanding-cron-monitoring-sync-vs-async",children:"Understanding Cron Monitoring (Sync vs Async)"}),"\n",(0,s.jsxs)(n.p,{children:["Unlike queued jobs that run asynchronously, cron jobs in Laravel are ",(0,s.jsx)(n.strong,{children:"synchronous,"})," meaning the scheduler kicks them off, waits for them to finish, and then moves on. That makes them ",(0,s.jsx)(n.strong,{children:"ideal for heartbeat-based monitoring"}),", where a remote service like Healthchecks tracks:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If the job ",(0,s.jsx)(n.strong,{children:"started"})," (via the ",(0,s.jsx)(n.code,{children:"/start"})," ping)"]}),"\n",(0,s.jsxs)(n.li,{children:["If the job ",(0,s.jsx)(n.strong,{children:"finished"})," (via the default ping)"]}),"\n",(0,s.jsxs)(n.li,{children:["If it ",(0,s.jsx)(n.strong,{children:"didn\u2019t finish in time"}),", or never started at all"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["And the best part? You don\u2019t need to modify your command\u2019s internal logic\u2014just attach the ",(0,s.jsx)(n.code,{children:"before()"})," and ",(0,s.jsx)(n.code,{children:"after()"})," methods to your scheduler."]}),"\n",(0,s.jsx)(n.h2,{id:"alternative-monitoring-when-schedule-dispatches-a-job",children:"Alternative: Monitoring When Schedule Dispatches a Job"}),"\n",(0,s.jsxs)(n.p,{children:["In some cases, your scheduled command doesn\u2019t do much by itself\u2014it simply dispatches a queued job. That makes the default ",(0,s.jsx)(n.code,{children:"before()"}),"/",(0,s.jsx)(n.code,{children:"after()"})," Healthchecks pings unreliable, because the command finishes immediately, while the actual work happens later in the queue."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Here\u2019s the fix:"})}),"\n",(0,s.jsxs)(n.p,{children:["Use the Healthchecks ",(0,s.jsx)(n.code,{children:"start"})," ping ",(0,s.jsx)(n.strong,{children:"before dispatch"}),", and call the ",(0,s.jsx)(n.strong,{children:"success/failure pings from within the job itself."})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"step-by-step-flow",children:"Step-by-Step Flow"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["In your ",(0,s.jsx)(n.strong,{children:"scheduled Artisan command"}),", ping Healthchecks ",(0,s.jsx)(n.code,{children:"/start"})," ",(0,s.jsx)(n.strong,{children:"just before dispatching the job"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["In your queued job, override the ",(0,s.jsx)(n.code,{children:"handle()"})," and ",(0,s.jsx)(n.code,{children:"failed()"})," methods to call the ",(0,s.jsx)(n.strong,{children:"success"})," or ",(0,s.jsx)(n.strong,{children:"failure"})," ping."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"// In your scheduled command:\npublic function handle()\n{\n    // Ping start\n    Http::get('https://hc-ping.com/your-uuid/start');\n\n    // Dispatch the actual job\n    YourQueuedJob::dispatch();\n}\n\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"// In your queued job:\nuse Illuminate\\Support\\Facades\\Http;\n\nclass YourQueuedJob implements ShouldQueue\n{\n    public function handle()\n    {\n        // Do the work...\n\n        // Ping success\n        Http::get('https://hc-ping.com/your-uuid');\n    }\n\n    public function failed(\\Throwable $exception)\n    {\n        // Ping failure\n        Http::get('https://hc-ping.com/your-uuid/fail');\n    }\n}\n\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"This method ensures you monitor the actual logic, not just the wrapper command. It\u2019s especially useful for jobs that might take time or fail in unexpected ways."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"securing-and-scaling-this-setup",children:"Securing and Scaling This Setup"}),"\n",(0,s.jsxs)(n.h3,{id:"1-store-ping-urls-in-env",children:["1. Store Ping URLs in ",(0,s.jsx)(n.code,{children:".env"})]}),"\n",(0,s.jsx)(n.p,{children:"Hardcoding your ping URLs is okay for a quick test, but in production, keep it clean:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"HEALTHCHECK_PING_DAILY_REPORT=https://hc-ping.com/uuid-1234\nHEALTHCHECK_PING_DAILY_REPORT_START=https://hc-ping.com/uuid-1234/start\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Then in ",(0,s.jsx)(n.code,{children:"Kernel.php"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$schedule->command('report:daily')\n    ->daily()\n    ->before(fn () => Http::get(env('HEALTHCHECK_PING_DAILY_REPORT_START')))\n    ->after(fn () => Http::get(env('HEALTHCHECK_PING_DAILY_REPORT')));\n\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-set-timeouts-per-job",children:"2. Set Timeouts Per Job"}),"\n",(0,s.jsx)(n.p,{children:"In Healthchecks.io, configure a timeout per monitor\u2014e.g., expect a ping every 24 hours, and alert if it doesn't happen within 25. That way, even if your Laravel scheduler stops or your server crashes, you'll still be notified."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"final-thoughts",children:"Final Thoughts"}),"\n",(0,s.jsxs)(n.p,{children:["Monitoring your cron jobs should be ",(0,s.jsx)(n.strong,{children:"as essential as writing them"}),". With tools like Healthchecks.io, you can gain confidence that your scheduled tasks are running exactly when (and how) they should, without breaking the bank."]}),"\n",(0,s.jsx)(n.p,{children:"Set it up once, and sleep easier knowing your background jobs are being watched."})]})}function d(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},65:function(e,n,t){t.d(n,{Z:function(){return a},a:function(){return o}});var i=t(7294);let s={},r=i.createContext(s);function o(e){let n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},9060:function(e){e.exports=JSON.parse('{"permalink":"/pr-preview/pr-45/blog/cron-health-laravel","source":"@site/blog/2025-04-22-cron-health-laravel.md","title":"Cron Health in Laravel: A Practical Monitoring Setup","description":"Ensuring your background jobs and scheduled tasks run reliably is essential for any modern web application. Laravel offers solid queue and scheduling capabilities, but observability\u2014knowing what\u2019s running, what\u2019s stuck, and what\u2019s failed\u2014is often overlooked.","date":"2025-04-22T00:00:00.000Z","tags":[],"hasTruncateMarker":true,"authors":[{"name":"Arihant Jain","title":"Jr. Software Engineer","page":{"permalink":"/pr-preview/pr-45/blog/authors/arihant"},"socials":{"x":"https://x.com/Arihant58198590","linkedin":"https://www.linkedin.com/in/arihant-jain-2a465b201/"},"imageURL":"/pr-preview/pr-45/img/blogs/AuthorProfile/arihant.jpg","key":"arihant"},{"name":"Paramveer Singh","title":"Jr. Software Engineer","page":{"permalink":"/pr-preview/pr-45/blog/authors/param"},"socials":{"x":"https://x.com/param11650","linkedin":"https://www.linkedin.com/in/paramveer-singh-943a1a200/"},"imageURL":"/pr-preview/pr-45/img/blogs/AuthorProfile/param.jpg","key":"param"}],"frontMatter":{"slug":"cron-health-laravel","title":"Cron Health in Laravel: A Practical Monitoring Setup","authors":["arihant","param"],"image":"/img/blogs/cronhealth.jpg"},"unlisted":false,"prevItem":{"title":"Validation Best Practices in Fintech Apps with React Hook Form and Yup","permalink":"/pr-preview/pr-45/blog/react-hook-form"},"nextItem":{"title":"Building Tech for Loan Against Securities (LAS): How the Ecosystem Enables Seamless Solutions","permalink":"/pr-preview/pr-45/blog/loan-against-securities"}}')}}]);