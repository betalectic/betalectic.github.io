<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Betalectic Blog</title>
        <link>https://betalectic.com/pr-preview/pr-48/blog</link>
        <description>Betalectic Blog</description>
        <lastBuildDate>Fri, 27 Jun 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[From Shared Offices to Skyscrapers: Explaining SaaS Multi-Tenancy Models]]></title>
            <link>https://betalectic.com/pr-preview/pr-48/blog/multi-tenancy-models</link>
            <guid>https://betalectic.com/pr-preview/pr-48/blog/multi-tenancy-models</guid>
            <pubDate>Fri, 27 Jun 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Introduction]]></description>
            <content:encoded><![CDATA[<div class="flex gap-4"><div class="blog-content-wrapper my-8 max-w-full"><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="introduction">Introduction<a href="https://betalectic.com/pr-preview/pr-48/blog/multi-tenancy-models#introduction" class="hash-link" aria-label="Direct link to Introduction" title="Direct link to Introduction">​</a></h3>
<p>In a SaaS (Software as a Service) environment, tenant isolation, scalability, cost-efficiency, and security are key architectural concerns. Here are three common approaches  to architecting multi-tenant SaaS applications using AWS infrastructure:</p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="same-aws-account-multi-tenancy"><strong>Same AWS Account Multi-Tenancy</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/multi-tenancy-models#same-aws-account-multi-tenancy" class="hash-link" aria-label="Direct link to same-aws-account-multi-tenancy" title="Direct link to same-aws-account-multi-tenancy">​</a></h2>
<p>This model consolidates all tenant data and infrastructure into a <strong>single AWS account</strong>. It can further be broken down into two tenancy models:</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="single-database-tenancy"><strong>Single-Database Tenancy</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/multi-tenancy-models#single-database-tenancy" class="hash-link" aria-label="Direct link to single-database-tenancy" title="Direct link to single-database-tenancy">​</a></h3>
<p><strong>Overview:</strong></p>
<p>All tenants share the same database and schema. Tenant data is typically separated using a <code>tenant_id</code> column.</p>
<p><strong>Pros:</strong></p>
<ul>
<li><strong>Simpler to manage</strong> and cost-effective.</li>
<li>Easier to implement analytics across tenants.</li>
<li>High resource utilization efficiency.</li>
</ul>
<p><strong>Cons:</strong></p>
<ul>
<li>Weaker <strong>data isolation</strong>—harder to meet compliance or security requirements.</li>
<li>Risk of <strong>noisy neighbor</strong> issues (one tenant’s activity affects others).</li>
<li>Complex data access controls.</li>
</ul>
<p><strong>Best for:</strong></p>
<p>Startups, low-complexity SaaS products, or internal tools with limited tenant-specific customization needs.</p>
<p><strong>Tenancy Diagram:</strong></p>
<p><img decoding="async" loading="lazy" alt="Screenshot 2025-05-26 at 3.00.53 PM.png" src="https://betalectic.com/pr-preview/pr-48/assets/images/multi_tenancy_1-cba806e5f51b28353923d16ee2f170c5.png" width="1424" height="934" class="img_ev3q"></p>
<hr>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="multi-database-tenancy"><strong>Multi-Database Tenancy</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/multi-tenancy-models#multi-database-tenancy" class="hash-link" aria-label="Direct link to multi-database-tenancy" title="Direct link to multi-database-tenancy">​</a></h3>
<p><strong>Overview:</strong></p>
<p>All tenants are in the same AWS account, but each has their own dedicated database instance or schema.</p>
<p><strong>Pros:</strong></p>
<ul>
<li><strong>Better isolation</strong> of tenant data than single-database tenancy.</li>
<li>Easier to handle <strong>data migrations or customisations</strong> per tenant.</li>
<li>Safer for GDPR/data localisation requirements.</li>
</ul>
<p><strong>Cons:</strong></p>
<ul>
<li>Still shares the same infrastructure limits of a single AWS account.</li>
<li>Harder to <strong>scale operationally</strong> as tenant count grows.</li>
<li>Resource constraints or failures can still impact multiple tenants.</li>
</ul>
<p><strong>Best for:</strong></p>
<p>SaaS offerings with moderate isolation requirements or mid-sized tenants.</p>
<p><strong>Tenancy Diagram:</strong></p>
<p><img decoding="async" loading="lazy" alt="Screenshot 2025-05-26 at 3.09.35 PM.png" src="https://betalectic.com/pr-preview/pr-48/assets/images/multi_tenancy_2-c6b3fa304ea5c3fe7627eb722d893d59.png" width="1736" height="1330" class="img_ev3q"></p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="same-aws-account-with-multiple-aws-sub-accounts"><strong>Same AWS Account with Multiple AWS Sub-Accounts</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/multi-tenancy-models#same-aws-account-with-multiple-aws-sub-accounts" class="hash-link" aria-label="Direct link to same-aws-account-with-multiple-aws-sub-accounts" title="Direct link to same-aws-account-with-multiple-aws-sub-accounts">​</a></h2>
<p><strong>Overview:</strong></p>
<p>This architecture uses a <strong>central AWS account</strong> for core services (e.g., control plane, shared services, global management) and creates <strong>dedicated AWS sub-accounts</strong> for each tenant. Each sub-account encapsulates a tenant's infrastructure and resources.</p>
<p><strong>Pros:</strong></p>
<ul>
<li>Strong <strong>tenant isolation</strong> for security and compliance.</li>
<li>Easier to apply <strong>resource quotas</strong>, billing tracking, and monitoring per tenant.</li>
<li>Better <strong>blast radius control</strong>—failures in one tenant’s environment do not impact others.</li>
<li>Clear <strong>cost attribution</strong> per tenant.</li>
</ul>
<p><strong>Cons:</strong></p>
<ul>
<li>Slightly higher <strong>operational complexity</strong> (account provisioning, cross-account access).</li>
<li><strong>Increased cost</strong> for control infrastructure replication.</li>
<li>Requires <strong>centralised orchestration</strong> and tooling for deployments, logging, etc.</li>
</ul>
<p><strong>Best for:</strong></p>
<p>Enterprise SaaS platforms that require strong isolation, customisations per tenant, or compliance with strict regulatory frameworks.</p>
<p><strong>Tenancy Diagram:</strong></p>
<p><img decoding="async" loading="lazy" alt="Screenshot 2025-05-26 at 2.56.01 PM.png" src="https://betalectic.com/pr-preview/pr-48/assets/images/multi_tenancy_3-47cb46a2cd601c0aab2b4d21c82902ba.png" width="654" height="1182" class="img_ev3q"></p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="individual-aws-account-per-tenant"><strong>Individual AWS Account per Tenant</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/multi-tenancy-models#individual-aws-account-per-tenant" class="hash-link" aria-label="Direct link to individual-aws-account-per-tenant" title="Direct link to individual-aws-account-per-tenant">​</a></h2>
<p><strong>Overview:</strong></p>
<p>Each tenant gets a <strong>completely separate AWS account</strong>, with fully isolated infrastructure and services. Often paired with AWS Organizations and Control Tower.</p>
<p><strong>Pros:</strong></p>
<ul>
<li><strong>Maximum isolation</strong> and security.</li>
<li>Independent scaling and cost tracking per tenant.</li>
<li>Ideal for <strong>white-label solutions</strong> or tenants needing full customization.</li>
</ul>
<p><strong>Cons:</strong></p>
<ul>
<li><strong>High overhead</strong> for account creation, management, and automation.</li>
<li>Harder to implement centralized monitoring and control.</li>
<li>Costly for small-scale tenants.</li>
</ul>
<p><strong>Best for:</strong></p>
<p>High-paying enterprise customers needing full-stack control or regulatory-driven segmentation.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="real-world-analogy-for-multi-tenant-saas-architectures">Real-World Analogy for Multi-Tenant SaaS Architectures<a href="https://betalectic.com/pr-preview/pr-48/blog/multi-tenancy-models#real-world-analogy-for-multi-tenant-saas-architectures" class="hash-link" aria-label="Direct link to Real-World Analogy for Multi-Tenant SaaS Architectures" title="Direct link to Real-World Analogy for Multi-Tenant SaaS Architectures">​</a></h2>
<p>To simplify and communicate different <strong>SaaS multi-tenancy deployment models</strong>, we can use a relatable analogy of <strong>office buildings and workplace setups</strong>.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="shared-aws-account-single-database-tenancy">Shared AWS Account, <strong>Single-Database Tenancy</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/multi-tenancy-models#shared-aws-account-single-database-tenancy" class="hash-link" aria-label="Direct link to shared-aws-account-single-database-tenancy" title="Direct link to shared-aws-account-single-database-tenancy">​</a></h3>
<blockquote>
<p>Shared Office Space with One Big Room and One Entrance</p>
</blockquote>
<ul>
<li><strong>All tenants (clients)</strong> share the same application infrastructure and <strong>a single database</strong>.</li>
<li>Data separation is enforced <strong>logically</strong> (e.g., using tenant IDs in rows).</li>
<li>Minimal overhead, easy to manage, <strong>but least isolated</strong>.</li>
</ul>
<p><strong>Analogy</strong>:</p>
<p>Multiple companies operate in a <strong>shared coworking space</strong> on one floor, using the <strong>same reception, same desks, and same conference rooms</strong>. Everyone enters through the <strong>same front door</strong>. Privacy is limited to desk partitions.</p>
<hr>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="shared-aws-account-multi-database-tenancy">Shared AWS Account, <strong>Multi-Database Tenancy</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/multi-tenancy-models#shared-aws-account-multi-database-tenancy" class="hash-link" aria-label="Direct link to shared-aws-account-multi-database-tenancy" title="Direct link to shared-aws-account-multi-database-tenancy">​</a></h3>
<blockquote>
<p>Shared Office Space with Separate Entrances and Individual Rooms</p>
</blockquote>
<ul>
<li>All tenants use <strong>the same application infrastructure</strong>, but each tenant has <strong>its own database</strong> (or schema).</li>
<li>Offers better <strong>data isolation</strong> while still sharing operational resources.</li>
<li>Still a <strong>single AWS account</strong>, so resources like ECS/S3 may be reused.</li>
</ul>
<p><strong>Analogy</strong>:</p>
<p>Companies still share a <strong>building floor</strong>, but now <strong>each company has its own locked room</strong>. They can enter via <strong>different doors</strong>, though the floor’s utilities (like electricity, internet, etc.) are shared. More secure and better privacy than a single room.</p>
<hr>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="single-aws-account-with-multiple-sub-accounts-per-tenant">Single AWS Account with <strong>Multiple Sub-Accounts per Tenant</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/multi-tenancy-models#single-aws-account-with-multiple-sub-accounts-per-tenant" class="hash-link" aria-label="Direct link to single-aws-account-with-multiple-sub-accounts-per-tenant" title="Direct link to single-aws-account-with-multiple-sub-accounts-per-tenant">​</a></h3>
<blockquote>
<p>Same Building, Different Floors, with Separate Lifts</p>
</blockquote>
<ul>
<li>Centralized <strong>root or management account</strong> with <strong>dedicated sub-accounts</strong> per tenant.</li>
<li>Central services (like CI/CD or image repo) reside in the management account.</li>
<li>Tenants operate in their own <strong>isolated AWS environments</strong> with independent IAM, billing, and network scopes.</li>
</ul>
<p><strong>Analogy</strong>:</p>
<p>The business now owns a <strong>multi-storey building</strong>. Each tenant occupies <strong>a separate floor</strong>, with their <strong>own private lift</strong> and office design. While the building is the same, they never interfere with one another and have a good level of operational independence.</p>
<hr>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="fully-isolated-aws-account-per-tenant">Fully Isolated AWS Account per Tenant<a href="https://betalectic.com/pr-preview/pr-48/blog/multi-tenancy-models#fully-isolated-aws-account-per-tenant" class="hash-link" aria-label="Direct link to Fully Isolated AWS Account per Tenant" title="Direct link to Fully Isolated AWS Account per Tenant">​</a></h3>
<blockquote>
<p>Each Company Has Its Own Building</p>
</blockquote>
<ul>
<li>Every tenant has <strong>its own AWS account</strong>, with full resource and network isolation.</li>
<li><strong>Most secure and compliant model</strong>, often used in enterprise-grade SaaS or regulated industries (e.g., healthcare, finance).</li>
<li>Slightly higher operational complexity and cost, but enables the most flexibility.</li>
</ul>
<p><strong>Analogy</strong>:</p>
<p>Each company owns and operates in <strong>a separate building entirely</strong>—with <strong>its own reception, security, power, and IT systems</strong>. No shared walls, no shared infrastructure. The <strong>highest level of control, security, and customization</strong> is possible.</p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="summary-table">Summary Table<a href="https://betalectic.com/pr-preview/pr-48/blog/multi-tenancy-models#summary-table" class="hash-link" aria-label="Direct link to Summary Table" title="Direct link to Summary Table">​</a></h2>
<table><thead><tr><th>Model</th><th>Analogy Description</th><th>Isolation Level</th><th>Operational Cost</th></tr></thead><tbody><tr><td>Shared Account, Single DB</td><td>Shared room in coworking space</td><td>🔴 Low</td><td>🟢 Low</td></tr><tr><td>Shared Account, Multi DB</td><td>Shared office floor with separate rooms</td><td>🟠 Medium</td><td>🟢 Low-Medium</td></tr><tr><td>Same Account with Sub-Accounts</td><td>Multi-floor building with private lifts</td><td>🟡 Medium-High</td><td>🟡 Medium</td></tr><tr><td>Fully Isolated AWS Account</td><td>Separate buildings per tenant</td><td>🟢 Very High</td><td>🔴 High</td></tr></tbody></table></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Monitoring Laravel Queued Jobs with Lifecycle Events]]></title>
            <link>https://betalectic.com/pr-preview/pr-48/blog/monitoring-laravel-queued-jobs</link>
            <guid>https://betalectic.com/pr-preview/pr-48/blog/monitoring-laravel-queued-jobs</guid>
            <pubDate>Wed, 28 May 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[When it comes to scheduled task monitoring, tools like Healthchecks.io do a stellar job. But what about queued jobs — those background tasks running via Redis, Amazon SQS, or other drivers in Laravel?]]></description>
            <content:encoded><![CDATA[<div class="flex gap-4"><div class="blog-content-wrapper my-8 max-w-full"><p>When it comes to scheduled task monitoring, tools like <a href="https://healthchecks.io/" target="_blank" rel="noopener noreferrer">Healthchecks.io</a> do a stellar job. But what about <strong>queued jobs</strong> — those background tasks running via Redis, Amazon SQS, or other drivers in Laravel?</p>
<p>Out of the box, Laravel doesn’t offer a dashboard or built-in UI to track job status. But the good news is: <strong>Laravel provides a robust job event system</strong> that allows you to hook into every phase of a job's lifecycle. By tapping into these events, you can build your own real-time job monitoring system with just a bit of code.</p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="laravels-built-in-job-lifecycle-events">Laravel’s Built-in Job Lifecycle Events<a href="https://betalectic.com/pr-preview/pr-48/blog/monitoring-laravel-queued-jobs#laravels-built-in-job-lifecycle-events" class="hash-link" aria-label="Direct link to Laravel’s Built-in Job Lifecycle Events" title="Direct link to Laravel’s Built-in Job Lifecycle Events">​</a></h2>
<p>Laravel fires several events during the lifecycle of a queued job. Here’s what you get out of the box:</p>
<table><thead><tr><th>Event</th><th>Description</th></tr></thead><tbody><tr><td><code>JobQueued</code></td><td>Fired when a job is added to the queue</td></tr><tr><td><code>JobProcessing</code></td><td>Fired just before the job starts executing</td></tr><tr><td><code>JobProcessed</code></td><td>Fired when the job finishes successfully</td></tr><tr><td><code>JobFailed</code></td><td>Fired if the job throws an exception</td></tr><tr><td><code>JobTimedOut</code></td><td>Fired when a job times out</td></tr><tr><td><code>JobExceptionOccurred</code></td><td>Fired for unhandled exceptions</td></tr></tbody></table>
<p>These events give us fine-grained visibility into every queued job. By listening to them, we can log activity, measure performance, or alert on failures — all without changing our job classes.</p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="setting-up-job-tracking-in-laravel">Setting Up Job Tracking in Laravel<a href="https://betalectic.com/pr-preview/pr-48/blog/monitoring-laravel-queued-jobs#setting-up-job-tracking-in-laravel" class="hash-link" aria-label="Direct link to Setting Up Job Tracking in Laravel" title="Direct link to Setting Up Job Tracking in Laravel">​</a></h2>
<p>Here’s a step-by-step guide to building a minimal yet powerful job tracking system using these native events.</p>
<hr>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="1-create-a-table-to-track-job-statuses">1. Create a Table to Track Job Statuses<a href="https://betalectic.com/pr-preview/pr-48/blog/monitoring-laravel-queued-jobs#1-create-a-table-to-track-job-statuses" class="hash-link" aria-label="Direct link to 1. Create a Table to Track Job Statuses" title="Direct link to 1. Create a Table to Track Job Statuses">​</a></h3>
<p>In a migration file:</p>
<div class="language-php codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-php codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Schema::create('job_statuses', function (Blueprint $table) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $table-&gt;id();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $table-&gt;string('job_id')-&gt;unique();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $table-&gt;string('name');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $table-&gt;string('status'); // queued, processing, completed, failed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $table-&gt;timestamp('queued_at')-&gt;nullable();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $table-&gt;timestamp('started_at')-&gt;nullable();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $table-&gt;timestamp('completed_at')-&gt;nullable();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $table-&gt;text('exception')-&gt;nullable();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $table-&gt;timestamps();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">});</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="2-create-a-listener-to-track-events">2. Create a Listener to Track Events<a href="https://betalectic.com/pr-preview/pr-48/blog/monitoring-laravel-queued-jobs#2-create-a-listener-to-track-events" class="hash-link" aria-label="Direct link to 2. Create a Listener to Track Events" title="Direct link to 2. Create a Listener to Track Events">​</a></h3>
<p><code>app/Listeners/TrackJobStatus.php</code>:</p>
<div class="language-php codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-php codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">namespace App\Listeners;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">use Illuminate\Queue\Events\JobQueued;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">use Illuminate\Queue\Events\JobProcessing;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">use Illuminate\Queue\Events\JobProcessed;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">use Illuminate\Queue\Events\JobFailed;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">use App\Models\JobStatus;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">class TrackJobStatus</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public function handle($event)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        $jobId = method_exists($event-&gt;job, 'uuid') ? $event-&gt;job-&gt;uuid() : null;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (!$jobId) return;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if ($event instanceof JobQueued) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            JobStatus::updateOrCreate(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                ['job_id' =&gt; $jobId],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                ['name' =&gt; $name, 'status' =&gt; 'queued', 'queued_at' =&gt; now()]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if ($event instanceof JobProcessing) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            JobStatus::where('job_id', $jobId)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                -&gt;update(['status' =&gt; 'processing', 'started_at' =&gt; now()]);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if ($event instanceof JobProcessed) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            JobStatus::where('job_id', $jobId)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                -&gt;update(['status' =&gt; 'completed', 'completed_at' =&gt; now()]);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if ($event instanceof JobFailed) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            JobStatus::where('job_id', $jobId)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                -&gt;update([</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    'status' =&gt; 'failed',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    'completed_at' =&gt; now(),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    'exception' =&gt; $event-&gt;exception-&gt;getMessage(),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                ]);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="3-register-the-listener-in-eventserviceprovider">3. Register the Listener in <code>EventServiceProvider</code><a href="https://betalectic.com/pr-preview/pr-48/blog/monitoring-laravel-queued-jobs#3-register-the-listener-in-eventserviceprovider" class="hash-link" aria-label="Direct link to 3-register-the-listener-in-eventserviceprovider" title="Direct link to 3-register-the-listener-in-eventserviceprovider">​</a></h3>
<p>Add the following to your <code>EventServiceProvider</code>:</p>
<div class="language-php codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-php codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">protected $listen = [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    \Illuminate\Queue\Events\JobQueued::class =&gt; [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        \App\Listeners\TrackJobStatus::class,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    \Illuminate\Queue\Events\JobProcessing::class =&gt; [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        \App\Listeners\TrackJobStatus::class,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    \Illuminate\Queue\Events\JobProcessed::class =&gt; [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        \App\Listeners\TrackJobStatus::class,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    \Illuminate\Queue\Events\JobFailed::class =&gt; [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        \App\Listeners\TrackJobStatus::class,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">];</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Laravel will now automatically dispatch your listener whenever these events occur.</p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="what-you-gain">What You Gain<a href="https://betalectic.com/pr-preview/pr-48/blog/monitoring-laravel-queued-jobs#what-you-gain" class="hash-link" aria-label="Direct link to What You Gain" title="Direct link to What You Gain">​</a></h2>
<p>With this lightweight system in place, you can:</p>
<ul>
<li>Monitor jobs that are <strong>queued</strong>, <strong>processing</strong>, or <strong>completed</strong></li>
<li>Gain insight into job <strong>execution times</strong></li>
<li>Catch and log <strong>failures with exception messages</strong></li>
<li>Build a <strong>live dashboard</strong> of job activity using Inertia.js, Livewire, or any frontend stack</li>
<li>Trigger <strong>Slack/email alerts</strong> when critical jobs fail</li>
</ul>
<p>You’re now equipped to build custom observability around one of Laravel’s most powerful background features — without relying on third-party infrastructure.</p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="final-thoughts">Final Thoughts<a href="https://betalectic.com/pr-preview/pr-48/blog/monitoring-laravel-queued-jobs#final-thoughts" class="hash-link" aria-label="Direct link to Final Thoughts" title="Direct link to Final Thoughts">​</a></h2>
<p>Laravel’s event system isn’t just for jobs — it’s a powerful architectural tool that gives you hooks into the core of the framework. By simply listening to the events Laravel already fires, you can build clean, decoupled systems for monitoring, alerting, and more.</p>
<p>Pair this queue monitoring setup with <strong>Healthchecks.io</strong> (for cron tasks) and you’ve got full coverage over your background workload — <strong>for free</strong>.</p>
<hr>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="bonus-tip-extend-the-listener">Bonus Tip: Extend the Listener<a href="https://betalectic.com/pr-preview/pr-48/blog/monitoring-laravel-queued-jobs#bonus-tip-extend-the-listener" class="hash-link" aria-label="Direct link to Bonus Tip: Extend the Listener" title="Direct link to Bonus Tip: Extend the Listener">​</a></h3>
<p>You can easily enhance this system to:</p>
<ul>
<li>Track <strong>payload details</strong> like user ID, batch ID, or job tags</li>
<li>Visualize job durations over time</li>
<li>Clean up old records with a scheduled command</li>
</ul>
<p>Let Laravel do the heavy lifting — you just have to listen.</p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Orchestrating Laravel Queues & Scheduling in Docker with Cron & Supervisor]]></title>
            <link>https://betalectic.com/pr-preview/pr-48/blog/orchestrating-laravel-queues</link>
            <guid>https://betalectic.com/pr-preview/pr-48/blog/orchestrating-laravel-queues</guid>
            <pubDate>Wed, 21 May 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Introduction]]></description>
            <content:encoded><![CDATA[<div class="flex gap-4"><div class="blog-content-wrapper my-8 max-w-full"><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="introduction"><strong>Introduction</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/orchestrating-laravel-queues#introduction" class="hash-link" aria-label="Direct link to introduction" title="Direct link to introduction">​</a></h2>
<p>Deploying Laravel applications in Docker often means packaging not only the HTTP server but also background processes—namely, the queue workers and the scheduler. While it’s easy to get “the app” running, orchestrating and monitoring  these long–running processes reliably can be tricky. In this post, we’ll walk through how I moved from a basic shell‐loop entrypoint to a more robust setup using cron for the scheduler and Supervisor for queue workers.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="problem-statement">Problem Statement<a href="https://betalectic.com/pr-preview/pr-48/blog/orchestrating-laravel-queues#problem-statement" class="hash-link" aria-label="Direct link to Problem Statement" title="Direct link to Problem Statement">​</a></h3>
<p>A production-ready Laravel container needs to handle three things:</p>
<ol>
<li><strong>The web server</strong> (<code>FrankenPHP</code>)</li>
<li><strong>Queue workers</strong> (<code>php artisan queue:work</code>)</li>
<li><strong>The scheduler</strong> (<code>php artisan schedule:run</code>)</li>
</ol>
<p>My initial Docker entrypoint bundled 2 &amp; 3 into a shell loop, but it lacked visibility, crash recovery, and proper PID management. Let’s fix that.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="initial-entrypoint-approach">Initial Entrypoint Approach<a href="https://betalectic.com/pr-preview/pr-48/blog/orchestrating-laravel-queues#initial-entrypoint-approach" class="hash-link" aria-label="Direct link to Initial Entrypoint Approach" title="Direct link to Initial Entrypoint Approach">​</a></h3>
<p>Here’s the one-liner I started with:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ENTRYPOINT ["sh", "-c", "php artisan queue:work &amp; while true; do php artisan schedule:run --verbose --no-interaction; sleep 60; done"]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li><strong>Pros</strong>
<ul>
<li>Extremely simple.</li>
</ul>
</li>
<li><strong>Cons</strong>
<ul>
<li>Both processes run under the same PID 1—no clean signals, no easy restarts.</li>
<li>If the scheduler crashes, it silently stops, and you won’t notice.</li>
</ul>
</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="introducing-cron-for-the-scheduler">Introducing Cron for the Scheduler<a href="https://betalectic.com/pr-preview/pr-48/blog/orchestrating-laravel-queues#introducing-cron-for-the-scheduler" class="hash-link" aria-label="Direct link to Introducing Cron for the Scheduler" title="Direct link to Introducing Cron for the Scheduler">​</a></h3>
<p>Offload scheduling to cron for reliability and observability. Create <code>franken-scheduler-cron</code> in your project root:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">* * * * * root cd /app &amp;&amp; /usr/local/bin/php artisan schedule:run --verbose --no-interaction &gt;&gt; /proc/1/fd/1 2&gt;&amp;1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ← **Make sure there’s an empty line after the above entry!**</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Why cron?</strong> Cron is battle-tested for running periodic jobs. By redirecting to <code>/proc/1/fd/1</code>, Laravel’s scheduler logs appear in Docker’s stdout.</p>
<p>In your Dockerfile:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># install and register cron</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RUN apt-get update \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> &amp;&amp; apt-get install -y cron</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">COPY franken-scheduler-cron /etc/cron.d/franken-scheduler-cron</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RUN chmod 0644 /etc/cron.d/franken-scheduler-cron \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &amp;&amp; crontab /etc/cron.d/franken-scheduler-cron</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You can verify inside the container:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker exec -it my-app-container crontab -l</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">* * * * * root cd /app &amp;&amp; /usr/local/bin/php artisan schedule:run --verbose --no-interaction &gt;&gt; /proc/1/fd/1 2&gt;&amp;1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Learn more about Laravel scheduling:</strong> <a href="https://laravel.com/docs/11.x/scheduling" target="_blank" rel="noopener noreferrer">Scheduling → Laravel Docs</a></p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="managing-queue-workers-with-supervisor">Managing Queue Workers with Supervisor<a href="https://betalectic.com/pr-preview/pr-48/blog/orchestrating-laravel-queues#managing-queue-workers-with-supervisor" class="hash-link" aria-label="Direct link to Managing Queue Workers with Supervisor" title="Direct link to Managing Queue Workers with Supervisor">​</a></h3>
<p>Supervisor provides automatic restarts, log management, and multi-process control—ideal for Laravel queues.</p>
<p>Create <code>supervisor.conf</code> in your project root:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[unix_http_server]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">file=/var/run/supervisor.sock</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">chmod=0700</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[supervisord]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">logfile=/dev/stdout</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">logfile_maxbytes=0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[rpcinterface:supervisor]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[supervisorctl]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">serverurl=unix:///var/run/supervisor.sock</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[program:laravel-worker]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">process_name=%(program_name)s_%(process_num)02d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">command=/usr/local/bin/php artisan queue:work sqs --sleep=3 --tries=3 --max-jobs=1000 --max-time=3600</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">autostart=true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">autorestart=true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">stopasgroup=true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">killasgroup=true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">user=root</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">numprocs=2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">redirect_stderr=true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">stdout_logfile=/dev/stdout</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">stdout_logfile_maxbytes=0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">stopwaitsecs=3600</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li><code>numprocs=2</code> launches two workers</li>
<li>Logs stream to Docker’s stdout</li>
<li>Workers auto-restart on failure</li>
</ul>
<p>Install Supervisor and add your config in your dockerfile:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">RUN apt-get install -y supervisor</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ADD supervisord.conf /etc/supervisord.conf</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Learn more about <a href="https://supervisord.org/" target="_blank" rel="noopener noreferrer">Supervisor</a> and <a href="https://laravel.com/docs/11.x/queues#running-the-queue-worker" target="_blank" rel="noopener noreferrer">Running Laravel queues</a></strong></p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="the-final-dockerfile">The Final Dockerfile<a href="https://betalectic.com/pr-preview/pr-48/blog/orchestrating-laravel-queues#the-final-dockerfile" class="hash-link" aria-label="Direct link to The Final Dockerfile" title="Direct link to The Final Dockerfile">​</a></h3>
<p>Here’s the polished image, based on <code>dunglas/frankenphp</code>. Since cron and Supervisor both daemonize (run in the background), the container would exit immediately—so we append <code>tail -f /dev/null</code> to keep it alive.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">FROM dunglas/frankenphp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RUN apt-get update \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &amp;&amp; DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    git \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    unzip \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    librabbitmq-dev \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    libpq-dev \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    jq \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    libfreetype6-dev \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    libjpeg62-turbo-dev \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    libpng-dev \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    libzip-dev \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    procps \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    cron \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    supervisor</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RUN install-php-extensions pcntl pdo_pgsql gd zip</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - &amp;&amp; \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    apt-get install -y nodejs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">COPY . /app</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># install our cron job</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">COPY franken-scheduler-cron /etc/cron.d/franken-scheduler-cron</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RUN chmod 0644 /etc/cron.d/franken-scheduler-cron \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &amp;&amp; crontab /etc/cron.d/franken-scheduler-cron</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ADD supervisord.conf /etc/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RUN composer install --no-dev --optimize-autoloader</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ENTRYPOINT ["sh", "-c", "cron &amp;&amp; supervisord -c /etc/supervisord.conf &amp;&amp; tail -f /dev/null"]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="verifying-your-background-processes">Verifying Your Background Processes<a href="https://betalectic.com/pr-preview/pr-48/blog/orchestrating-laravel-queues#verifying-your-background-processes" class="hash-link" aria-label="Direct link to Verifying Your Background Processes" title="Direct link to Verifying Your Background Processes">​</a></h3>
<ul>
<li>List All Processes</li>
</ul>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker exec -it &lt;container&gt; ps aux</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You should see <code>cron</code>, <code>supervisord</code>, and your <code>php artisan queue:work</code> processes.</p>
<ul>
<li>Check Supervisor Status</li>
</ul>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker exec -it &lt;container&gt; supervisorctl status</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="conclusion">Conclusion<a href="https://betalectic.com/pr-preview/pr-48/blog/orchestrating-laravel-queues#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h3>
<p>By splitting responsibilities—<strong>cron</strong> for scheduling and <strong>Supervisor</strong> for queue workers—you gain:</p>
<ul>
<li><strong>Crash recovery:</strong> Supervisor auto-restarts failed workers</li>
<li><strong>Observability:</strong> All logs in docker logs</li>
<li><strong>Clean process trees:</strong> Proper PID handling and signal propagation</li>
</ul>
<p>This pattern scales to any long-running tasks in Docker. Happy deploying!</p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Scaling Node.js Concurrency with the Cluster Module]]></title>
            <link>https://betalectic.com/pr-preview/pr-48/blog/concurrency-in-nodejs</link>
            <guid>https://betalectic.com/pr-preview/pr-48/blog/concurrency-in-nodejs</guid>
            <pubDate>Tue, 20 May 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Node.js is often described as single-threaded, but it powers some of the world’s highest-traffic applications. So how does it manage to handle thousands of concurrent connections, network I/O,  and file reads/writes—with just one thread?]]></description>
            <content:encoded><![CDATA[<div class="flex gap-4"><div class="blog-content-wrapper my-8 max-w-full"><p>Node.js is often described as <strong>single-threaded</strong>, but it powers some of the world’s highest-traffic applications. So how does it manage to handle <strong>thousands of concurrent connections</strong>, <strong>network I/O</strong>,  and <strong>file reads/writes</strong>—with just one thread?</p>
<p>The short answer: <strong>It doesn’t.</strong></p>
<p>Node.js uses a <strong>single thread for executing JavaScript</strong>, but it’s backed by a <strong>multi-threaded architecture under the hood</strong> using:</p>
<ul>
<li>The <strong>libuv thread pool</strong> (4 threads by default)</li>
<li>The <strong>cluster module</strong> (multi-process architecture)</li>
<li><strong>Worker threads</strong> (for CPU-bound tasks)</li>
</ul>
<p>In this post, we’ll dive into how Node.js achieves real-world scalability using the <code>cluster</code> module—comparing this process-based approach with Java’s traditional multithreading model</p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="what-is-the-cluster-module-">What is the Cluster Module ?<a href="https://betalectic.com/pr-preview/pr-48/blog/concurrency-in-nodejs#what-is-the-cluster-module-" class="hash-link" aria-label="Direct link to What is the Cluster Module ?" title="Direct link to What is the Cluster Module ?">​</a></h2>
<p>The <code>cluster</code> module allows you to <strong>create multiple copies (workers)</strong> of your Node.js application. These workers are separate <strong>processes</strong>, not threads. These are forked from a single <strong>master process</strong>, and they can be scheduled by the OS to run on <strong>different CPU cores</strong>, giving you <strong>true parallelism</strong> — not just concurrency. The workers have these similarity among them:</p>
<ul>
<li>Run the <strong>same code</strong></li>
<li>Share the same <strong>server port</strong></li>
<li>Can handle requests <strong>independently and in parallel</strong></li>
</ul>
<p>So even though each process is still single-threaded internally, together they give the illusion of <strong>multithreaded execution</strong>—because multiple requests can be handled <strong>at the same time</strong> by different processes.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="why-use-clustering">Why use clustering?<a href="https://betalectic.com/pr-preview/pr-48/blog/concurrency-in-nodejs#why-use-clustering" class="hash-link" aria-label="Direct link to Why use clustering?" title="Direct link to Why use clustering?">​</a></h3>
<ul>
<li>To <strong>utilize all CPU cores</strong> on the machine (default Node.js uses only one)</li>
<li>To handle <strong>more concurrent requests</strong> without blocking</li>
<li>To build <strong>scalable</strong> and <strong>high-performance</strong> applications</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="understanding-nodejs-scaling-with-the-kitchen-analogy">Understanding Node.js Scaling with the Kitchen Analogy<a href="https://betalectic.com/pr-preview/pr-48/blog/concurrency-in-nodejs#understanding-nodejs-scaling-with-the-kitchen-analogy" class="hash-link" aria-label="Direct link to Understanding Node.js Scaling with the Kitchen Analogy" title="Direct link to Understanding Node.js Scaling with the Kitchen Analogy">​</a></h3>
<p>Imagine your restaurant has <strong>8 kitchens.</strong></p>
<ul>
<li>At first, you have <strong>only 1 chef</strong> working in <strong>just one kitchen</strong>. That chef can only cook one order at a time, so the other 7 kitchens sit empty and unused.</li>
<li>Now, you hire <strong>7 more chefs</strong>, so you have <strong>8 chefs working in 8 separate kitchens</strong>.
Each chef can cook orders independently, so you can serve <strong>8 customers at the same time</strong> — fully using all your kitchens.</li>
</ul>
<p>Here in this analogy, kitchen refers to the CPU cores and the chefs are the processes to handle different operations.</p>
<p>Note:- When you use the <strong><code>cluster</code> module</strong> in Node.js, you're not creating <em>threads</em> like you might in Java or C++. Instead, you're creating multiple <strong>independent processes.</strong></p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="practical-example-with-code">Practical Example with Code<a href="https://betalectic.com/pr-preview/pr-48/blog/concurrency-in-nodejs#practical-example-with-code" class="hash-link" aria-label="Direct link to Practical Example with Code" title="Direct link to Practical Example with Code">​</a></h2>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> cluster </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"cluster"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> os </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"os"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> knexConfig </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">//DB_Connections</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> knex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"knex"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">knexConfig</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> numCPUs </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> os</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">cpus</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> mode </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  process</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">argv</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">find</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">arg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> arg</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">startsWith</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"--mode="</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?.</span><span class="token method function property-access" style="color:#d73a49">split</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"="</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">"cluster"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">processPropertiesSequentially</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">properties</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> workerKnex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"knex"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">knexConfig</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> property </span><span class="token keyword" style="color:#00009f">of</span><span class="token plain"> properties</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">workerKnex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"properties"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">where</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"uuid"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> property</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">uuid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">update</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">property_date_type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"date-given"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> workerKnex</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">destroy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">mode </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"single"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Running in SINGLE-threaded mode"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">time</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Single-threaded duration"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">knex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"properties"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">select</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"uuid"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"property_date_type"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">where</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"property_date_type"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"dated"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">then</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">properties</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">processPropertiesSequentially</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">properties</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">timeEnd</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Single-threaded duration"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> knex</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">destroy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      process</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword control-flow" style="color:#00009f">catch</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">err</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">error</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Error fetching properties:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> err</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> knex</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">destroy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      process</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">mode </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"cluster"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">cluster</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">isMaster</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Running in CLUSTER mode"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">Master </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">process</span><span class="token template-string interpolation punctuation" style="color:#393A34">.</span><span class="token template-string interpolation property-access">pid</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string string" style="color:#e3116c"> is running</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">time</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Cluster duration"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">knex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"properties"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">select</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"uuid"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"property_date_type"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">where</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"property_date_type"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"dated"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">then</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">properties</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> plainProperties </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token known-class-name class-name">JSON</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">parse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">stringify</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">properties</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> chunkSize </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token known-class-name class-name">Math</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">ceil</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">plainProperties</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> numCPUs</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> exitedWorkers </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numCPUs</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> start </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> chunkSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> end </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> start </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> chunkSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> propertyChunk </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> plainProperties</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">slice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">start</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> end</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> worker </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> cluster</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">fork</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          worker</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">send</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">propertyChunk</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          worker</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">on</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"message"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">msg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">Worker </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">worker</span><span class="token template-string interpolation punctuation" style="color:#393A34">.</span><span class="token template-string interpolation property-access">process</span><span class="token template-string interpolation punctuation" style="color:#393A34">.</span><span class="token template-string interpolation property-access">pid</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string string" style="color:#e3116c">: </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">msg</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          worker</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">on</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"exit"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">code</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            exitedWorkers</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">exitedWorkers </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> numCPUs</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">timeEnd</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Cluster duration"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> knex</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">destroy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              process</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword control-flow" style="color:#00009f">catch</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">err</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">error</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Error fetching properties:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> err</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> knex</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">destroy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        process</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    process</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">on</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"message"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">propertyChunk</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> workerKnex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"knex"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">knexConfig</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">try</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> property </span><span class="token keyword" style="color:#00009f">of</span><span class="token plain"> propertyChunk</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">workerKnex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"properties"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">where</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"uuid"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> property</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">uuid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">update</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token literal-property property" style="color:#36acaa">property_date_type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"date-given"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">err</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        process</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">send</span><span class="token punctuation" style="color:#393A34">(</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">Error: </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">err</span><span class="token template-string interpolation punctuation" style="color:#393A34">.</span><span class="token template-string interpolation property-access">message</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">finally</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> workerKnex</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">destroy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        process</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">error</span><span class="token punctuation" style="color:#393A34">(</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">Unknown mode: </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">mode</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  process</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="pseudo-code">Pseudo Code<a href="https://betalectic.com/pr-preview/pr-48/blog/concurrency-in-nodejs#pseudo-code" class="hash-link" aria-label="Direct link to Pseudo Code" title="Direct link to Pseudo Code">​</a></h2>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">1.</span><span class="token plain"> </span><span class="token maybe-class-name">Initialize</span><span class="token plain"> database connections and detect the number </span><span class="token keyword" style="color:#00009f">of</span><span class="token plain"> available </span><span class="token constant" style="color:#36acaa">CPU</span><span class="token plain">    cores</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2.</span><span class="token plain"> </span><span class="token maybe-class-name">Check</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> the current process is the </span><span class="token string" style="color:#e3116c">"master"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:#d73a49">Yes</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">Master</span><span class="token plain"> </span><span class="token maybe-class-name">Process</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> </span><span class="token property-access maybe-class-name">Fetch</span><span class="token plain"> all properties </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> the database where </span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">property_date_type</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token plain"> is         </span><span class="token string" style="color:#e3116c">"dated"</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     </span><span class="token property-access">b</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> </span><span class="token property-access maybe-class-name">Split</span><span class="token plain"> the list </span><span class="token keyword" style="color:#00009f">of</span><span class="token plain"> properties into equal chunks based on number </span><span class="token keyword" style="color:#00009f">of</span><span class="token plain">            </span><span class="token constant" style="color:#36acaa">CPU</span><span class="token plain"> cores</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     </span><span class="token property-access">c</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> </span><span class="token property-access maybe-class-name">For</span><span class="token plain"> each chunk</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        i</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> </span><span class="token property-access maybe-class-name">Fork</span><span class="token plain"> a </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">worker</span><span class="token plain"> process</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token property-access">ii</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> </span><span class="token property-access maybe-class-name">Send</span><span class="token plain"> the chunk </span><span class="token keyword" style="color:#00009f">of</span><span class="token plain"> properties to that worker</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     </span><span class="token property-access">d</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> </span><span class="token property-access maybe-class-name">Listen</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> messages or completion signals </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> workers</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     </span><span class="token property-access">e</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> </span><span class="token property-access maybe-class-name">When</span><span class="token plain"> all workers have completed</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token maybe-class-name">Log</span><span class="token plain"> total time taken</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token maybe-class-name">Close</span><span class="token plain"> the database connection</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:#d73a49">No</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">Worker</span><span class="token plain"> </span><span class="token maybe-class-name">Process</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> </span><span class="token property-access maybe-class-name">Receive</span><span class="token plain"> a chunk </span><span class="token keyword" style="color:#00009f">of</span><span class="token plain"> properties </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> the master</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     </span><span class="token property-access">b</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> </span><span class="token property-access maybe-class-name">For</span><span class="token plain"> each property </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> the chunk</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token maybe-class-name">Update</span><span class="token plain"> its </span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">property_date_type</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"dated"</span><span class="token plain"> to </span><span class="token string" style="color:#e3116c">"date-given"</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain">              the database</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     </span><span class="token property-access">c</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> </span><span class="token property-access maybe-class-name">After</span><span class="token plain"> finishing</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token maybe-class-name">Close</span><span class="token plain"> the database connection</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token maybe-class-name">Exit</span><span class="token plain"> the worker process</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="results">Results<a href="https://betalectic.com/pr-preview/pr-48/blog/concurrency-in-nodejs#results" class="hash-link" aria-label="Direct link to Results" title="Direct link to Results">​</a></h2>
<ul>
<li>When the dataset is not large enough, the single-threaded approach can be faster, and the multi-threaded (cluster) approach may become an overkill. In this case, the dataset contains only 1,000 properties.</li>
</ul>
<p><img decoding="async" loading="lazy" alt="Screenshot 2025-05-18 at 10.12.12 PM.png" src="https://betalectic.com/pr-preview/pr-48/assets/images/avi_result_1-73a5301985dfb86559feb215b06db65c.png" width="2258" height="326" class="img_ev3q"></p>
<ul>
<li>As the dataset size increases, the cluster-based approach starts performing better—taking nearly half the time compared to the single-threaded approach. In this case, the dataset consists of 62,000 properties.</li>
</ul>
<p><img decoding="async" loading="lazy" alt="Screenshot 2025-05-18 at 10.04.04 PM.png" src="https://betalectic.com/pr-preview/pr-48/assets/images/avi_result_2-19e1c63d3d5b085def9e591d0b249cc1.png" width="2248" height="310" class="img_ev3q"></p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="-java-vs-nodejs-cluster-module---quick-reference">📝 Java vs Node.js Cluster Module - Quick Reference<a href="https://betalectic.com/pr-preview/pr-48/blog/concurrency-in-nodejs#-java-vs-nodejs-cluster-module---quick-reference" class="hash-link" aria-label="Direct link to 📝 Java vs Node.js Cluster Module - Quick Reference" title="Direct link to 📝 Java vs Node.js Cluster Module - Quick Reference">​</a></h2>
<p>Just for context, here are a few quick differences between Java and Node.js threads:</p>
<ul>
<li>🧩 Node.js <code>cluster</code> creates <strong>multiple processes</strong>, while Java typically uses <strong>multiple threads</strong> within one process.</li>
<li>🧠 Java threads <strong>share memory</strong>, whereas Node.js cluster workers <strong>do not</strong> — they communicate via <strong>IPC (message passing)</strong>.</li>
<li>⚙️ Java gives <strong>fine-grained control</strong> over threading (e.g., <code>start()</code>, <code>join()</code>), while Node.js <code>cluster</code> manages workers more like <strong>isolated services</strong>.</li>
</ul></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Validation Best Practices in Fintech Apps with React Hook Form and Yup]]></title>
            <link>https://betalectic.com/pr-preview/pr-48/blog/react-hook-form</link>
            <guid>https://betalectic.com/pr-preview/pr-48/blog/react-hook-form</guid>
            <pubDate>Tue, 13 May 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[In the world of fintech, forms are everywhere—signing up for an account, entering payment details, applying for loans, and more. Ensuring that these forms work correctly and securely is crucial.  That's where form validation comes in. In this guide, we'll explore how to implement effective form validation in your fintech applications using React Hook Form and Yup, two powerful tools that make the process straightforward and efficient.]]></description>
            <content:encoded><![CDATA[<div class="flex gap-4"><div class="blog-content-wrapper my-8 max-w-full"><p>In the world of fintech, forms are everywhere—signing up for an account, entering payment details, applying for loans, and more. Ensuring that these forms work correctly and securely is crucial.  That's where form validation comes in. In this guide, we'll explore how to implement effective form validation in your fintech applications using React Hook Form and Yup, two powerful tools that make the process straightforward and efficient.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="why-is-form-validation-important-in-fintech">Why Is Form Validation Important in Fintech?<a href="https://betalectic.com/pr-preview/pr-48/blog/react-hook-form#why-is-form-validation-important-in-fintech" class="hash-link" aria-label="Direct link to Why Is Form Validation Important in Fintech?" title="Direct link to Why Is Form Validation Important in Fintech?">​</a></h2>
<p>Fintech applications handle sensitive financial data, making form validation essential for:</p>
<ul>
<li><strong>Data Accuracy</strong>: Ensuring users provide correct and complete information.</li>
<li><strong>Security</strong>: Preventing malicious inputs that could compromise the system.</li>
<li><strong>Compliance</strong>: Adhering to regulations like KYC (Know Your Customer) and AML (Anti-Money Laundering).</li>
<li><strong>User Experience</strong>: Providing immediate feedback to users, reducing errors and frustration.</li>
</ul>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="introducing-react-hook-form-and-yup">Introducing React Hook Form and Yup<a href="https://betalectic.com/pr-preview/pr-48/blog/react-hook-form#introducing-react-hook-form-and-yup" class="hash-link" aria-label="Direct link to Introducing React Hook Form and Yup" title="Direct link to Introducing React Hook Form and Yup">​</a></h2>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="react-hook-form">React Hook Form<a href="https://betalectic.com/pr-preview/pr-48/blog/react-hook-form#react-hook-form" class="hash-link" aria-label="Direct link to React Hook Form" title="Direct link to React Hook Form">​</a></h3>
<p>React Hook Form is a lightweight library that simplifies form management in React applications. It offers:</p>
<ul>
<li><strong>Performance</strong>: Minimizes re-renders, enhancing performance.</li>
<li><strong>Ease of Use</strong>: Simple API for registering inputs and handling submissions.</li>
<li><strong>Integration</strong>: Works seamlessly with validation libraries like Yup.</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="yup">Yup<a href="https://betalectic.com/pr-preview/pr-48/blog/react-hook-form#yup" class="hash-link" aria-label="Direct link to Yup" title="Direct link to Yup">​</a></h3>
<p>Yup is a JavaScript schema builder for value parsing and validation. It allows developers to define a schema for their data and validate it accordingly.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="setting-up-react-hook-form-with-yup">Setting Up React Hook Form with Yup<a href="https://betalectic.com/pr-preview/pr-48/blog/react-hook-form#setting-up-react-hook-form-with-yup" class="hash-link" aria-label="Direct link to Setting Up React Hook Form with Yup" title="Direct link to Setting Up React Hook Form with Yup">​</a></h2>
<p>Let's walk through setting up a simple registration form with fields for full name, email, phone number, and password.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="1-install-the-necessary-packages">1. Install the Necessary Packages<a href="https://betalectic.com/pr-preview/pr-48/blog/react-hook-form#1-install-the-necessary-packages" class="hash-link" aria-label="Direct link to 1. Install the Necessary Packages" title="Direct link to 1. Install the Necessary Packages">​</a></h3>
<p>First, install React Hook Form, Yup, and the resolver that connects them:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">npm install react-hook-form yup @hookform/resolvers</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="2-define-the-validation-schema-with-yup">2. Define the Validation Schema with Yup<a href="https://betalectic.com/pr-preview/pr-48/blog/react-hook-form#2-define-the-validation-schema-with-yup" class="hash-link" aria-label="Direct link to 2. Define the Validation Schema with Yup" title="Direct link to 2. Define the Validation Schema with Yup">​</a></h3>
<p>Create a schema that specifies the validation rules for each field:</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports operator" style="color:#393A34">*</span><span class="token imports"> </span><span class="token imports keyword module" style="color:#00009f">as</span><span class="token imports"> </span><span class="token imports maybe-class-name">Yup</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"yup"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> validationSchema </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token maybe-class-name">Yup</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">object</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">shape</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">fullName</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Yup</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">required</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Full name is required"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">min</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Full name must be at least 2 characters"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">email</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Yup</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">email</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Invalid email address"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">required</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Email is required"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">phoneNumber</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Yup</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">matches</span><span class="token punctuation" style="color:#393A34">(</span><span class="token regex regex-delimiter" style="color:#36acaa">/</span><span class="token regex regex-source language-regex anchor function" style="color:#d73a49">^</span><span class="token regex regex-source language-regex char-class char-class-punctuation punctuation" style="color:#393A34">[</span><span class="token regex regex-source language-regex char-class range" style="color:#36acaa">0</span><span class="token regex regex-source language-regex char-class range range-punctuation operator" style="color:#393A34">-</span><span class="token regex regex-source language-regex char-class range" style="color:#36acaa">9</span><span class="token regex regex-source language-regex char-class char-class-punctuation punctuation" style="color:#393A34">]</span><span class="token regex regex-source language-regex quantifier number" style="color:#36acaa">{10}</span><span class="token regex regex-source language-regex anchor function" style="color:#d73a49">$</span><span class="token regex regex-delimiter" style="color:#36acaa">/</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Phone number must be 10 digits"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">required</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Phone number is required"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">password</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Yup</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">required</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Password is required"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">min</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">8</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Password must be at least 8 characters"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="3-integrate-react-hook-form-with-the-validation-schema">3. Integrate React Hook Form with the Validation Schema<a href="https://betalectic.com/pr-preview/pr-48/blog/react-hook-form#3-integrate-react-hook-form-with-the-validation-schema" class="hash-link" aria-label="Direct link to 3. Integrate React Hook Form with the Validation Schema" title="Direct link to 3. Integrate React Hook Form with the Validation Schema">​</a></h3>
<p>Use the <code>useForm</code> hook from React Hook Form and pass in the Yup schema using the resolver:</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> useForm </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"react-hook-form"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> yupResolver </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@hookform/resolvers/yup"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  register</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  handleSubmit</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">formState</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> errors </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useForm</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">resolver</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">yupResolver</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">validationSchema</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="4-create-the-form-component">4. Create the Form Component<a href="https://betalectic.com/pr-preview/pr-48/blog/react-hook-form#4-create-the-form-component" class="hash-link" aria-label="Direct link to 4. Create the Form Component" title="Direct link to 4. Create the Form Component">​</a></h3>
<p>Build the form using standard HTML elements and register each input with React Hook Form:</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">form</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">onSubmit</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:#393A34">=</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript function" style="color:#d73a49">handleSubmit</span><span class="token tag script language-javascript punctuation" style="color:#393A34">(</span><span class="token tag script language-javascript" style="color:#00009f">onSubmit</span><span class="token tag script language-javascript punctuation" style="color:#393A34">)</span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">label</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text">Full Name</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">label</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">input</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">type</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">text</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag spread punctuation" style="color:#393A34">{</span><span class="token tag spread operator" style="color:#393A34">...</span><span class="token tag spread method function property-access" style="color:#d73a49">register</span><span class="token tag spread punctuation" style="color:#393A34">(</span><span class="token tag spread string" style="color:#e3116c">"fullName"</span><span class="token tag spread punctuation" style="color:#393A34">)</span><span class="token tag spread punctuation" style="color:#393A34">}</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">errors</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">fullName</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">p</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">errors</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">fullName</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">message</span><span class="token punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">p</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">  </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">label</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text">Email</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">label</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">input</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">type</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">email</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag spread punctuation" style="color:#393A34">{</span><span class="token tag spread operator" style="color:#393A34">...</span><span class="token tag spread method function property-access" style="color:#d73a49">register</span><span class="token tag spread punctuation" style="color:#393A34">(</span><span class="token tag spread string" style="color:#e3116c">"email"</span><span class="token tag spread punctuation" style="color:#393A34">)</span><span class="token tag spread punctuation" style="color:#393A34">}</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">errors</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">email</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">p</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">errors</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">email</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">message</span><span class="token punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">p</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">  </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">label</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text">Phone Number</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">label</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">input</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">type</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">text</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag spread punctuation" style="color:#393A34">{</span><span class="token tag spread operator" style="color:#393A34">...</span><span class="token tag spread method function property-access" style="color:#d73a49">register</span><span class="token tag spread punctuation" style="color:#393A34">(</span><span class="token tag spread string" style="color:#e3116c">"phoneNumber"</span><span class="token tag spread punctuation" style="color:#393A34">)</span><span class="token tag spread punctuation" style="color:#393A34">}</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">errors</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">phoneNumber</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">p</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">errors</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">phoneNumber</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">message</span><span class="token punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">p</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">  </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">label</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text">Password</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">label</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">input</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">type</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">password</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag spread punctuation" style="color:#393A34">{</span><span class="token tag spread operator" style="color:#393A34">...</span><span class="token tag spread method function property-access" style="color:#d73a49">register</span><span class="token tag spread punctuation" style="color:#393A34">(</span><span class="token tag spread string" style="color:#e3116c">"password"</span><span class="token tag spread punctuation" style="color:#393A34">)</span><span class="token tag spread punctuation" style="color:#393A34">}</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">errors</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">password</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">p</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">errors</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">password</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">message</span><span class="token punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">p</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">  </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">button</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">type</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">submit</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text">Register</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">button</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">form</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In this example, when the user submits the form, the <code>onSubmit</code> function is called only if all validations pass. If there are validation errors, they are displayed next to the respective fields.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="best-practices-for-form-validation-in-fintech-apps">Best Practices for Form Validation in Fintech Apps<a href="https://betalectic.com/pr-preview/pr-48/blog/react-hook-form#best-practices-for-form-validation-in-fintech-apps" class="hash-link" aria-label="Direct link to Best Practices for Form Validation in Fintech Apps" title="Direct link to Best Practices for Form Validation in Fintech Apps">​</a></h2>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="1-provide-real-time-feedback">1. Provide Real-Time Feedback<a href="https://betalectic.com/pr-preview/pr-48/blog/react-hook-form#1-provide-real-time-feedback" class="hash-link" aria-label="Direct link to 1. Provide Real-Time Feedback" title="Direct link to 1. Provide Real-Time Feedback">​</a></h3>
<p>Offer immediate validation feedback as users interact with the form:</p>
<ul>
<li><strong>OnBlur Validation</strong>: Validate fields when they lose focus.</li>
<li><strong>OnChange Validation</strong>: Validate fields as users type.</li>
</ul>
<p>This approach helps users correct errors promptly, enhancing the user experience.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="2-handle-server-side-validation">2. Handle Server-Side Validation<a href="https://betalectic.com/pr-preview/pr-48/blog/react-hook-form#2-handle-server-side-validation" class="hash-link" aria-label="Direct link to 2. Handle Server-Side Validation" title="Direct link to 2. Handle Server-Side Validation">​</a></h3>
<p>While client-side validation improves usability, server-side validation is crucial for security:</p>
<ul>
<li><strong>Duplicate Checks</strong>: Ensure data like email or phone number isn't already registered.</li>
<li><strong>Business Logic</strong>: Validate data against business rules not enforceable on the client side.</li>
</ul>
<p>Always validate data on the server before processing to maintain data integrity.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="3-implement-conditional-validation">3. Implement Conditional Validation<a href="https://betalectic.com/pr-preview/pr-48/blog/react-hook-form#3-implement-conditional-validation" class="hash-link" aria-label="Direct link to 3. Implement Conditional Validation" title="Direct link to 3. Implement Conditional Validation">​</a></h3>
<p>Use Yup's conditional validation for fields that depend on others:</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> validationSchema </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token maybe-class-name">Yup</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">object</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">shape</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">hasReferral</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Yup</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">boolean</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">referralCode</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Yup</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">when</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"hasReferral"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">is</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">then</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Yup</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">required</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Referral code is required"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">otherwise</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Yup</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">notRequired</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This ensures that fields like 'referralCode' are only required when applicable.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="4-localize-validation-messages">4. Localize Validation Messages<a href="https://betalectic.com/pr-preview/pr-48/blog/react-hook-form#4-localize-validation-messages" class="hash-link" aria-label="Direct link to 4. Localize Validation Messages" title="Direct link to 4. Localize Validation Messages">​</a></h3>
<p>For fintech apps serving diverse user bases, localize validation messages:</p>
<ul>
<li><strong>Internationalization (i18n)</strong>: Use libraries like i18next to manage translations.</li>
<li><strong>Dynamic Messages</strong>: Provide error messages in the user's preferred language.</li>
</ul>
<p>This practice improves accessibility and user satisfaction.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="5-secure-sensitive-data">5. Secure Sensitive Data<a href="https://betalectic.com/pr-preview/pr-48/blog/react-hook-form#5-secure-sensitive-data" class="hash-link" aria-label="Direct link to 5. Secure Sensitive Data" title="Direct link to 5. Secure Sensitive Data">​</a></h3>
<p>Ensure that sensitive information is handled securely:</p>
<ul>
<li><strong>Input Masking</strong>: Mask inputs like passwords or account numbers.</li>
<li><strong>Secure Transmission</strong>: Use HTTPS to encrypt data in transit.</li>
<li><strong>Data Storage</strong>: Avoid storing sensitive data on the client side.</li>
</ul>
<p>Implementing these measures protects user data and builds trust.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="conclusion">Conclusion<a href="https://betalectic.com/pr-preview/pr-48/blog/react-hook-form#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>Effective form validation in fintech applications is vital for data integrity, security, and user trust. By leveraging React Hook Form and Yup, developers can create robust, user-friendly forms that meet the stringent requirements of the financial industry.</p>
<p>Implementing best practices such as comprehensive schemas, real-time feedback, server-side validation, and secure data handling ensures that your fintech app provides a reliable and secure user experience.</p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Cron Health in Laravel: A Practical Monitoring Setup]]></title>
            <link>https://betalectic.com/pr-preview/pr-48/blog/cron-health-laravel</link>
            <guid>https://betalectic.com/pr-preview/pr-48/blog/cron-health-laravel</guid>
            <pubDate>Tue, 22 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Ensuring your background jobs and scheduled tasks run reliably is essential for any modern web application. Laravel offers solid queue and scheduling capabilities, but observability—knowing what’s running, what’s stuck, and what’s failed—is often overlooked.]]></description>
            <content:encoded><![CDATA[<div class="flex gap-4"><div class="blog-content-wrapper my-8 max-w-full"><p>Ensuring your background jobs and scheduled tasks run reliably is essential for any modern web application. Laravel offers solid queue and scheduling capabilities, but <strong>observability</strong>—knowing <em>what’s running, what’s stuck, and what’s failed</em>—is often overlooked.</p>
<p>In this post, I’ll walk you through how we built a system to monitor the <strong>health of cron jobs and queued jobs</strong> in Laravel using <a href="https://healthchecks.io/" target="_blank" rel="noopener noreferrer">Healthchecks.io</a> (free tier) for scheduled tasks</p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="why-not-sentry">Why Not Sentry?<a href="https://betalectic.com/pr-preview/pr-48/blog/cron-health-laravel#why-not-sentry" class="hash-link" aria-label="Direct link to Why Not Sentry?" title="Direct link to Why Not Sentry?">​</a></h2>
<p>We initially tried <strong>Sentry’s job monitor</strong> to track failed jobs. It’s a powerful tool and provides rich diagnostics - like stack traces, job context, and alerting capabilities - which can be incredibly helpful when debugging production issues. However, for our use case, the <strong>cost became a constraint</strong>.</p>
<p>Sentry’s free tier is quite limited: it includes only <strong>one cron monitor</strong>, and after that, they charge based on the number of monitors and event volume. For teams running multiple background jobs, scheduled tasks, or high-throughput queues, it’s easy to <strong>outgrow the free plan quickly</strong>. Once you cross the free limits, pricing scales up significantly, especially if you want detailed event retention, multiple projects, or alerting features.</p>
<p>We needed a <strong>free or low-cost alternative</strong> that still gave us insight into what's happening behind the scenes - without the pricing model scaling steeply as our system grows.</p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="why-healthchecksio-works-for-cron">Why Healthchecks.io Works (for Cron)<a href="https://betalectic.com/pr-preview/pr-48/blog/cron-health-laravel#why-healthchecksio-works-for-cron" class="hash-link" aria-label="Direct link to Why Healthchecks.io Works (for Cron)" title="Direct link to Why Healthchecks.io Works (for Cron)">​</a></h2>
<p>I’ve continued using <a href="https://healthchecks.io/" target="_blank" rel="noopener noreferrer"><strong>Healthchecks.io</strong></a> to track cron jobs. It's perfect for scheduled tasks and gives you 20 free monitors - plenty for most small to mid-sized applications.</p>
<p><strong>Integration with Laravel is simple</strong>, using <code>-&gt;pingBefore()</code> and <code>-&gt;thenPing()</code> in your <code>App\Console\Kernel</code>:</p>
<div class="language-php codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-php codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$schedule-&gt;command('your:daily-task')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -&gt;daily()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -&gt;before(function () {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Http::get('https://hc-ping.com/your-uuid/start');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    })</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -&gt;after(function () {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Http::get('https://hc-ping.com/your-uuid');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    });</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Healthchecks will notify you if a cron job <strong>doesn't run</strong>, <strong>takes too long</strong>, or <strong>fails silently</strong>—and that’s invaluable.</p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="understanding-cron-monitoring-sync-vs-async">Understanding Cron Monitoring (Sync vs Async)<a href="https://betalectic.com/pr-preview/pr-48/blog/cron-health-laravel#understanding-cron-monitoring-sync-vs-async" class="hash-link" aria-label="Direct link to Understanding Cron Monitoring (Sync vs Async)" title="Direct link to Understanding Cron Monitoring (Sync vs Async)">​</a></h2>
<p>Unlike queued jobs that run asynchronously, cron jobs in Laravel are <strong>synchronous,</strong> meaning the scheduler kicks them off, waits for them to finish, and then moves on. That makes them <strong>ideal for heartbeat-based monitoring</strong>, where a remote service like Healthchecks tracks:</p>
<ul>
<li>If the job <strong>started</strong> (via the <code>/start</code> ping)</li>
<li>If the job <strong>finished</strong> (via the default ping)</li>
<li>If it <strong>didn’t finish in time</strong>, or never started at all</li>
</ul>
<p>And the best part? You don’t need to modify your command’s internal logic—just attach the <code>before()</code> and <code>after()</code> methods to your scheduler.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="alternative-monitoring-when-schedule-dispatches-a-job">Alternative: Monitoring When Schedule Dispatches a Job<a href="https://betalectic.com/pr-preview/pr-48/blog/cron-health-laravel#alternative-monitoring-when-schedule-dispatches-a-job" class="hash-link" aria-label="Direct link to Alternative: Monitoring When Schedule Dispatches a Job" title="Direct link to Alternative: Monitoring When Schedule Dispatches a Job">​</a></h2>
<p>In some cases, your scheduled command doesn’t do much by itself—it simply dispatches a queued job. That makes the default <code>before()</code>/<code>after()</code> Healthchecks pings unreliable, because the command finishes immediately, while the actual work happens later in the queue.</p>
<p><strong>Here’s the fix:</strong></p>
<p>Use the Healthchecks <code>start</code> ping <strong>before dispatch</strong>, and call the <strong>success/failure pings from within the job itself.</strong></p>
<hr>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="step-by-step-flow">Step-by-Step Flow<a href="https://betalectic.com/pr-preview/pr-48/blog/cron-health-laravel#step-by-step-flow" class="hash-link" aria-label="Direct link to Step-by-Step Flow" title="Direct link to Step-by-Step Flow">​</a></h3>
<ol>
<li>In your <strong>scheduled Artisan command</strong>, ping Healthchecks <code>/start</code> <strong>just before dispatching the job</strong>.</li>
<li>In your queued job, override the <code>handle()</code> and <code>failed()</code> methods to call the <strong>success</strong> or <strong>failure</strong> ping.</li>
</ol>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="example">Example<a href="https://betalectic.com/pr-preview/pr-48/blog/cron-health-laravel#example" class="hash-link" aria-label="Direct link to Example" title="Direct link to Example">​</a></h3>
<div class="language-php codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-php codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// In your scheduled command:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public function handle()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // Ping start</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Http::get('https://hc-ping.com/your-uuid/start');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // Dispatch the actual job</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    YourQueuedJob::dispatch();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-php codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-php codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// In your queued job:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">use Illuminate\Support\Facades\Http;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">class YourQueuedJob implements ShouldQueue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public function handle()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // Do the work...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // Ping success</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Http::get('https://hc-ping.com/your-uuid');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public function failed(\Throwable $exception)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // Ping failure</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Http::get('https://hc-ping.com/your-uuid/fail');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<blockquote>
<p>This method ensures you monitor the actual logic, not just the wrapper command. It’s especially useful for jobs that might take time or fail in unexpected ways.</p>
</blockquote>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="securing-and-scaling-this-setup">Securing and Scaling This Setup<a href="https://betalectic.com/pr-preview/pr-48/blog/cron-health-laravel#securing-and-scaling-this-setup" class="hash-link" aria-label="Direct link to Securing and Scaling This Setup" title="Direct link to Securing and Scaling This Setup">​</a></h2>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="1-store-ping-urls-in-env">1. Store Ping URLs in <code>.env</code><a href="https://betalectic.com/pr-preview/pr-48/blog/cron-health-laravel#1-store-ping-urls-in-env" class="hash-link" aria-label="Direct link to 1-store-ping-urls-in-env" title="Direct link to 1-store-ping-urls-in-env">​</a></h3>
<p>Hardcoding your ping URLs is okay for a quick test, but in production, keep it clean:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">HEALTHCHECK_PING_DAILY_REPORT=https://hc-ping.com/uuid-1234</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">HEALTHCHECK_PING_DAILY_REPORT_START=https://hc-ping.com/uuid-1234/start</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Then in <code>Kernel.php</code>:</p>
<div class="language-php codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-php codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$schedule-&gt;command('report:daily')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -&gt;daily()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -&gt;before(fn () =&gt; Http::get(env('HEALTHCHECK_PING_DAILY_REPORT_START')))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -&gt;after(fn () =&gt; Http::get(env('HEALTHCHECK_PING_DAILY_REPORT')));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="2-set-timeouts-per-job">2. Set Timeouts Per Job<a href="https://betalectic.com/pr-preview/pr-48/blog/cron-health-laravel#2-set-timeouts-per-job" class="hash-link" aria-label="Direct link to 2. Set Timeouts Per Job" title="Direct link to 2. Set Timeouts Per Job">​</a></h3>
<p>In Healthchecks.io, configure a timeout per monitor—e.g., expect a ping every 24 hours, and alert if it doesn't happen within 25. That way, even if your Laravel scheduler stops or your server crashes, you'll still be notified.</p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="final-thoughts">Final Thoughts<a href="https://betalectic.com/pr-preview/pr-48/blog/cron-health-laravel#final-thoughts" class="hash-link" aria-label="Direct link to Final Thoughts" title="Direct link to Final Thoughts">​</a></h2>
<p>Monitoring your cron jobs should be <strong>as essential as writing them</strong>. With tools like Healthchecks.io, you can gain confidence that your scheduled tasks are running exactly when (and how) they should, without breaking the bank.</p>
<p>Set it up once, and sleep easier knowing your background jobs are being watched.</p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Building Tech for Loan Against Securities (LAS): How the Ecosystem Enables Seamless Solutions]]></title>
            <link>https://betalectic.com/pr-preview/pr-48/blog/loan-against-securities</link>
            <guid>https://betalectic.com/pr-preview/pr-48/blog/loan-against-securities</guid>
            <pubDate>Thu, 10 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Unlocking Liquidity with Loan Against Securities (LAS)]]></description>
            <content:encoded><![CDATA[<div class="flex gap-4"><div class="blog-content-wrapper my-8 max-w-full"><p><em>Unlocking Liquidity with Loan Against Securities (LAS)</em></p>
<p>In today’s fast-evolving financial landscape, individuals and investors are constantly seeking ways to unlock liquidity without liquidating their hard-earned investments. Enter Loan Against Securities (LAS) - a powerful financial tool that allows borrowers to leverage their existing securities to access funds while keeping their investment portfolios intact. With the rise of digital platforms and mobile apps, LAS is becoming more accessible than ever, especially in a dynamic market like India. Here’s a deep dive into what LAS entails, the key players involved, and how seamless it has become to build a mobile app for lending against securities.</p>
<p><strong>What is Loan Against Securities (LAS)?</strong></p>
<p>Loan Against Securities is a financing option where borrowers pledge their financial assets - such as stocks, mutual funds, bonds, or insurance policies - as collateral to secure a loan. Instead of selling their investments, individuals can borrow funds against them, typically at competitive interest rates, while retaining ownership and the potential for future gains. In India, LAS has gained traction as a flexible and efficient way to meet short-term liquidity needs, whether for personal expenses, business funding, or emergency requirements.</p>
<p>The process is straightforward: the borrower pledges their securities, the lender evaluates the collateral’s value, and a loan is disbursed, usually ranging from 50-80% of the asset’s market value (known as the Loan-to-Value or LTV ratio). Once the loan is repaid, the securities are unpledged, returning full control to the borrower.</p>
<p><strong>Key Players in the LAS Ecosystem</strong><br>
<!-- -->The LAS framework involves three critical stakeholders working in tandem:</p>
<ol>
<li>Borrower/Investor with Holdings: This is the individual or entity holding securities - be it equity shares, mutual fund units, or other eligible assets - who needs liquidity but doesn’t want to sell their investments.</li>
<li>Intermediaries for Pledging Assets (API Providers): These are the technology-driven facilitators that make LAS seamless. Intermediaries such as depositories (e.g., NSDL, CDSL), API providers, and fintech platforms handle the pledging process. Notably, CAMS (Computer Age Management Services) and KFintech (KFin Technologies) play a pivotal role in the Indian market, especially for Loan Against Mutual Funds (LAMF). They provide APIs that enable secure and efficient pledging, revoking, and invoking of mutual fund assets. These Registrar and Transfer Agents (RTAs) integrate with lenders and depositories to verify holdings, mark liens on mutual fund units, and ensure compliance with regulatory norms set by SEBI and RBI. Their APIs streamline the process, offering real-time data and automation for a paperless experience.</li>
<li>Lender Providing the Loan: Banks, Non-Banking Financial Companies (NBFCs), and fintech lenders are the primary institutions offering LAS. They assess the collateral, determine the loan amount, and disburse funds. Leading players in India include HDFC Bank, ICICI Bank, Bajaj Finance, and newer fintech entrants leveraging technology for faster processing.</li>
</ol>
<p><strong>Building a Mobile App for LAS: Embedding Convenience</strong><br>
<!-- -->The digitization of financial services has paved the way for mobile apps to become the go-to solution for LAS. Such an app can either be a standalone platform or embedded into existing mobile banking or investment apps through hosted flows or SDKs (Software Development Kits). Here’s how it can transform the LAS experience:</p>
<ul>
<li>Seamless Integration: By embedding LAS functionality into an existing app (e.g., a stock trading or mutual fund platform), users can access loans without leaving their familiar ecosystem. Hosted flows allow lenders to offer a white-labeled solution, while SDKs enable customization for a branded experience.</li>
<li>End-to-End Automation: A well-designed app can handle everything - from showcasing eligible securities and calculating loan amounts to pledging assets and signing agreements - all within a few taps.</li>
</ul>
<p><strong>KYC and Loan Disbursement Made Simple</strong><br>
<!-- -->Regulatory compliance is a cornerstone of LAS, and mobile apps can streamline this process:</p>
<ul>
<li>Digital KYC: Using Aadhaar-based e-KYC or video KYC, borrowers can verify their identity in minutes, adhering to RBI guidelines. APIs from trusted providers can fetch and validate user data securely.</li>
<li>Loan Disbursement: Once KYC is complete and securities are pledged, the app can trigger instant loan disbursement to the borrower’s bank account. Real-time updates on loan status enhance transparency and trust.</li>
</ul>
<p><strong>Flexible EMI Collection</strong><br>
<!-- -->Repayment is a critical aspect of LAS, and mobile apps can offer borrowers flexibility and control:</p>
<ul>
<li>Customizable EMIs: During the loan application process, users can select their preferred repayment tenure and EMI amount based on their financial capacity. The app can display a repayment schedule upfront.</li>
<li>Automated Collections: With integrations like NACH (National Automated Clearing House) mandates, EMIs can be deducted automatically from the borrower’s account, reducing the risk of defaults. Push notifications and reminders ensure borrowers stay on track.</li>
</ul>
<p><strong>Why LAS Apps Are Growing &amp; the Disbursements Are Increasing in Alarming Numbers:</strong><br>
<!-- -->India’s booming investment culture and widespread smartphone adoption make LAS apps a perfect fit. They empower investors to access liquidity without disrupting long-term goals, while businesses save time and resources by leveraging pre-built tools.
As the Indian market embraces digital transformation, building a mobile app for Loan Against Securities isn’t just an opportunity - it’s a necessity. By bridging the gap between investors, intermediaries, and lenders, these apps can redefine how liquidity is accessed, making financial flexibility a reality for millions.</p>
<p>For fintechs and banks, embedding LAS via our SDKs or workflows - powered by intermediaries like CAMS and KFintech - unlocks cross-selling opportunities and boosts customer retention without the headache of coding from scratch.</p>
<p>Are you ready to tap into this growing space? The future of LAS is mobile, and the time to seize this opportunity is now!</p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[AI Agents Are Here: Will They Replace Human Jobs or Help Them?]]></title>
            <link>https://betalectic.com/pr-preview/pr-48/blog/ai-agents</link>
            <guid>https://betalectic.com/pr-preview/pr-48/blog/ai-agents</guid>
            <pubDate>Mon, 07 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[AI (Artificial Intelligence) is no longer just a tool—it’s now working alongside us. From answering customer questions to analyzing huge amounts of data, AI is changing how businesses operate. But one big question remains:  Will AI take away jobs, or will it make work easier for humans?]]></description>
            <content:encoded><![CDATA[<div class="flex gap-4"><div class="blog-content-wrapper my-8 max-w-full"><p>AI (Artificial Intelligence) is no longer just a tool—it’s now working alongside us. From answering customer questions to analyzing huge amounts of data, AI is changing how businesses operate. But one big question remains:  <strong>Will AI take away jobs, or will it make work easier for humans?</strong></p>
<p><strong>What Can AI Agents Do?</strong></p>
<p>AI-powered assistants (or AI agents) are getting smarter every day. They can:</p>
<ol>
<li><strong>Answer customer questions instantly</strong> (like chatbots on websites).</li>
<li><strong>Analyze data and create reports</strong> in minutes.</li>
<li><strong>Write content, generate code, and suggest creative ideas.</strong></li>
<li><strong>Automate repetitive tasks</strong>, making work faster and more efficient.</li>
</ol>
<p>Industries like <strong>finance, healthcare, marketing, and technology</strong> are already using AI to improve their work.</p>
<p><strong>Will AI Take Over Jobs?</strong></p>
<p>Some jobs are more at risk than others. AI is great at handling repetitive tasks, so some roles might disappear. According to the <strong>World Economic Forum</strong>, AI could replace <strong>85 million jobs</strong> by 2025, but it will also create <strong>97 million new ones</strong>. This means that while some roles may become obsolete, new opportunities will arise in areas such as AI development, automation management, cybersecurity, and digital transformation. The key to staying relevant in this shift is <strong>upskilling and adapting to new technologies</strong>.</p>
<p><strong>Jobs That Might Be Replaced:</strong></p>
<ul>
<li>
<p>Data entry and admin jobs.</p>
</li>
<li>
<p>Basic customer service roles.</p>
</li>
<li>
<p>Telemarketing and sales calls.</p>
</li>
<li>
<p>Repetitive factory jobs.</p>
</li>
</ul>
<p><strong>Jobs That AI Will Support (Not Replace):</strong></p>
<ul>
<li>
<p><strong>Creative Jobs</strong> – AI can help, but human creativity is unique.</p>
</li>
<li>
<p><strong>Doctors &amp; Healthcare Workers</strong> – AI analyzes data, but humans make decisions.</p>
</li>
<li>
<p><strong>Software Developers</strong> – AI can write code, but humans design and innovate.</p>
</li>
<li>
<p><strong>Sales &amp; Customer Relations</strong> – AI helps with insights, but people build trust.</p>
</li>
</ul>
<p><strong>How AI and Humans Can Work Together</strong></p>
<p>Instead of replacing humans, AI can <strong>help</strong> people work smarter. The best way to prepare for the future is to <strong>work with AI rather than against it</strong>.</p>
<p><strong>How to Stay Ahead in the AI Era?</strong></p>
<p>Learn to use AI tools in your industry.</p>
<p>Focus on skills AI doesn’t have, like <strong>creativity, problem-solving, and emotional intelligence</strong>.</p>
<p>Gain knowledge in <strong>AI ethics, automation, and prompt engineering</strong>.</p>
<p>Be open to new technology and adapt to AI-powered workflows.</p>
<p><strong>Final Thoughts</strong></p>
<p>AI is not here to <strong>replace</strong> humans; it’s here to <strong>help</strong> them. Those who learn how to work with AI will have better opportunities in the future.</p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Typography in UI Design: Points to consider while designing]]></title>
            <link>https://betalectic.com/pr-preview/pr-48/blog/typography-in-ui-design</link>
            <guid>https://betalectic.com/pr-preview/pr-48/blog/typography-in-ui-design</guid>
            <pubDate>Thu, 27 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Typography is the art of arranging text to make it readable, visually appealing, and expressive. Apart from using right fonts, it explains how text looks, feels, and guides the reader’s experience.  The right typography makes content easy to read, sets the mood, and even influences how people perceive a brand or product.]]></description>
            <content:encoded><![CDATA[<div class="flex gap-4"><div class="blog-content-wrapper my-8 max-w-full"><p>Typography is the art of arranging text to make it readable, visually appealing, and expressive. Apart from using right fonts, it explains how text looks, feels, and guides the reader’s experience.  The right typography makes content easy to read, sets the mood, and even influences how people perceive a brand or product.</p>
<p>Typography plays a key role in UI and visual design because it directly affects readability, usability, and the overall feel of a product. Well-chosen fonts create hierarchy, guide users through content effortlessly, and make interfaces intuitive. Good typography enhances accessibility, ensuring text is easy to read for everyone, while also reinforcing a brand’s personality.</p>
<p>Here’s how conscious choices in typography can elevate both aesthetics and usability.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="1-vibe-check">1. Vibe Check!<a href="https://betalectic.com/pr-preview/pr-48/blog/typography-in-ui-design#1-vibe-check" class="hash-link" aria-label="Direct link to 1. Vibe Check!" title="Direct link to 1. Vibe Check!">​</a></h2>
<p>Before choosing a typeface (<em>the overall design of a set of characters, including letters, numbers, and symbols, that share a consistent style</em>), consider the product’s personality. Fonts (<em>a specific variation of a typeface, including details like weight (bold, light), style (italic, regular), and size</em>) shape perception, usability, and brand identity.</p>
<ul>
<li><strong>Serif</strong> → Serif typeface evoke a sense of tradition, trust, and sophistication. Their small decorative strokes give them a classic, authoritative feel, making them ideal for conveying credibility and elegance.
Great for editorial platforms, finance, luxury brands.
(e.g., Times New Roman, Garamond)</li>
<li><strong>Sans-Serif</strong> → Sans-serif typeface feel clean, minimal, and highly readable. With their simple, stroke-free design, they create a contemporary, approachable, and user-friendly vibe.
Perfect for tech, startups, apps, minimalist branding.
(e.g., Helvetica, Roboto, Inter)</li>
<li><strong>Script</strong> → They give a sense of elegance, and artistry. Their flowing, handwritten style adds warmth and expressiveness, making them ideal for designs that aim to feel personal, stylish, or decorative.
Best for branding, invitations, creative industries
(e.g., Pacifico, Lobster)</li>
<li><strong>Monospace</strong> → They create a structured, precise, and technical feel. They evoke a sense of clarity and functionality, making them ideal for displaying code, system text, or data-driven content.
Works for developer tools, coding interfaces, tech-heavy branding.
(e.g., Courier, Space Mono)</li>
</ul>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="2-readability--accessibility">2. Readability &amp; Accessibility<a href="https://betalectic.com/pr-preview/pr-48/blog/typography-in-ui-design#2-readability--accessibility" class="hash-link" aria-label="Direct link to 2. Readability &amp; Accessibility" title="Direct link to 2. Readability &amp; Accessibility">​</a></h2>
<ul>
<li><strong>Legibility</strong>
→ Can you tell letters apart? similar characters like "l" and "1" or "o" and "0" can create confusion among readers which can lead to them creating mistakes which can cost users a lot of their time and resources. Choosing fonts with high legibility is essential in interfaces where quick reading is required, such as dashboards, forms, and navigation menus.</li>
<li><strong>Readibiliity</strong>
→ Does it feel comfortable to read? Proper font size, line height, and spacing help ensure that users don’t struggle with text-heavy content. Lines that are too close together or too long can make reading exhausting, while overly decorative or condensed fonts slow down reading speed and comprehension. Breaking up text into digestible sections, using clear hierarchy, and aligning text properly all contribute to a better reading experience.</li>
<li><strong>Inclusivity</strong>
→ Dyslexia-friendly fonts, increased letter spacing, and high contrast improve accessibility for users with visual impairments or reading disorders. Adjusting letter and word spacing prevents text from feeling too dense, while using softer contrast (like dark gray text on an off-white background) reduces glare and eye strain.</li>
</ul>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="3-font-size--hierarchy">3. Font Size &amp; Hierarchy<a href="https://betalectic.com/pr-preview/pr-48/blog/typography-in-ui-design#3-font-size--hierarchy" class="hash-link" aria-label="Direct link to 3. Font Size &amp; Hierarchy" title="Direct link to 3. Font Size &amp; Hierarchy">​</a></h2>
<ul>
<li><strong>Size &amp; Weight</strong><br>
<!-- -->→ Larger and heavier fonts naturally stand out, making them perfect for headlines, calls to action, or key information that needs emphasis. On the other hand, body text should be lighter and appropriately sized to maintain readability over long passages, ensuring users don’t feel overwhelmed or fatigued while reading.</li>
<li><strong>Hierarchy for Scannability</strong>
→ Users don’t read everything, they scan for relevant information, and a clear heading structure makes this process faster and more intuitive. A well-structured hierarchy visually organizes content, allowing users to quickly understand the main points before diving into details.</li>
<li><strong>Proximity Principle</strong>
→ When related elements are placed close together, users instinctively understand that they belong to the same category or topic, reducing cognitive load. Proper spacing between unrelated sections helps avoid visual clutter, making the layout feel cleaner and more organized.</li>
</ul>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="4-contrast--color">4. Contrast &amp; Color<a href="https://betalectic.com/pr-preview/pr-48/blog/typography-in-ui-design#4-contrast--color" class="hash-link" aria-label="Direct link to 4. Contrast &amp; Color" title="Direct link to 4. Contrast &amp; Color">​</a></h2>
<ul>
<li><strong>Keep it Simple</strong>
→ High contrast between text and background makes reading effortless, especially for users with visual impairments or color blindness. However, using pure black text on a pure white background creates excessive strain due to the stark contrast, so softer shades like dark gray on off-white improve comfort without sacrificing readability.</li>
<li><strong>UI Color Cues</strong></li>
<li><strong>Red</strong>
Red is associated with urgency and danger, making it the go-to color for error messages, alerts, or anything that requires immediate attention. It naturally grabs the eye, helping users quickly recognize mistakes in forms, payment failures, or system warnings.</li>
<li><strong>Yellow</strong>
Yellow signals caution or important, non-critical alerts, often used in warnings that don’t require urgent action. It also works well for drawing subtle attention to tooltips, notifications, or key UI elements without overwhelming the user.</li>
<li><strong>Blue</strong>
Blue is commonly used in corporate, financial, and tech interfaces because it conveys reliability, calmness, and security. It’s often the default color for hyperlinks and UI elements that require user interaction, reinforcing familiarity and dependability.</li>
<li><strong>Green</strong>
Green is associated with positive outcomes, such as successful transactions, completed actions, or system confirmations. It’s also linked to eco-friendly initiatives, health-related content, and UI elements that encourage progress or approval.</li>
</ul>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="5-break-the-rules-once-in-a-while">5. Break the Rules (Once in a While)<a href="https://betalectic.com/pr-preview/pr-48/blog/typography-in-ui-design#5-break-the-rules-once-in-a-while" class="hash-link" aria-label="Direct link to 5. Break the Rules (Once in a While)" title="Direct link to 5. Break the Rules (Once in a While)">​</a></h2>
<p>Typography comes with best practices, but sometimes the most memorable designs emerge when those rules are intentionally bent. Experimenting with oversized fonts, unconventional layouts, or bold contrasts can inject personality and emotion into a design, making it stand out. This approach works especially well in branding, editorial design, and creative campaigns where uniqueness matters.</p>
<p>A great example is <strong>Spotify Wrapped</strong>, which uses a mix of loud, distorted typography, unexpected angles, and vibrant colors to create an energetic and playful visual language. Despite breaking traditional readability rules, it resonates with users because it aligns with the fun, dynamic nature of the content. The key is to break conventions with purpose—pushing creative boundaries while still ensuring usability. When done right, experimental typography transforms a product from just functional to something users genuinely love interacting with.</p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Kafka Streaming for Live Currency Rates]]></title>
            <link>https://betalectic.com/pr-preview/pr-48/blog/kafka-streaming-for-live-currency-rates</link>
            <guid>https://betalectic.com/pr-preview/pr-48/blog/kafka-streaming-for-live-currency-rates</guid>
            <pubDate>Sat, 15 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Problem Statement]]></description>
            <content:encoded><![CDATA[<div class="flex gap-4"><div class="blog-content-wrapper my-8 max-w-full"><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="problem-statement">Problem Statement<a href="https://betalectic.com/pr-preview/pr-48/blog/kafka-streaming-for-live-currency-rates#problem-statement" class="hash-link" aria-label="Direct link to Problem Statement" title="Direct link to Problem Statement">​</a></h2>
<p>In the fintech world, live currency rate streaming is a critical feature that ensures users receive real-time updates on exchange rates. Our challenge was to build a <strong>continuous live rate streaming system</strong> for Real-Time Currency Exchange Rates that updates <strong>every second</strong>  for multiple currency pairs and serves <strong>multiple users concurrently</strong>. Traditional database-driven approaches struggled with performance bottlenecks, latency, and scalability issues, prompting us to explore a more robust solution.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="why-not-a-normal-postgresql-database">Why Not a Normal PostgreSQL Database?<a href="https://betalectic.com/pr-preview/pr-48/blog/kafka-streaming-for-live-currency-rates#why-not-a-normal-postgresql-database" class="hash-link" aria-label="Direct link to Why Not a Normal PostgreSQL Database?" title="Direct link to Why Not a Normal PostgreSQL Database?">​</a></h2>
<p>While PostgreSQL is a powerful relational database, it was not well-suited for real-time, high-frequency data streaming due to the following reasons:</p>
<ol>
<li><strong>High Write and Read Latency:</strong> Storing every second’s rate updates would lead to frequent write operations, causing significant latency when querying real-time data.</li>
<li><strong>Scalability Issues:</strong> A large number of concurrent users fetching live rates would overload the database, leading to slow response times.</li>
<li><strong>Polling Inefficiency:</strong> Fetching the latest rates via polling would increase database load and lead to unnecessary resource consumption.</li>
<li><strong>Event-Driven Processing Challenges:</strong> A traditional database does not natively support event-driven architectures, making real-time processing complex.</li>
</ol>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="why-we-used-kafka">Why We Used Kafka?<a href="https://betalectic.com/pr-preview/pr-48/blog/kafka-streaming-for-live-currency-rates#why-we-used-kafka" class="hash-link" aria-label="Direct link to Why We Used Kafka?" title="Direct link to Why We Used Kafka?">​</a></h2>
<p>To address these challenges, we chose <strong>Apache Kafka</strong> as the backbone of our live rate streaming system. Here’s why:</p>
<ol>
<li><strong>Real-Time Data Streaming:</strong> Kafka’s publish-subscribe model allows us to <strong>continuously push live rates</strong> without querying a database.</li>
<li><strong>High Throughput and Low Latency:</strong> Kafka can handle millions of messages per second with minimal latency, ensuring seamless rate updates.</li>
<li><strong>Scalability:</strong> It supports partitioning, allowing horizontal scaling as the number of users grows.</li>
<li><strong>Fault Tolerance:</strong> Kafka’s distributed architecture ensures data durability and prevents single points of failure.</li>
<li><strong>Decoupling Producers and Consumers:</strong> Currency rate providers (producers) can push data independently of users (consumers), reducing bottlenecks.</li>
<li><strong>Efficient Data Processing:</strong> Kafka integrates well with stream processing frameworks like Apache Flink or Kafka Streams to process and analyze data in real time.</li>
</ol>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="implementation-overview">Implementation Overview<a href="https://betalectic.com/pr-preview/pr-48/blog/kafka-streaming-for-live-currency-rates#implementation-overview" class="hash-link" aria-label="Direct link to Implementation Overview" title="Direct link to Implementation Overview">​</a></h2>
<ol>
<li><strong>Data Source Integration:</strong> We fetch live currency rates from multiple financial market APIs.</li>
<li><strong>Kafka Producer:</strong> A producer service ingests real-time currency rates into <strong>Kafka topics</strong>.</li>
<li><strong>Kafka Topics &amp; Partitioning:</strong> All currency pair details are received from a single subscribed topic, rather than separate topics for each pair, ensuring centralized data access.</li>
<li><strong>Kafka Consumer:</strong> User applications subscribe to relevant topics to receive <strong>instant rate updates</strong>.</li>
<li><strong>WebSockets for UI Updates:</strong> A WebSocket layer pushes live rate updates to the front end, ensuring a smooth real-time experience.</li>
<li><strong>Monitoring &amp; Alerts:</strong> Kafka’s built-in metrics and third-party tools (Prometheus, Grafana) monitor system performance.</li>
</ol>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="additional-considerations">Additional Considerations<a href="https://betalectic.com/pr-preview/pr-48/blog/kafka-streaming-for-live-currency-rates#additional-considerations" class="hash-link" aria-label="Direct link to Additional Considerations" title="Direct link to Additional Considerations">​</a></h2>
<ul>
<li><strong>Message Retention:</strong> We configured a short retention period since users only need the latest rate.</li>
<li><strong>Backpressure Handling:</strong> Implemented a rate limiter to prevent overwhelming consumers.</li>
<li><strong>Security &amp; Authentication:</strong> Used Kafka ACLs and SSL encryption to secure data transmission.</li>
</ul>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="conclusion">Conclusion<a href="https://betalectic.com/pr-preview/pr-48/blog/kafka-streaming-for-live-currency-rates#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>Using Kafka for real-time currency rate streaming enabled us to build a scalable, low-latency, and fault-tolerant system that efficiently handles high-frequency updates for multiple users. This approach significantly outperformed traditional database-driven methods, making Kafka the perfect choice for our use case.</p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Building Asset Monitoring Systems for Lending Apps | Secured Lending Solutions]]></title>
            <link>https://betalectic.com/pr-preview/pr-48/blog/asset-monitoring-system-lending-apps</link>
            <guid>https://betalectic.com/pr-preview/pr-48/blog/asset-monitoring-system-lending-apps</guid>
            <pubDate>Mon, 17 Feb 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Learn how to build a robust asset monitoring system for secured lending apps. Explore challenges, solutions, and best practices for managing loans against pledged assets like stocks, mutual funds, and gold.]]></description>
            <content:encoded><![CDATA[<div class="flex gap-4"><div class="blog-content-wrapper my-8 max-w-full"><p>Lending technology has been making headlines for some time now. We have seen an influx of new players in the market offering innovative credit solutions, enabling users to spend cash on credit or purchase goods using Buy Now, Pay Later (BNPL) services. Adopting such financial products is widespread across various platforms—whether booking a flight through MakeMyTrip or purchasing goods on Amazon using Amazon Pay. With increasing demand and continuous innovation, the credit ecosystem is expanding rapidly, opening new opportunities in digital lending.</p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="secured-lending-apps-lending-against-collateral"><strong>Secured Lending Apps: Lending Against Collateral</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/asset-monitoring-system-lending-apps#secured-lending-apps-lending-against-collateral" class="hash-link" aria-label="Direct link to secured-lending-apps-lending-against-collateral" title="Direct link to secured-lending-apps-lending-against-collateral">​</a></h2>
<p>A new and promising avenue in the lending landscape is the rise of <strong>secured lending platforms</strong> that offer loans against pledged assets. Unlike traditional unsecured lending, where credit is extended based on income and creditworthiness, these platforms allow users to leverage financial assets such as <strong>stocks, mutual funds, or gold</strong> to secure loans. This approach ensures <strong>lower risk for lenders</strong> while offering borrowers <strong>lower interest rates</strong> compared to unsecured loans.</p>
<hr>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="how-secured-lending-works"><strong>How Secured Lending Works</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/asset-monitoring-system-lending-apps#how-secured-lending-works" class="hash-link" aria-label="Direct link to how-secured-lending-works" title="Direct link to how-secured-lending-works">​</a></h3>
<ol>
<li><strong>Asset Pledging</strong>: The borrower pledges a portion of their financial assets (e.g., stocks, mutual funds, gold) as collateral.</li>
<li><strong>Loan to Value (LTV) Calculation</strong>: The lender determines the loan amount based on the value of the pledged asset. Typically, the LTV ratio ranges from <strong>50% to 70%</strong>.</li>
<li><strong>Loan Disbursal</strong>: Once the LTV is calculated, the loan amount is credited to the borrower's account.</li>
<li><strong>Asset Monitoring</strong>: Since pledged assets are market-dependent, their value fluctuates, necessitating <strong>continuous monitoring</strong>.</li>
<li><strong>Loan Repayment &amp; Asset Release</strong>: The borrower repays the loan, and upon successful repayment, the pledged asset is released back to the borrower.</li>
</ol>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="challenges-in-building-secured-lending-apps"><strong>Challenges in Building Secured Lending Apps</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/asset-monitoring-system-lending-apps#challenges-in-building-secured-lending-apps" class="hash-link" aria-label="Direct link to challenges-in-building-secured-lending-apps" title="Direct link to challenges-in-building-secured-lending-apps">​</a></h2>
<p>Building an application facilitating <strong>loans against securities (LAS)</strong> presents unique technical and financial challenges. The primary concerns revolve around <strong>market fluctuations, risk mitigation, and seamless integration</strong> with financial data providers.</p>
<hr>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="1-dynamic-nature-of-pledged-assets"><strong>1. Dynamic Nature of Pledged Assets</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/asset-monitoring-system-lending-apps#1-dynamic-nature-of-pledged-assets" class="hash-link" aria-label="Direct link to 1-dynamic-nature-of-pledged-assets" title="Direct link to 1-dynamic-nature-of-pledged-assets">​</a></h3>
<p>Unlike fixed assets, financial securities such as <strong>stocks and mutual funds</strong> are subject to <strong>market volatility</strong>. This fluctuating nature poses a risk to lenders. The lender could suffer financial losses if the asset’s value drops significantly below the LTV threshold.</p>
<hr>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="2-continuous-asset-monitoring-system"><strong>2. Continuous Asset Monitoring System</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/asset-monitoring-system-lending-apps#2-continuous-asset-monitoring-system" class="hash-link" aria-label="Direct link to 2-continuous-asset-monitoring-system" title="Direct link to 2-continuous-asset-monitoring-system">​</a></h3>
<p>To mitigate risks, we implemented a <strong>real-time monitoring system</strong> that tracks the value of pledged assets throughout the loan tenure. This system works as follows:</p>
<ul>
<li><strong>Data Collection</strong>: Asset prices are continuously fetched via <strong>market APIs</strong>.</li>
<li><strong>Threshold Alerts</strong>: The system compares current asset values with the pledged value at loan initiation.</li>
<li><strong>Risk Identification</strong>: The loan is flagged as at-risk if the LTV ratio crosses a predefined risk threshold.</li>
</ul>
<hr>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="3-automated-risk-alert-system"><strong>3. Automated Risk Alert System</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/asset-monitoring-system-lending-apps#3-automated-risk-alert-system" class="hash-link" aria-label="Direct link to 3-automated-risk-alert-system" title="Direct link to 3-automated-risk-alert-system">​</a></h3>
<p>Our <strong>alert mechanism</strong> ensures timely intervention in case of adverse market movements:</p>
<ul>
<li><strong>Danger Zone Detection</strong>: An alert is generated if the asset value declines beyond an acceptable limit.</li>
<li><strong>Customer Notification</strong>: The customer is informed about the shortfall, prompting them to repay a portion of the loan or pledge additional assets.</li>
<li><strong>Loan Management Actions</strong>: In case of prolonged devaluation, the lender can take appropriate action, such as liquidating part of the pledged asset to recover the outstanding loan.</li>
</ul>
<hr>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="4-third-party-data-integrations"><strong>4. Third-Party Data Integrations</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/asset-monitoring-system-lending-apps#4-third-party-data-integrations" class="hash-link" aria-label="Direct link to 4-third-party-data-integrations" title="Direct link to 4-third-party-data-integrations">​</a></h3>
<p>Integrating third-party services is a crucial yet complex aspect of building secured lending applications. Financial data providers such as <strong>CAMS/Karvy</strong> for market and user holdings data, <strong>Razorpay</strong> for payment gateway processing, and <strong>Digio</strong> for autopay setup ensure smooth operations.</p>
<p>However, these integrations come with challenges, including maintaining <strong>data integrity, ensuring immutability, and managing historical records</strong> for auditing. To uphold reliability and compliance, it is necessary to implement robust mechanisms that store multiple data versions, allowing for accurate tracking, error resolution, and regulatory adherence. A well-architected integration strategy is vital for seamless loan processing and risk management in secured lending platforms.</p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="conclusion"><strong>Conclusion</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/asset-monitoring-system-lending-apps#conclusion" class="hash-link" aria-label="Direct link to conclusion" title="Direct link to conclusion">​</a></h2>
<p>Secured lending platforms represent a significant advancement in the digital lending space, offering a more <strong>stable and risk-mitigated approach</strong> compared to unsecured loans. However, building a reliable and efficient secured lending system requires:</p>
<ul>
<li><strong>Robust asset monitoring</strong> to track market fluctuations.</li>
<li><strong>Real-time alerts</strong> for timely risk mitigation.</li>
<li><strong>Automated risk management</strong> to handle market volatility effectively.</li>
</ul>
<p>With more financial institutions adopting secured lending models, this sector is poised for <strong>significant growth</strong> in the coming years.</p>
<hr>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="ready-to-build-a-secured-lending-platform"><strong>Ready to Build a Secured Lending Platform?</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/asset-monitoring-system-lending-apps#ready-to-build-a-secured-lending-platform" class="hash-link" aria-label="Direct link to ready-to-build-a-secured-lending-platform" title="Direct link to ready-to-build-a-secured-lending-platform">​</a></h3>
<p>If you want to implement a <strong>robust asset monitoring system</strong> for your lending app, <strong>Betalectic</strong> can help. Our team specializes in building <strong>scalable, secure, and user-friendly lending solutions</strong> tailored to your needs.</p>
<p><strong><a href="https://betalectic.com/contact" target="_blank" rel="noopener noreferrer">Contact Us Today</a></strong> to get started!</p>
<hr></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[When to Use Cloudflare Workers | Serverless Computing Explained]]></title>
            <link>https://betalectic.com/pr-preview/pr-48/blog/cloudflare-workers-serverless-computing</link>
            <guid>https://betalectic.com/pr-preview/pr-48/blog/cloudflare-workers-serverless-computing</guid>
            <pubDate>Tue, 04 Feb 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[What is Serverless? Is There Really No Server?]]></description>
            <content:encoded><![CDATA[<div class="flex gap-4"><div class="blog-content-wrapper my-8 max-w-full"><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="what-is-serverless-is-there-really-no-server">What is Serverless? Is There Really No Server?<a href="https://betalectic.com/pr-preview/pr-48/blog/cloudflare-workers-serverless-computing#what-is-serverless-is-there-really-no-server" class="hash-link" aria-label="Direct link to What is Serverless? Is There Really No Server?" title="Direct link to What is Serverless? Is There Really No Server?">​</a></h2>
<p>Have you ever heard the term <strong>"serverless"</strong> and wondered what it means? Does it mean there’s no server at all? If there’s a server, why do we call it <strong>serverless</strong>? 🤔</p>
<p>Learn when and why to use Cloudflare Workers for serverless computing. Explore how it works, its benefits, and real-world use cases. Dive into the future of serverless architecture with Betalectic.</p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="what-does-serverless-actually-mean"><strong>What Does Serverless Actually Mean?</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/cloudflare-workers-serverless-computing#what-does-serverless-actually-mean" class="hash-link" aria-label="Direct link to what-does-serverless-actually-mean" title="Direct link to what-does-serverless-actually-mean">​</a></h2>
<p>Serverless doesn’t mean there are no servers—it just means you don’t have to worry about them. Cloud providers like Cloudflare Workers, AWS Lambda, and Google Cloud Functions take care of everything behind the scenes, including servers, scaling, and maintenance. That’s why it’s called "serverless"—you don’t have to deal with servers directly. You write and deploy your code, and the platform runs it whenever needed. Plus, you only pay for what you use instead of keeping a server running all the time, making it a flexible and cost-effective choice.</p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="how-does-serverless-work"><strong>How Does Serverless Work?</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/cloudflare-workers-serverless-computing#how-does-serverless-work" class="hash-link" aria-label="Direct link to how-does-serverless-work" title="Direct link to how-does-serverless-work">​</a></h2>
<p>When you deploy a serverless function, it doesn’t run all the time like a traditional server. Instead, it <strong>executes only when triggered</strong>—for example, when a user requests data from an API or visits a webpage. The cloud provider automatically starts the function, runs the code, and then shuts it down when it’s done.</p>
<p>This <strong>event-driven execution model</strong> makes serverless highly <strong>efficient, scalable, and cost-effective</strong>. Since the platform scales automatically, your application can handle a single or millions of requests without manual intervention.</p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cloudflare-workers"><strong>Cloudflare Workers</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/cloudflare-workers-serverless-computing#cloudflare-workers" class="hash-link" aria-label="Direct link to cloudflare-workers" title="Direct link to cloudflare-workers">​</a></h2>
<p>Imagine if your website could run fast no matter where your users are. That’s precisely what <strong>Cloudflare Workers</strong> do! They let you run code on Cloudflare’s massive network of <strong>300+ data centers worldwide</strong>, so instead of waiting for a request to travel across the internet to a faraway server; it gets processed <strong>closer to the user</strong>—making everything load <strong>much faster</strong>.</p>
<hr>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="how-cloudflare-workers-work"><strong>How Cloudflare Workers Work</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/cloudflare-workers-serverless-computing#how-cloudflare-workers-work" class="hash-link" aria-label="Direct link to how-cloudflare-workers-work" title="Direct link to how-cloudflare-workers-work">​</a></h3>
<p>Think of Cloudflare Workers as tiny, on-demand programs that run whenever someone visits your site or uses your API. Here’s what happens step by step:</p>
<ol>
<li>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="a-user-makes-a-request">A User Makes a Request<a href="https://betalectic.com/pr-preview/pr-48/blog/cloudflare-workers-serverless-computing#a-user-makes-a-request" class="hash-link" aria-label="Direct link to A User Makes a Request" title="Direct link to A User Makes a Request">​</a></h3>
</li>
</ol>
<p>When someone visits your site or calls your API, instead of going to a traditional server, the request is sent to the <strong>nearest Cloudflare data center</strong>. This saves time by reducing how far the data has to travel.</p>
<ol start="2">
<li>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="the-worker-runs-instantly">The Worker Runs Instantly<a href="https://betalectic.com/pr-preview/pr-48/blog/cloudflare-workers-serverless-computing#the-worker-runs-instantly" class="hash-link" aria-label="Direct link to The Worker Runs Instantly" title="Direct link to The Worker Runs Instantly">​</a></h3>
</li>
</ol>
<p>Once the request reaches Cloudflare, the Worker <strong>executes your code on demand</strong>. It runs in a super lightweight and isolated environment (powered by the same V8 engine as Chrome and Node.js).</p>
<ol start="3">
<li>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="a-response-is-sent-back--fast">A Response is Sent Back – Fast!<a href="https://betalectic.com/pr-preview/pr-48/blog/cloudflare-workers-serverless-computing#a-response-is-sent-back--fast" class="hash-link" aria-label="Direct link to A Response is Sent Back – Fast!" title="Direct link to A Response is Sent Back – Fast!">​</a></h3>
</li>
</ol>
<p>The Worker can do all sorts of things—fetch data, modify responses, check authentication, cache content, and more. Once done, the response <strong>returns to the user from the closest edge server</strong>, making everything feel snappy.</p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="why-use-cloudflare-workers"><strong>Why Use Cloudflare Workers?</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/cloudflare-workers-serverless-computing#why-use-cloudflare-workers" class="hash-link" aria-label="Direct link to why-use-cloudflare-workers" title="Direct link to why-use-cloudflare-workers">​</a></h2>
<p>Here’s what makes Workers awesome:</p>
<p>✅ <strong>No Servers to Manage</strong> – Write your code, deploy it, and Cloudflare handles everything. You won't need to worry about setting up or maintaining servers.</p>
<p>✅ <strong>Scales Instantly</strong> – Whether you get <strong>1 request or 1 million</strong>, Cloudflare Workers scale automatically, ensuring smooth performance.</p>
<p>✅ <strong>Runs Everywhere</strong> – Unlike traditional cloud servers locked to a specific region, Workers <strong>run globally</strong> on Cloudflare’s network.</p>
<p>✅ <strong>Only Pay for What You Use</strong> – Workers run only when needed, so you don’t have to pay for idle servers.</p>
<p>✅ <strong>Secure by Design</strong> – Workers run in a <strong>sandboxed</strong> environment, protecting your app from security threats.</p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="what-can-you-build-with-cloudflare-workers"><strong>What Can You Build with Cloudflare Workers?</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/cloudflare-workers-serverless-computing#what-can-you-build-with-cloudflare-workers" class="hash-link" aria-label="Direct link to what-can-you-build-with-cloudflare-workers" title="Direct link to what-can-you-build-with-cloudflare-workers">​</a></h2>
<p>🔹 <strong>API Gateway</strong> – Manage API requests and modify responses without a backend.</p>
<p>🔹 <strong>Authentication &amp; Security</strong> – Validate JWT tokens, block bad traffic, and add security headers.</p>
<p>🔹 <strong>Edge Caching</strong> – Store API responses and static content at the edge to speed things up.</p>
<p>🔹 <strong>Dynamic Content Rewriting</strong> – Modify requests before they reach your server.</p>
<p>🔹 <strong>Serverless Applications</strong> – Build URL shorteners, real-time webhooks, and microservices.</p>
<hr>
<p>Cloudflare Workers make it <strong>super easy</strong> to build <strong>fast, secure, and scalable</strong> applications <strong>without managing infrastructure</strong>. Since they run on the edge, your code executes closer to users, reducing delays and improving performance.</p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="when-should-you-use-cloudflare-workers"><strong>When Should You Use Cloudflare Workers?</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/cloudflare-workers-serverless-computing#when-should-you-use-cloudflare-workers" class="hash-link" aria-label="Direct link to when-should-you-use-cloudflare-workers" title="Direct link to when-should-you-use-cloudflare-workers">​</a></h2>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="1-low-latency-applications"><strong>1. Low-Latency Applications</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/cloudflare-workers-serverless-computing#1-low-latency-applications" class="hash-link" aria-label="Direct link to 1-low-latency-applications" title="Direct link to 1-low-latency-applications">​</a></h3>
<p>If your application requires <strong>real-time responses</strong> (e.g., gaming, live chat, or financial transactions), Cloudflare Workers can reduce latency by processing requests closer to the user.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="2-global-applications"><strong>2. Global Applications</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/cloudflare-workers-serverless-computing#2-global-applications" class="hash-link" aria-label="Direct link to 2-global-applications" title="Direct link to 2-global-applications">​</a></h3>
<p>For applications with a <strong>global user base</strong>, Workers ensure consistent performance by running code in the data center closest to the user.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="3-high-traffic-applications"><strong>3. High-Traffic Applications</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/cloudflare-workers-serverless-computing#3-high-traffic-applications" class="hash-link" aria-label="Direct link to 3-high-traffic-applications" title="Direct link to 3-high-traffic-applications">​</a></h3>
<p>If your application experiences <strong>spikes in traffic</strong> (e.g., during product launches or events), Workers scale automatically to handle the load without downtime.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="4-cost-effective-solutions"><strong>4. Cost-Effective Solutions</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/cloudflare-workers-serverless-computing#4-cost-effective-solutions" class="hash-link" aria-label="Direct link to 4-cost-effective-solutions" title="Direct link to 4-cost-effective-solutions">​</a></h3>
<p>If you want to <strong>reduce infrastructure costs</strong>, Workers allow you to pay only for the compute time you use, eliminating the need for idle servers.</p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="conclusion"><strong>Conclusion</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/cloudflare-workers-serverless-computing#conclusion" class="hash-link" aria-label="Direct link to conclusion" title="Direct link to conclusion">​</a></h2>
<p>Cloudflare Workers are a <strong>game-changer</strong> for modern web development. By leveraging serverless computing at the edge, you can build <strong>fast, secure, and scalable</strong> applications without worrying about infrastructure. Whether building an API gateway, optimizing content delivery, or creating serverless microservices, Cloudflare Workers provide the tools you need to succeed.</p>
<p>If you’re ready to explore the power of serverless computing, start with **<a href="https://workers.cloudflare.com/playground#LYVwNgLglgDghgJwgegGYHsHALQBM4RwDcABAEbogB2+CAngLzbPYDqApmQNJQQBimYACFKNRHQBqADVwBNAI50oABjIBlAJLKAorKggAXCxYduvAVhHVakmQqWrNOvSACwAKADC6KhHa-sABEoAGcYdBDeKB8DEgwsPAJiEio4YHYGACJ8QgA6ACsQzNJUKDB-NIzspIKij29ffwhsABU6GHZYuBgYMCgAYwJoqmR8uAA3OBD+hFgIAGpgdFxwdg8PdgAPcKQSXHZUOHAIEgBvdwBIVPTYzO1NtN72EgBBAAUNTIAaS8IAcxCsQA2pkto9yt8SJlulBIZkEOwwj4QuxMgBdH4AXyI7g8xmYph4-EEVjE9GkckUKnUWl0+nqPj8AWCSMi0BicUEiUIpGuVSgNC2tWKcTKFXSWQF+02woZjQCbQ6XR6fUG7JGY0m01mMAWSxW5XW7igwB2JwA7uwwP10Ok4ghbVDLdbbexcgALCDAMDFdzuZAAKgD7hIAZIAAEIO12PtUGcAPJkfLsfoQTEkbRUcYhgPIP1bM17A5HSBnS6B4MXUMR+AINJnABK7HkIERaZICJbbcu1fDtfrp0z43T-mzVbDfcQA-uKZA6oafk27dTmx7E4REBACCoITObwdwFC7AAPE2kTv2AA+TFrvMXKZ0Kj9OLsCD9d0ACk7rZCEC+JFHf8VwASjLC4LhtHcTi3MASAYFJ2HNEgAFUGwAGS-ZsfwgXIYOAnFwMgkJ0HKXIwHQP4PwAAwACStciSAAElOVJxigP4CEwXCUQQF4-iadMCBIeAIHdJjThg3IRPdPlMQAQio-C-XAqA4w-STpL5OCGHgzJkBhTJQPOcCLmQZASFkSgSBtcBcBIOAwGI6yHNguASFEqAEDs2so1eD4SHddgEUuQjkROHI3PguBzTgXgSBNM0P0yXJkAi4UlJMjctyoEgz3CC9ah8D8Ioyi4b3ArLtwQpC8uRdgP2dG10n-YzwMCuB9gQQEwJMzJIKZZoow6TJbkXFBPW9b4QrKn5wMxDLMSxHE8XxQlzBJUQbApexqScOk3C8RkmiCUJwjZYZYniHAIt5Soska10PS9H0SjFPl7qtJq3Qmn05QG1po1iMbkF6WKqCNY85MCeNPBaWQ3m0ALnsvdxjx+kgwDgKg-iyfxMhRi40fYDqCcJ9JCGs91EBRCAsmQlo+GwAAOTISGQUnj3JtzPQgGBsCwqBxiyKRsGQl5sG8U0hjICFrKO3wsg0bQGBjfjWfZkLOdfNz3syNjELNVn+qae6oFwUSGH2Nj+nYbBzTN0T-wFKIHOwaYHIyABGXJlHVjnoAgcpL08ciQFwVBMYREhWEwABrILdzeTG6D+B1rGPZAA6DzW+ioWPpoRMAsl-OhyhCQLX0yab3QRVAsh5mBATM0GU7TmhcitmAHVwXJ+lD8PI7dK3kAe9I3ajUj+hCIoQo1wnkHa3AUcuY8KFwOgOdwQXrMx6esgjxBEXx6bjxNP4SBCBB+nriBeabkHk9TzaO-YcYu+WXv+4PhEX-GNBB5CFJbGftNapUFhzYAYNSaEy3uMHeUwQj3TjgnbA5E-joHxhnWB0DjwwGgRcDgLp0hyRQiidy7pQgkCTnAVum13LoHcm2PYsxxjPDcjHBA8cEBAQRAQNhRYlj0Omhccuh8SA+Fzuwf8WM7LmkCjlXh68iy9HQHQPYnkUyBzURABholniq2eGQNRNNoDYxICAGA9lhEh0oAPMRcB+g2V8LkE+IMcHuk9peVgVMTiUPYcghAAB+DOHicF4OES8EgNiw7f2eBwrh8VdwACkJhwDUDMOYct9gkDoFZc0sw-DkKElTGgZccmUAQCQS0ZBhFsnYAAcl3DRFoLQ3juTrKgUoz4t4IlTGANRAoolf0Ho0gCuB+IY3QGqYYu5EB0L0cI80mAwC4GkWAci9szG5JAPQyZapng2myX3CIzwdHlK3ABGg5ieK7kGZgTqQiTIXAROeOyZy9HABIEsKOLYBix36a48JJk0aeJaPQeKJxtldStKgEJniT5ApMvGHKUKMYHF8bMi+4I4kBKKRijs1AqACnPj4chlC6m5AslZQYVBhExjinFPorD7JXJRKcwKHZETHF3IFH+GYt4nD0cJAgYk4AUGZWc-SMAoCPJMmygK6AkJCrBKaco0dcUlNwGUrenSgpNA7JQPwgCqU7JpfZRyDD6UQGEUKw5pyGHyrkQQUZZ1IgyzYVcsgswtkVIQkueK+w3JnL6KgN0gKObIEgQKAmGc14b1RgvZGuJ3D4jYJwIkFhhCbXENtKkjhaQuD+sdFkZ0ogciutyZIusuYRRFKUousZboDIJkItCpAb2RVAMIYPhRjEXBsm04fVbQiSgGQMovA6AAH0ciogMJkAATMoBdAAWbAygADM66ADs3xh1S2gOOvoUYp0HwBCNEEVBljsEKFOpqIl0RfEyFGqgU79SrBGpkKUQpCiZExCtYwa1iSWGzeSOweaaTOH0MwDwQA" target="_blank" rel="noopener noreferrer">Cloudflare’s Workers Playground</a> or deploy your first Worker in minutes!</p>
<hr>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="ready-to-build-with-cloudflare-workers"><strong>Ready to Build with Cloudflare Workers?</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/cloudflare-workers-serverless-computing#ready-to-build-with-cloudflare-workers" class="hash-link" aria-label="Direct link to ready-to-build-with-cloudflare-workers" title="Direct link to ready-to-build-with-cloudflare-workers">​</a></h3>
<p>If you want to implement a high-performance, serverless solution with Cloudflare Workers, <strong>Betalectic</strong> can help. Our team specializes in building scalable, secure, user-friendly applications tailored to your needs.</p>
<p><strong><a href="https://betalectic.com/contact" target="_blank" rel="noopener noreferrer">Contact Us Today</a></strong> to get started!</p>
<hr></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Real-Time Bidding and Auctions: A Guide to Building a High-Performance Platform]]></title>
            <link>https://betalectic.com/pr-preview/pr-48/blog/bidding-and-auctions</link>
            <guid>https://betalectic.com/pr-preview/pr-48/blog/bidding-and-auctions</guid>
            <pubDate>Mon, 09 Dec 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[In the modern digital landscape, auctions have gone beyond the traditional auction houses and taken center stage online. Whether you're building an e-commerce platform, a ticket resale marketplace, or a fundraising site,  real-time bidding keeps your users engaged and ensures fair competition. This guide will walk you through designing and implementing a high-performance real-time auction system using AWS services—specifically Amazon SQS FIFO queues, AWS Lambda, and Pusher.]]></description>
            <content:encoded><![CDATA[<div class="flex gap-4"><div class="blog-content-wrapper my-8 max-w-full"><p>In the modern digital landscape, auctions have gone beyond the traditional auction houses and taken center stage online. Whether you're building an e-commerce platform, a ticket resale marketplace, or a fundraising site,  real-time bidding keeps your users engaged and ensures fair competition. This guide will walk you through designing and implementing a high-performance real-time auction system using AWS services—specifically Amazon SQS FIFO queues, AWS Lambda, and Pusher.</p>
<ol>
<li>
<p><a href="https://betalectic.com/pr-preview/pr-48/blog/bidding-and-auctions#1-introduction-to-real-time-bidding-and-auctions"> Introduction to Real-Time Bidding and Auctions</a></p>
</li>
<li>
<p><a href="https://betalectic.com/pr-preview/pr-48/blog/bidding-and-auctions#2-core-architecture-overview"> Core Architecture Overview</a></p>
</li>
<li>
<p><a href="https://betalectic.com/pr-preview/pr-48/blog/bidding-and-auctions#3-why-amazon-sqs-fifo-queues"> Why Amazon SQS FIFO Queues?</a></p>
</li>
<li>
<p><a href="https://betalectic.com/pr-preview/pr-48/blog/bidding-and-auctions#4-processing-bids-with-aws-lambda"> Processing Bids with AWS Lambda</a></p>
</li>
<li>
<p><a href="https://betalectic.com/pr-preview/pr-48/blog/bidding-and-auctions#5-ensuring-real-time-updates-with-pusher"> Ensuring Real-Time Updates with Pusher</a></p>
</li>
<li>
<p><a href="https://betalectic.com/pr-preview/pr-48/blog/bidding-and-auctions#6-handling-multiple-auctions-concurrently"> Handling Multiple Auctions Concurrently</a></p>
</li>
<li>
<p><a href="https://betalectic.com/pr-preview/pr-48/blog/bidding-and-auctions#7-best-practices-and-tips"> Best Practices and Tips</a></p>
</li>
<li>
<p><a href="https://betalectic.com/pr-preview/pr-48/blog/bidding-and-auctions#8-conclusion"> Conclusion</a></p>
</li>
</ol>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="1-introduction-to-real-time-bidding-and-auctions">1. Introduction to Real-Time Bidding and Auctions<a href="https://betalectic.com/pr-preview/pr-48/blog/bidding-and-auctions#1-introduction-to-real-time-bidding-and-auctions" class="hash-link" aria-label="Direct link to 1. Introduction to Real-Time Bidding and Auctions" title="Direct link to 1. Introduction to Real-Time Bidding and Auctions">​</a></h2>
<p><strong>What is real-time bidding (RTB)?</strong></p>
<p>Real-time bidding refers to the process of making live offers or bids in a fraction of a second while an auction is ongoing. In an online auction environment, multiple bidders simultaneously submit their bids on an item (or multiple items) within a specified timeframe. The goal is to capture each bid accurately, determine the highest valid offer, and then display the latest leading bid to all participants in real time.</p>
<p><strong>Key challenges:</strong></p>
<ul>
<li><strong>Concurrency</strong>: Multiple bidders submitting offers at the same time.</li>
<li><strong>Ordering</strong>: Ensuring that each bid is processed in the correct sequence.</li>
<li><strong>Scalability</strong>: Handling multiple concurrent auctions without performance degradation.</li>
<li><strong>Real-time updates</strong>: Notifying all bidders of the latest bid status as soon as possible.</li>
</ul>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="2-core-architecture-overview">2. Core Architecture Overview<a href="https://betalectic.com/pr-preview/pr-48/blog/bidding-and-auctions#2-core-architecture-overview" class="hash-link" aria-label="Direct link to 2. Core Architecture Overview" title="Direct link to 2. Core Architecture Overview">​</a></h2>
<p>A robust real-time auction platform typically involves the following components:</p>
<ol>
<li><strong>Front-End</strong>: Displays the auction interface, shows real-time bid updates, and captures user bids.</li>
<li><strong>Queue</strong>: Ensures reliable, ordered message handling for incoming bids.</li>
<li><strong>Processing Layer</strong>: A serverless or microservices layer that processes each bid and updates the system state.</li>
<li><strong>Real-Time Notification Service</strong>: Broadcasts live updates to all participants.</li>
<li><strong>Database</strong>: Stores bid history, user data, and auction details.</li>
</ol>
<p>Below is a high-level architecture:</p>
<!-- -->
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="3-why-amazon-sqs-fifo-queues">3. Why Amazon SQS FIFO Queues?<a href="https://betalectic.com/pr-preview/pr-48/blog/bidding-and-auctions#3-why-amazon-sqs-fifo-queues" class="hash-link" aria-label="Direct link to 3. Why Amazon SQS FIFO Queues?" title="Direct link to 3. Why Amazon SQS FIFO Queues?">​</a></h2>
<p><strong>Amazon SQS (Simple Queue Service)</strong> is a fully managed message queuing service from AWS. The FIFO (First-In-First-Out) variant guarantees that messages (bids) are processed in the exact order they are received and that each message is processed exactly once. This is critical in an auction environment where the timing and sequence of bids can determine the winner.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="key-benefits-of-sqs-fifo">Key Benefits of SQS FIFO:<a href="https://betalectic.com/pr-preview/pr-48/blog/bidding-and-auctions#key-benefits-of-sqs-fifo" class="hash-link" aria-label="Direct link to Key Benefits of SQS FIFO:" title="Direct link to Key Benefits of SQS FIFO:">​</a></h3>
<ul>
<li><strong>Ordering Guarantee</strong>: Ensures the first bid is processed first, preventing race conditions.</li>
<li><strong>Exactly-Once Processing</strong>: Avoids the dreaded "double-processing" of a single bid.</li>
<li><strong>High Throughput</strong>: Scales to handle thousands of messages per second.</li>
<li><strong>Easy Integration</strong>: Works seamlessly with AWS Lambda.</li>
</ul>
<p>For more details on the intricacies of FIFO queues, you can read <a href="https://aws.amazon.com/blogs/compute/solving-complex-ordering-challenges-with-amazon-sqs-fifo-queues/" target="_blank" rel="noopener noreferrer">Solving Complex Ordering Challenges with Amazon SQS FIFO Queues</a>.</p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="4-processing-bids-with-aws-lambda">4. Processing Bids with AWS Lambda<a href="https://betalectic.com/pr-preview/pr-48/blog/bidding-and-auctions#4-processing-bids-with-aws-lambda" class="hash-link" aria-label="Direct link to 4. Processing Bids with AWS Lambda" title="Direct link to 4. Processing Bids with AWS Lambda">​</a></h2>
<p><strong>AWS Lambda</strong> is a serverless computing service that lets you run code without managing servers. In a real-time auction scenario, each new bid triggers a Lambda function. The function then:</p>
<ol>
<li><strong>Validates the bid</strong>: Checks if the bid is higher than the current highest bid, whether the auction is still open, etc.</li>
<li><strong>Updates the auction state</strong>: Stores or updates relevant information in the database (e.g., new highest bid, bidder ID, timestamp).</li>
<li><strong>Notifies the front-end</strong>: Publishes a message to Pusher (or another real-time messaging service) so all participants see the new highest bid.</li>
</ol>
<p>In your Lambda code, you might have a structure like this:</p>
<ul>
<li><strong>index.js</strong>: Entry point for the Lambda, orchestrating the workflow.</li>
<li><strong>processBids.js</strong>: Contains the core business logic to validate and process bids.</li>
<li><strong>Other utility files</strong>: Handle different scenarios, such as auctions with extended bidding periods, concurrency checks, etc.</li>
</ul>
<p>This modular approach keeps the code maintainable and easy to extend.</p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="5-ensuring-real-time-updates-with-pusher">5. Ensuring Real-Time Updates with Pusher<a href="https://betalectic.com/pr-preview/pr-48/blog/bidding-and-auctions#5-ensuring-real-time-updates-with-pusher" class="hash-link" aria-label="Direct link to 5. Ensuring Real-Time Updates with Pusher" title="Direct link to 5. Ensuring Real-Time Updates with Pusher">​</a></h2>
<p>Once a valid bid is processed, it's crucial to immediately broadcast the updated information to all active participants. <strong>Pusher</strong> is a popular real-time messaging service that makes this possible with minimal overhead. By integrating Pusher into your Lambda function:</p>
<ol>
<li><strong>Push New Bid Events</strong>: Each time Lambda validates a new highest bid, it sends a push notification to a Pusher channel dedicated to that auction.</li>
<li><strong>Front-End Listeners</strong>: The browser (or mobile app) listens for these channel events. Upon receiving a new bid event, the interface updates automatically, showing the latest highest bid and the bidder's details (or masked identifier).</li>
</ol>
<p>This mechanism provides a <strong>seamless</strong> real-time experience for users, similar to a live auction house setting.</p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="6-handling-multiple-auctions-concurrently">6. Handling Multiple Auctions Concurrently<a href="https://betalectic.com/pr-preview/pr-48/blog/bidding-and-auctions#6-handling-multiple-auctions-concurrently" class="hash-link" aria-label="Direct link to 6. Handling Multiple Auctions Concurrently" title="Direct link to 6. Handling Multiple Auctions Concurrently">​</a></h2>
<p>When you have multiple auctions running at once, concurrency can skyrocket. Here's how you can manage it:</p>
<ol>
<li><strong>Unique Identifiers</strong>: In SQS FIFO, each auction has a unique queue group ID or message group ID to ensure that bids for different auctions don't mix.</li>
<li><strong>Scalable Architecture</strong>: AWS Lambda automatically scales to handle as many concurrent invocations as needed, provided your concurrency limits are set appropriately.</li>
<li><strong>Separate Pusher Channels</strong>: Each auction should have its own Pusher channel. This way, messages (bid updates) only go to participants in that specific auction.</li>
</ol>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="7-best-practices-and-tips">7. Best Practices and Tips<a href="https://betalectic.com/pr-preview/pr-48/blog/bidding-and-auctions#7-best-practices-and-tips" class="hash-link" aria-label="Direct link to 7. Best Practices and Tips" title="Direct link to 7. Best Practices and Tips">​</a></h2>
<ol>
<li><strong>Use Timeouts Wisely</strong>: Ensure your Lambda function has an appropriate timeout setting. Your bid processing should be quick in most cases, but be mindful of edge cases like network latency.</li>
<li><strong>Implement Idempotency</strong>: If your system somehow reprocesses a message (very rare with FIFO queues, but still possible), ensure your logic can handle duplicates gracefully.</li>
<li><strong>Monitor and Alert</strong>: Set up CloudWatch metrics and alarms to track Lambda invocation errors, queue backlogs, or unusual spikes in bidding volume.</li>
<li><strong>Database Transactions</strong>: Use atomic database operations (like DynamoDB's conditional writes or relational transactions) to ensure data consistency when updating the highest bid.</li>
<li><strong>Security</strong>: Implement appropriate authentication and authorization, ensuring only authorized bidders can place bids and the data is transmitted securely (HTTPS/WSS).</li>
</ol>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="8-conclusion">8. Conclusion<a href="https://betalectic.com/pr-preview/pr-48/blog/bidding-and-auctions#8-conclusion" class="hash-link" aria-label="Direct link to 8. Conclusion" title="Direct link to 8. Conclusion">​</a></h2>
<p>Building a <strong>high-performance real-time bidding and auction platform</strong> requires careful attention to concurrency, ordering, and real-time communication. By leveraging <strong>Amazon SQS FIFO queues</strong> for message ordering, <strong>AWS Lambda</strong> for bid processing, and <strong>Pusher</strong> for live updates, you can create an architecture that scales automatically and provides a seamless experience for your users.</p>
<p>This combination of services allows you to handle multiple auctions concurrently with <strong>confidence</strong> in the accuracy of each bid. With minimal infrastructure management (thanks to serverless components), your development team can focus on enhancing user experience, implementing new features, and ensuring the platform continues to run smoothly.</p>
<p>If you're looking to dive deeper, make sure to check out AWS's official guide on <a href="https://aws.amazon.com/blogs/compute/solving-complex-ordering-challenges-with-amazon-sqs-fifo-queues/" target="_blank" rel="noopener noreferrer">Solving Complex Ordering Challenges with Amazon SQS FIFO Queues</a>. By following these best practices and leveraging the right AWS services, you can build an auction platform that is both <strong>powerful</strong> and <strong>reliable</strong>—ready for the demands of real-time bidding at any scale.</p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Building a Dynamic Table Component: Backend Configuration-Driven Approach]]></title>
            <link>https://betalectic.com/pr-preview/pr-48/blog/dynamic-table-component-backend-config</link>
            <guid>https://betalectic.com/pr-preview/pr-48/blog/dynamic-table-component-backend-config</guid>
            <pubDate>Thu, 28 Nov 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Introduction]]></description>
            <content:encoded><![CDATA[<div class="flex gap-4"><div class="blog-content-wrapper my-8 max-w-full"><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="introduction"><strong>Introduction</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/dynamic-table-component-backend-config#introduction" class="hash-link" aria-label="Direct link to introduction" title="Direct link to introduction">​</a></h3>
<p>In this post, I'll walk you through the development of a dynamic and highly customizable table component. The key idea behind this table is its configuration-driven nature—where all the features, such as column visibility, order, resizing, and more, are controlled by configurations fetched from a backend API. This allows for unparalleled flexibility and adaptability in building complex, data-heavy UIs.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="why-a-configuration-driven-table"><strong>Why a Configuration-Driven Table?</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/dynamic-table-component-backend-config#why-a-configuration-driven-table" class="hash-link" aria-label="Direct link to why-a-configuration-driven-table" title="Direct link to why-a-configuration-driven-table">​</a></h3>
<p>Modern applications often need tables that can handle various data types, support user interactions, and fit into different use cases. While building such a table from scratch could be cumbersome, a configuration-driven approach allows:</p>
<ul>
<li><strong>Separation of concerns:</strong> Let the backend decide on the table's structure, columns, and behavior.</li>
<li><strong>Flexibility:</strong> Changing the table's configuration requires no code changes in the frontend, making it more scalable and adaptable.</li>
<li><strong>Feature-rich tables:</strong> Easily enable or disable powerful table features like sorting, resizing, and variant control by simply updating the configuration.</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="key-features-of-the-table-component"><strong>Key Features of the Table Component</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/dynamic-table-component-backend-config#key-features-of-the-table-component" class="hash-link" aria-label="Direct link to key-features-of-the-table-component" title="Direct link to key-features-of-the-table-component">​</a></h3>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="1-configuration-driven-setup"><strong>1. Configuration-Driven Setup</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/dynamic-table-component-backend-config#1-configuration-driven-setup" class="hash-link" aria-label="Direct link to 1-configuration-driven-setup" title="Direct link to 1-configuration-driven-setup">​</a></h4>
<p>The table component fetches its entire setup from an API. This includes which columns to display, their visibility, order, and custom configurations such as alignment or variant styling. Here's how the table structure is controlled:</p>
<ul>
<li><strong>Column Definitions:</strong> The API provides details about each column, including field name, label, and whether it's visible or hidden.</li>
<li><strong>Visibility Rules:</strong> Specific columns can be hidden based on roles, user preferences, or other business rules.</li>
<li><strong>Dynamic Order:</strong> The column order is not static, and the backend configuration can dictate how the columns should appear.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="2-out-of-the-box-features"><strong>2. Out-of-the-Box Features</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/dynamic-table-component-backend-config#2-out-of-the-box-features" class="hash-link" aria-label="Direct link to 2-out-of-the-box-features" title="Direct link to 2-out-of-the-box-features">​</a></h4>
<p>To enhance the user experience, this table component offers several built-in features:</p>
<ul>
<li><strong>Column Ordering:</strong> Users can reorder columns, and these settings can be synced with the backend, ensuring the changes persist across sessions.</li>
<li><strong>Column Visibility:</strong> Users can toggle which columns to show or hide based on their preferences or needs.</li>
<li><strong>Resizing:</strong> Column widths can be adjusted to improve readability and fit more content.</li>
<li><strong>Variants &amp; Table Sizing:</strong> The configuration also allows setting different table styles (compact, spacious, etc.) and variants (striped, bordered, etc.), giving the table a unique look-and-feel based on the context.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="3-backend-driven-flexibility"><strong>3. Backend-Driven Flexibility</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/dynamic-table-component-backend-config#3-backend-driven-flexibility" class="hash-link" aria-label="Direct link to 3-backend-driven-flexibility" title="Direct link to 3-backend-driven-flexibility">​</a></h4>
<p>One of the key aspects of this table is that most of its features are enabled or disabled by backend configurations. This allows for easy customization and quicker adaptations to business needs without touching frontend code. The API configuration includes:</p>
<ul>
<li><strong>Feature Toggles:</strong> Resizing, sorting, and even advanced features like pagination or infinite scroll can be toggled on/off via configuration.</li>
<li><strong>Responsive Design:</strong> Backend can dictate how the table should behave at different breakpoints, ensuring optimal user experience across devices.</li>
<li><strong>Theme &amp; Styling:</strong> Configurations can also control table styles, enabling easy changes between themes (dark/light) or modifying borders, row colors, and more.</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="how-it-works-a-closer-look-at-the-api-configuration"><strong>How It Works: A Closer Look at the API Configuration</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/dynamic-table-component-backend-config#how-it-works-a-closer-look-at-the-api-configuration" class="hash-link" aria-label="Direct link to how-it-works-a-closer-look-at-the-api-configuration" title="Direct link to how-it-works-a-closer-look-at-the-api-configuration">​</a></h3>
<p>The heart of this table component lies in the configuration fetched from the API. Here's an example of what a configuration response might look like:</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"resource"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"sample-data"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"identifierKey"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"data-value"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"selectionType"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"multiple"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"actions"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"header"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Actions"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"align"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"end"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"fixed"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"minWidth"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">200</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"options"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token property" style="color:#36acaa">"key"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"edit"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token property" style="color:#36acaa">"url"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"/edit/:id"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token property" style="color:#36acaa">"icon"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"SquarePen"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token property" style="color:#36acaa">"method"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"GET"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"columns"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"accessorKey"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"id"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"header"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Sr no."</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"width"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">80</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"maxWidth"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">80</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"minWidth"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">80</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"fixed"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"accessorKey"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"state"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"header"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"State"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"width"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"minWidth"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"show"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"filters"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"category"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"label"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Category"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"type"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"enum"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"isNullable"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"options"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token property" style="color:#36acaa">"label"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"One"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token property" style="color:#36acaa">"value"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"One"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token property" style="color:#36acaa">"label"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Two"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token property" style="color:#36acaa">"value"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Two"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"state"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"label"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"State"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"type"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"enum"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"isNullable"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"modelName"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"state"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"city"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"label"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"City"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"type"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"enum"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"isNullable"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"dependsOn"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"state"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"district"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"modelName"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"city"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"locality"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"label"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Locality"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"type"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"enum"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"isNullable"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"dependsOn"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"state"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"city"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"modelName"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"locality"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"availability"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"label"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Availability"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"type"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"boolean"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This configuration informs the table component of:</p>
<ul>
<li>What columns to display.</li>
<li>The initial order of columns.</li>
<li>Filters to be available to users and the type of value input to be rendered for that filter.</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="benefits-of-this-approach"><strong>Benefits of This Approach</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/dynamic-table-component-backend-config#benefits-of-this-approach" class="hash-link" aria-label="Direct link to benefits-of-this-approach" title="Direct link to benefits-of-this-approach">​</a></h3>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="1-easy-to-maintain-and-scale"><strong>1. Easy to Maintain and Scale</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/dynamic-table-component-backend-config#1-easy-to-maintain-and-scale" class="hash-link" aria-label="Direct link to 1-easy-to-maintain-and-scale" title="Direct link to 1-easy-to-maintain-and-scale">​</a></h4>
<p>No need to update the frontend codebase every time a column or feature needs to be added or removed—just update the backend configuration.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="2-improved-user-experience"><strong>2. Improved User Experience</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/dynamic-table-component-backend-config#2-improved-user-experience" class="hash-link" aria-label="Direct link to 2-improved-user-experience" title="Direct link to 2-improved-user-experience">​</a></h4>
<p>By giving users control over how they view and interact with the table, it caters to personalized experiences.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="3-faster-development-cycles"><strong>3. Faster Development Cycles</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/dynamic-table-component-backend-config#3-faster-development-cycles" class="hash-link" aria-label="Direct link to 3-faster-development-cycles" title="Direct link to 3-faster-development-cycles">​</a></h4>
<p>Decoupling the table's features from the code allows for faster iterations, as the backend can dictate new table features or adjustments.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="challenges--considerations"><strong>Challenges &amp; Considerations</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/dynamic-table-component-backend-config#challenges--considerations" class="hash-link" aria-label="Direct link to challenges--considerations" title="Direct link to challenges--considerations">​</a></h3>
<ul>
<li><strong>API Design</strong>: The backend needs to be designed carefully to ensure the configurations are granular enough for flexibility but not overly complex.</li>
<li><strong>Syncing State</strong>: Handling user preferences, such as column order or visibility, and syncing them with the backend can be challenging, especially in real-time scenarios.</li>
<li><strong>Performance</strong>: Fetching large configurations or dealing with very complex tables may introduce performance bottlenecks, which would require optimization.</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="conclusion"><strong>Conclusion</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/dynamic-table-component-backend-config#conclusion" class="hash-link" aria-label="Direct link to conclusion" title="Direct link to conclusion">​</a></h3>
<p>Building a configuration-driven table component has made managing data-rich interfaces easier, more flexible, and more powerful. By leveraging backend configurations, this approach decouples the frontend and backend, allowing for greater scalability, maintainability, and faster iteration times. Whether you're building dashboards, reports, or admin panels, this method ensures your tables are not just functional but also adaptive to changing business needs.</p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Building Scalable Mobile Apps for Financial Services: Key Features and Best Practices]]></title>
            <link>https://betalectic.com/pr-preview/pr-48/blog/scalable-mobile-apps-financial-services</link>
            <guid>https://betalectic.com/pr-preview/pr-48/blog/scalable-mobile-apps-financial-services</guid>
            <pubDate>Sat, 12 Oct 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[In today’s fast-paced digital world, mobile apps are revolutionizing financial services. With the rise of fintech and the widespread use of smartphones, consumers demand instant access to banking, investments, insurance, and payments. Financial institutions are now adopting mobile-first strategies to meet these expectations. But building scalable, secure, and user-friendly apps is no easy task. In this guide, we’ll explore the key features and best practices for creating scalable mobile apps for financial services.]]></description>
            <content:encoded><![CDATA[<div class="flex gap-4"><div class="blog-content-wrapper my-8 max-w-full"><p>In today’s fast-paced digital world, mobile apps are revolutionizing financial services. With the rise of fintech and the widespread use of smartphones, consumers demand instant access to banking, investments, insurance, and payments. Financial institutions are now adopting mobile-first strategies to meet these expectations. But building scalable, secure, and user-friendly apps is no easy task. In this guide, we’ll explore the key features and best practices for creating scalable mobile apps for financial services.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="why-scalability-is-crucial-for-financial-apps">Why Scalability is Crucial for Financial Apps<a href="https://betalectic.com/pr-preview/pr-48/blog/scalable-mobile-apps-financial-services#why-scalability-is-crucial-for-financial-apps" class="hash-link" aria-label="Direct link to Why Scalability is Crucial for Financial Apps" title="Direct link to Why Scalability is Crucial for Financial Apps">​</a></h2>
<p>Financial apps often face significant fluctuations in usage, particularly during market volatility, seasonal peaks, or promotional campaigns. Scalability ensures that an app can handle these surges in traffic and transactions without compromising on performance or user satisfaction. A scalable app not only provides a seamless experience during peak loads but also supports long-term growth as the user base expands.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="key-features-of-scalable-financial-apps">Key Features of Scalable Financial Apps<a href="https://betalectic.com/pr-preview/pr-48/blog/scalable-mobile-apps-financial-services#key-features-of-scalable-financial-apps" class="hash-link" aria-label="Direct link to Key Features of Scalable Financial Apps" title="Direct link to Key Features of Scalable Financial Apps">​</a></h2>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="1-robust-security-protecting-user-data">1. Robust Security: Protecting User Data<a href="https://betalectic.com/pr-preview/pr-48/blog/scalable-mobile-apps-financial-services#1-robust-security-protecting-user-data" class="hash-link" aria-label="Direct link to 1. Robust Security: Protecting User Data" title="Direct link to 1. Robust Security: Protecting User Data">​</a></h3>
<ul>
<li><strong>End-to-end encryption and secure data storage</strong>: Ensures sensitive data remains secure during transmission and storage.</li>
<li><strong>Multi-factor authentication (MFA)</strong>: Adds an extra layer of security by requiring multiple verification steps.</li>
<li><strong>Compliance with regulations</strong>: Adherence to standards like RBI, SEBI, IRDAI, and the Data Protection Bill.</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="2-user-friendly-interface-simplifying-financial-literacy">2. User-Friendly Interface: Simplifying Financial Literacy<a href="https://betalectic.com/pr-preview/pr-48/blog/scalable-mobile-apps-financial-services#2-user-friendly-interface-simplifying-financial-literacy" class="hash-link" aria-label="Direct link to 2. User-Friendly Interface: Simplifying Financial Literacy" title="Direct link to 2. User-Friendly Interface: Simplifying Financial Literacy">​</a></h3>
<ul>
<li><strong>Intuitive UI/UX</strong>: Makes complex financial processes easy to understand.</li>
<li><strong>Accessibility features</strong>: Includes screen readers, adjustable text sizes, and multi-language support.</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="3-real-time-data-processing-instant-updates-for-better-decisions">3. Real-Time Data Processing: Instant Updates for Better Decisions<a href="https://betalectic.com/pr-preview/pr-48/blog/scalable-mobile-apps-financial-services#3-real-time-data-processing-instant-updates-for-better-decisions" class="hash-link" aria-label="Direct link to 3. Real-Time Data Processing: Instant Updates for Better Decisions" title="Direct link to 3. Real-Time Data Processing: Instant Updates for Better Decisions">​</a></h3>
<ul>
<li><strong>Live market feeds</strong>: Provides up-to-the-minute updates on stock prices, currency rates, and more.</li>
<li><strong>Instant transaction updates</strong>: Ensures transparency and builds user trust.</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="4-customizable-dashboards-personalized-financial-insights">4. Customizable Dashboards: Personalized Financial Insights<a href="https://betalectic.com/pr-preview/pr-48/blog/scalable-mobile-apps-financial-services#4-customizable-dashboards-personalized-financial-insights" class="hash-link" aria-label="Direct link to 4. Customizable Dashboards: Personalized Financial Insights" title="Direct link to 4. Customizable Dashboards: Personalized Financial Insights">​</a></h3>
<ul>
<li><strong>Personalized insights</strong>: Tailored to users’ financial goals and preferences.</li>
<li><strong>Goal-tracking features</strong>: Helps users track progress toward specific financial objectives.</li>
</ul>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="best-practices-for-building-scalable-financial-apps">Best Practices for Building Scalable Financial Apps<a href="https://betalectic.com/pr-preview/pr-48/blog/scalable-mobile-apps-financial-services#best-practices-for-building-scalable-financial-apps" class="hash-link" aria-label="Direct link to Best Practices for Building Scalable Financial Apps" title="Direct link to Best Practices for Building Scalable Financial Apps">​</a></h2>
<ul>
<li><strong>Modular architecture</strong>: Ensures the app can scale as user demand grows.</li>
<li><strong>Cloud-based infrastructure</strong>: Provides flexibility and scalability.</li>
<li><strong>Regular performance testing</strong>: Identifies and resolves bottlenecks.</li>
</ul>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="trends-in-fintech-app-development">Trends in Fintech App Development<a href="https://betalectic.com/pr-preview/pr-48/blog/scalable-mobile-apps-financial-services#trends-in-fintech-app-development" class="hash-link" aria-label="Direct link to Trends in Fintech App Development" title="Direct link to Trends in Fintech App Development">​</a></h2>
<ul>
<li><strong>AI and machine learning</strong>: Enhances personalization and fraud detection.</li>
<li><strong>Blockchain technology</strong>: Improves security and transparency.</li>
<li><strong>Voice-enabled interfaces</strong>: Offers hands-free access to financial services.</li>
</ul>
<hr>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="partner-with-betalectic-today"><strong>Partner with Betalectic Today!</strong><a href="https://betalectic.com/pr-preview/pr-48/blog/scalable-mobile-apps-financial-services#partner-with-betalectic-today" class="hash-link" aria-label="Direct link to partner-with-betalectic-today" title="Direct link to partner-with-betalectic-today">​</a></h3>
<p>Ready to build a scalable financial app? Partner with <strong>Betalectic</strong>, a leading software development company specializing in fintech solutions. Our team of experts will help you design, develop, and deploy secure, scalable, and user-friendly mobile apps tailored to your business needs.</p>
<p><strong><a href="https://betalectic.com/contact" target="_blank" rel="noopener noreferrer">Contact Us Today</a></strong> to get started!</p>
<hr></div></div>]]></content:encoded>
        </item>
    </channel>
</rss>