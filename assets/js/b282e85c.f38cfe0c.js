"use strict";(self.webpackChunkbetalectic_website=self.webpackChunkbetalectic_website||[]).push([["655"],{8961:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return a},default:function(){return u},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return c}});var s=n(1816),i=n(5893),r=n(65);let o={slug:"monitoring-laravel-queued-jobs",title:"Monitoring Laravel Queued Jobs with Lifecycle Events",authors:["arihant"],image:"/img/blogs/laravel-queue-monitoring.jpg"},a="Monitoring Laravel Queued Jobs with Lifecycle Events",l={authorsImageUrls:[void 0]},c=[{value:"Laravel\u2019s Built-in Job Lifecycle Events",id:"laravels-built-in-job-lifecycle-events",level:2},{value:"Setting Up Job Tracking in Laravel",id:"setting-up-job-tracking-in-laravel",level:2},{value:"1. Create a Table to Track Job Statuses",id:"1-create-a-table-to-track-job-statuses",level:3},{value:"2. Create a Listener to Track Events",id:"2-create-a-listener-to-track-events",level:3},{value:"3. Register the Listener in <code>EventServiceProvider</code>",id:"3-register-the-listener-in-eventserviceprovider",level:3},{value:"What You Gain",id:"what-you-gain",level:2},{value:"Final Thoughts",id:"final-thoughts",level:2},{value:"Bonus Tip: Extend the Listener",id:"bonus-tip-extend-the-listener",level:3}];function d(e){let t={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["When it comes to scheduled task monitoring, tools like ",(0,i.jsx)(t.a,{href:"https://healthchecks.io/",children:"Healthchecks.io"})," do a stellar job. But what about ",(0,i.jsx)(t.strong,{children:"queued jobs"})," \u2014 those background tasks running via Redis, Amazon SQS, or other drivers in Laravel?"]}),"\n",(0,i.jsxs)(t.p,{children:["Out of the box, Laravel doesn\u2019t offer a dashboard or built-in UI to track job status. But the good news is: ",(0,i.jsx)(t.strong,{children:"Laravel provides a robust job event system"})," that allows you to hook into every phase of a job's lifecycle. By tapping into these events, you can build your own real-time job monitoring system with just a bit of code."]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"laravels-built-in-job-lifecycle-events",children:"Laravel\u2019s Built-in Job Lifecycle Events"}),"\n",(0,i.jsx)(t.p,{children:"Laravel fires several events during the lifecycle of a queued job. Here\u2019s what you get out of the box:"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Event"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"JobQueued"})}),(0,i.jsx)(t.td,{children:"Fired when a job is added to the queue"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"JobProcessing"})}),(0,i.jsx)(t.td,{children:"Fired just before the job starts executing"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"JobProcessed"})}),(0,i.jsx)(t.td,{children:"Fired when the job finishes successfully"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"JobFailed"})}),(0,i.jsx)(t.td,{children:"Fired if the job throws an exception"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"JobTimedOut"})}),(0,i.jsx)(t.td,{children:"Fired when a job times out"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"JobExceptionOccurred"})}),(0,i.jsx)(t.td,{children:"Fired for unhandled exceptions"})]})]})]}),"\n",(0,i.jsx)(t.p,{children:"These events give us fine-grained visibility into every queued job. By listening to them, we can log activity, measure performance, or alert on failures \u2014 all without changing our job classes."}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"setting-up-job-tracking-in-laravel",children:"Setting Up Job Tracking in Laravel"}),"\n",(0,i.jsx)(t.p,{children:"Here\u2019s a step-by-step guide to building a minimal yet powerful job tracking system using these native events."}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"1-create-a-table-to-track-job-statuses",children:"1. Create a Table to Track Job Statuses"}),"\n",(0,i.jsx)(t.p,{children:"In a migration file:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:"Schema::create('job_statuses', function (Blueprint $table) {\n    $table->id();\n    $table->string('job_id')->unique();\n    $table->string('name');\n    $table->string('status'); // queued, processing, completed, failed\n    $table->timestamp('queued_at')->nullable();\n    $table->timestamp('started_at')->nullable();\n    $table->timestamp('completed_at')->nullable();\n    $table->text('exception')->nullable();\n    $table->timestamps();\n});\n"})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"2-create-a-listener-to-track-events",children:"2. Create a Listener to Track Events"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"app/Listeners/TrackJobStatus.php"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:"namespace App\\Listeners;\n\nuse Illuminate\\Queue\\Events\\JobQueued;\nuse Illuminate\\Queue\\Events\\JobProcessing;\nuse Illuminate\\Queue\\Events\\JobProcessed;\nuse Illuminate\\Queue\\Events\\JobFailed;\nuse App\\Models\\JobStatus;\n\nclass TrackJobStatus\n{\n    public function handle($event)\n    {\n        $jobId = method_exists($event->job, 'uuid') ? $event->job->uuid() : null;\n\n        if (!$jobId) return;\n\n        if ($event instanceof JobQueued) {\n            JobStatus::updateOrCreate(\n                ['job_id' => $jobId],\n                ['name' => $name, 'status' => 'queued', 'queued_at' => now()]\n            );\n        }\n\n        if ($event instanceof JobProcessing) {\n            JobStatus::where('job_id', $jobId)\n                ->update(['status' => 'processing', 'started_at' => now()]);\n        }\n\n        if ($event instanceof JobProcessed) {\n            JobStatus::where('job_id', $jobId)\n                ->update(['status' => 'completed', 'completed_at' => now()]);\n        }\n\n        if ($event instanceof JobFailed) {\n            JobStatus::where('job_id', $jobId)\n                ->update([\n                    'status' => 'failed',\n                    'completed_at' => now(),\n                    'exception' => $event->exception->getMessage(),\n                ]);\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsxs)(t.h3,{id:"3-register-the-listener-in-eventserviceprovider",children:["3. Register the Listener in ",(0,i.jsx)(t.code,{children:"EventServiceProvider"})]}),"\n",(0,i.jsxs)(t.p,{children:["Add the following to your ",(0,i.jsx)(t.code,{children:"EventServiceProvider"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:"protected $listen = [\n    \\Illuminate\\Queue\\Events\\JobQueued::class => [\n        \\App\\Listeners\\TrackJobStatus::class,\n    ],\n    \\Illuminate\\Queue\\Events\\JobProcessing::class => [\n        \\App\\Listeners\\TrackJobStatus::class,\n    ],\n    \\Illuminate\\Queue\\Events\\JobProcessed::class => [\n        \\App\\Listeners\\TrackJobStatus::class,\n    ],\n    \\Illuminate\\Queue\\Events\\JobFailed::class => [\n        \\App\\Listeners\\TrackJobStatus::class,\n    ],\n];\n"})}),"\n",(0,i.jsx)(t.p,{children:"Laravel will now automatically dispatch your listener whenever these events occur."}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"what-you-gain",children:"What You Gain"}),"\n",(0,i.jsx)(t.p,{children:"With this lightweight system in place, you can:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Monitor jobs that are ",(0,i.jsx)(t.strong,{children:"queued"}),", ",(0,i.jsx)(t.strong,{children:"processing"}),", or ",(0,i.jsx)(t.strong,{children:"completed"})]}),"\n",(0,i.jsxs)(t.li,{children:["Gain insight into job ",(0,i.jsx)(t.strong,{children:"execution times"})]}),"\n",(0,i.jsxs)(t.li,{children:["Catch and log ",(0,i.jsx)(t.strong,{children:"failures with exception messages"})]}),"\n",(0,i.jsxs)(t.li,{children:["Build a ",(0,i.jsx)(t.strong,{children:"live dashboard"})," of job activity using Inertia.js, Livewire, or any frontend stack"]}),"\n",(0,i.jsxs)(t.li,{children:["Trigger ",(0,i.jsx)(t.strong,{children:"Slack/email alerts"})," when critical jobs fail"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"You\u2019re now equipped to build custom observability around one of Laravel\u2019s most powerful background features \u2014 without relying on third-party infrastructure."}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"final-thoughts",children:"Final Thoughts"}),"\n",(0,i.jsx)(t.p,{children:"Laravel\u2019s event system isn\u2019t just for jobs \u2014 it\u2019s a powerful architectural tool that gives you hooks into the core of the framework. By simply listening to the events Laravel already fires, you can build clean, decoupled systems for monitoring, alerting, and more."}),"\n",(0,i.jsxs)(t.p,{children:["Pair this queue monitoring setup with ",(0,i.jsx)(t.strong,{children:"Healthchecks.io"})," (for cron tasks) and you\u2019ve got full coverage over your background workload \u2014 ",(0,i.jsx)(t.strong,{children:"for free"}),"."]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"bonus-tip-extend-the-listener",children:"Bonus Tip: Extend the Listener"}),"\n",(0,i.jsx)(t.p,{children:"You can easily enhance this system to:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Track ",(0,i.jsx)(t.strong,{children:"payload details"})," like user ID, batch ID, or job tags"]}),"\n",(0,i.jsx)(t.li,{children:"Visualize job durations over time"}),"\n",(0,i.jsx)(t.li,{children:"Clean up old records with a scheduled command"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Let Laravel do the heavy lifting \u2014 you just have to listen."})]})}function u(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},65:function(e,t,n){n.d(t,{Z:function(){return a},a:function(){return o}});var s=n(7294);let i={},r=s.createContext(i);function o(e){let t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}},1816:function(e){e.exports=JSON.parse('{"permalink":"/blog/monitoring-laravel-queued-jobs","source":"@site/blog/2025-05-28-monitoring-laravel-queued-jobs.md","title":"Monitoring Laravel Queued Jobs with Lifecycle Events","description":"When it comes to scheduled task monitoring, tools like Healthchecks.io do a stellar job. But what about queued jobs \u2014 those background tasks running via Redis, Amazon SQS, or other drivers in Laravel?","date":"2025-05-28T00:00:00.000Z","tags":[],"hasTruncateMarker":true,"authors":[{"name":"Arihant Jain","title":"Jr. Software Engineer","page":{"permalink":"/blog/authors/arihant"},"socials":{"x":"https://x.com/Arihant58198590","linkedin":"https://www.linkedin.com/in/arihant-jain-2a465b201/"},"imageURL":"/img/blogs/AuthorProfile/arihant.jpg","key":"arihant"}],"frontMatter":{"slug":"monitoring-laravel-queued-jobs","title":"Monitoring Laravel Queued Jobs with Lifecycle Events","authors":["arihant"],"image":"/img/blogs/laravel-queue-monitoring.jpg"},"unlisted":false,"nextItem":{"title":"Orchestrating Laravel Queues & Scheduling in Docker with Cron & Supervisor","permalink":"/blog/orchestrating-laravel-queues"}}')}}]);