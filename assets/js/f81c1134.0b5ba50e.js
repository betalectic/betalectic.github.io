"use strict";(self.webpackChunkbetalectic_website=self.webpackChunkbetalectic_website||[]).push([["5524"],{5865:function(e){e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"asset-monitoring-system","metadata":{"permalink":"/blog/asset-monitoring-system","source":"@site/blog/2025-02-17-asset-monitoring-system.md","title":"Building Asset Monitoring System for Lending Apps","description":"Lending technology has been making headlines for some time now. We have seen an influx of new players in the market offering innovative credit solutions, enabling users to spend cash  on credit or purchase goods using Buy Now, Pay Later (BNPL) services.The adoption of such financial products is widespread across various platforms\u2014whether booking a flight through MakeMyTrip or purchasing goods on Amazon using Amazon Pay. With increasing demand and continuous innovation, the credit ecosystem is expanding rapidly, opening new opportunities in digital lending.","date":"2025-02-17T00:00:00.000Z","tags":[],"hasTruncateMarker":true,"authors":[{"name":"Shubham Joshi","title":"Software Engineer, Betalectic","page":{"permalink":"/blog/authors/shubham"},"socials":{"x":"https://x.com/joshiShubham23","linkedin":"https://linkedin.com/in/shubham-joshi-696910118"},"imageURL":"https://media.licdn.com/dms/image/v2/C4E03AQGvswz6CjlGEA/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1535488725345?e=1745452800&v=beta&t=E6f0K6jDa6KpgSm44gRR88mXmc5eolCiCixGv0rCY5g","key":"shubham"}],"frontMatter":{"slug":"asset-monitoring-system","title":"Building Asset Monitoring System for Lending Apps","authors":["shubham"],"image":"https://img.freepik.com/free-vector/isometric-family-budget-composition-with-people-counting-money-vector-illustration_1284-80992.jpg"},"unlisted":false,"nextItem":{"title":"When to Use Cloudflare Workers | Serverless Computing Explained","permalink":"/blog/cloudflare-worker"}},"content":"Lending technology has been making headlines for some time now. We have seen an influx of new players in the market offering innovative credit solutions, enabling users to spend cash \x3c!-- truncate --\x3e on credit or purchase goods using Buy Now, Pay Later (BNPL) services.The adoption of such financial products is widespread across various platforms\u2014whether booking a flight through MakeMyTrip or purchasing goods on Amazon using Amazon Pay. With increasing demand and continuous innovation, the credit ecosystem is expanding rapidly, opening new opportunities in digital lending.\\n\\n## Secured Lending Apps: Lending Against Security\\n\\nA new and promising avenue in the lending landscape is the rise of secured lending platforms that offer loans against pledged assets. Unlike traditional unsecured lending, where credit is extended based on income and creditworthiness, these platforms allow users to leverage financial assets such as stocks, mutual funds, or gold to secure loans. This approach ensures lower risk for lenders while offering borrowers relatively lower interest rates than unsecured loans.\\n\\n### How Secured Lending Works\\n\\n1. **Asset Pledging**: The borrower pledges a portion of their financial assets (e.g., stocks, mutual funds, gold) as collateral.\\n2. **Loan to Value (LTV) Calculation**: The lender determines the loan amount based on the value of the pledged asset. Typically, the LTV ratio ranges from 50% to 70%.\\n3. **Loan Disbursal**: Once the LTV is calculated, the loan amount is credited to the borrower\'s account.\\n4. **Asset Monitoring**: Since pledged assets are market-dependent, their value fluctuates, necessitating continuous monitoring.\\n5. **Loan Repayment & Asset Release**: The borrower repays the loan, and upon successful repayment, the pledged asset is released back to the borrower.\\n\\n### Challenges in Building Secured Lending Apps\\n\\nBuilding an application that facilitates loans against securities (LAS) presents unique technical and financial challenges. The primary concerns revolve around market fluctuations, risk mitigation, and seamless integration with financial data providers.\\n\\n#### 1. Dynamic Nature of Pledged Assets\\n\\nUnlike fixed assets, financial securities such as stocks and mutual funds are subject to market volatility. This fluctuating nature poses a risk to lenders. If the asset\u2019s value drops significantly below the LTV threshold, the lender could suffer financial losses.\\n\\n#### 2. Continuous Asset Monitoring System\\n\\n    To mitigate risks, we implemented a real-time monitoring system that tracks the value of pledged assets throughout the loan tenure. This system works as follows:\\n\\n    - **Data Collection**: Asset prices are continuously fetched via market APIs.\\n    - **Threshold Alerts**: The system compares current asset values with the pledged value at loan initiation.\\n    - **Risk Identification**: If the LTV ratio crosses a predefined risk threshold, the loan is flagged as at-risk.\\n\\n#### 3. Automated Risk Alert System\\n\\nOur alert mechanism ensures timely intervention in case of adverse market movements:\\n\\n- **Danger Zone Detection:** If the asset value declines beyond an acceptable limit, an alert is generated.\\n- **Customer Notification:** The customer is informed about the shortfall, prompting them to either repay a portion of the loan or pledge additional assets.\\n- **Loan Management Actions:** In case of prolonged devaluation, the lender can take appropriate action, such as liquidating part of the pledged asset to recover the outstanding loan.\\n\\n#### 4. Third-Party Data Integrations\\n\\nIntegrating third-party services is a crucial yet complex aspect of building secured lending applications. Financial data providers such as CAMS/Karvy for market and user holdings data, Razorpay for payment gateway processing, and Digio for autopay setup are essential in ensuring smooth operations.\\nHowever, these integrations come with challenges, including maintaining data integrity, ensuring immutability, and managing historical records for auditing. To uphold reliability and compliance, it is necessary to implement robust mechanisms that store multiple data versions, allowing for accurate tracking, error resolution, and regulatory adherence. A well-architected integration strategy is vital for seamless loan processing and risk management in secured lending platforms.\\n\\n### Conclusion\\n\\nSecured lending platforms represent a significant advancement in the digital lending space, offering a more stable and risk-mitigated approach compared to unsecured loans. However, building a reliable and efficient secured lending system requires robust asset monitoring, real-time alerts, and automated risk management to handle market volatility effectively.\\n\\nWith more financial institutions adopting secured lending models, this sector is poised for significant growth in the coming years."},{"id":"cloudflare-worker","metadata":{"permalink":"/blog/cloudflare-worker","source":"@site/blog/2025-02-04-Cloudflare-worker.md","title":"When to Use Cloudflare Workers | Serverless Computing Explained","description":"What is Serverless? Is There Really No Server?","date":"2025-02-04T00:00:00.000Z","tags":[],"hasTruncateMarker":true,"authors":[{"name":"Md. Amir Sohail","title":"Software Engineer, Betalectic","page":{"permalink":"/blog/authors/amir"},"socials":{"x":"https://x.com/MMdamirsohail1","linkedin":"https://www.linkedin.com/in/md-amir-sohail-86069b1aa/"},"imageURL":"https://media.licdn.com/dms/image/v2/D5603AQEB9WTYEPHzLg/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1714193197370?e=1745452800&v=beta&t=OtwdkDGDpxBriXjcsD9JpkKvNuvFV2mYVfvsB9JuJgw","key":"amir"}],"frontMatter":{"slug":"cloudflare-worker","title":"When to Use Cloudflare Workers | Serverless Computing Explained","authors":["amir"],"image":"https://img.freepik.com/free-vector/cloud-hosting-concept-illustration_114360-650.jpg"},"unlisted":false,"prevItem":{"title":"Building Asset Monitoring System for Lending Apps","permalink":"/blog/asset-monitoring-system"},"nextItem":{"title":"Real-Time Bidding and Auctions: A Guide to Building a High-Performance Platform","permalink":"/blog/bidding-and-auctions"}},"content":"## What is Serverless? Is There Really No Server?\\n\\nHave you ever heard the term **\\"serverless\\"** and wondered what it means? Does it mean there\u2019s no server at all? If there\u2019s a server, why do we call it **serverless**? \uD83E\uDD14\\n\\n\x3c!-- truncate --\x3e\\n\\nLearn when and why to use Cloudflare Workers for serverless computing. Explore how it works, its benefits, and real-world use cases. Dive into the future of serverless architecture with Betalectic.\\n\\n## **What Does Serverless Actually Mean?**\\n\\nServerless doesn\u2019t mean there are no servers\u2014it just means you don\u2019t have to worry about them. Cloud providers like Cloudflare Workers, AWS Lambda, and Google Cloud Functions take care of everything behind the scenes, including servers, scaling, and maintenance. That\u2019s why it\u2019s called \\"serverless\\"\u2014because you don\u2019t have to deal with servers directly. You write and deploy your code, and the platform runs it whenever needed. Plus, you only pay for what you use instead of keeping a server running all the time, making it a flexible and cost-effective choice.\\n\\n## **How Does Serverless Work?**\\n\\nWhen you deploy a serverless function, it doesn\u2019t run all the time like a traditional server. Instead, it **executes only when triggered**\u2014for example, when a user requests data from an API or visits a webpage. The cloud provider automatically starts the function, runs the code, and then shuts it down when it\u2019s done.\\n\\nThis **event-driven execution model** makes serverless highly **efficient, scalable, and cost-effective**. Since the platform scales automatically, your application can handle a single request or millions of requests without any manual intervention.\\n\\n## **Cloudflare Workers**\\n\\nImagine if your website could run fast no matter where your users are. That\u2019s precisely what **Cloudflare Workers** do! They let you run code on Cloudflare\u2019s massive network of **300+ data centers worldwide**, so instead of waiting for a request to travel across the internet to a faraway server; it gets processed **closer to the user**\u2014making everything load **much faster**.\\n\\n**How Cloudflare Workers Work**\\n\\nThink of Cloudflare Workers as tiny, on-demand programs that run whenever someone visits your site or uses your API. Here\u2019s what happens step by step:\\n\\n1. ### A User Makes a Request\\n\\nWhen someone visits your site or calls your API, instead of going to a traditional server, the request is sent to the **nearest Cloudflare data center**. This saves time by reducing how far the data has to travel.\\n\\n2. ### The Worker Runs Instantly\\n\\nOnce the request reaches Cloudflare, the Worker **executes your code on demand**. It runs in a super lightweight and isolated environment (powered by the same V8 engine as Chrome and Node.js).\\n\\n3. ### A Response is Sent Back \u2013 Fast!\\n\\nThe Worker can do all sorts of things\u2014fetch data, modify responses, check authentication, cache content, and more. Once done, the response **returns to the user from the closest edge server**, making everything feel snappy.\\n\\n---\\n\\n## **Why Use Cloudflare Workers?**\\n\\nHere\u2019s what makes Workers awesome:\\n\\n\u2705 **No Servers to Manage** \u2013 Write your code, deploy it, and Cloudflare handles everything. You won\'t need to worry about setting up or maintaining servers.\\n\\n\u2705 **Scales Instantly** \u2013 Whether you get **1 request or 1 million**, Cloudflare Workers scale automatically, ensuring smooth performance.\\n\\n\u2705 **Runs Everywhere** \u2013 Unlike traditional cloud servers locked to a specific region, Workers **run globally** on Cloudflare\u2019s network.\\n\\n\u2705 **Only Pay for What You Use** \u2013 Workers run only when needed, so you don\u2019t have to pay for idle servers.\\n\\n\u2705 **Secure by Design** \u2013 Workers run in a **sandboxed** environment, protecting your app from security threats.\\n\\n---\\n\\n## **What Can You Build with Cloudflare Workers?**\\n\\n\uD83D\uDD39 **API Gateway** \u2013 Manage API requests and modify responses without a backend.\\n\\n\uD83D\uDD39 **Authentication & Security** \u2013 Validate JWT tokens, block bad traffic, and add security headers.\\n\\n\uD83D\uDD39 **Edge Caching** \u2013 Store API responses and static content at the edge to speed things up.\\n\\n\uD83D\uDD39 **Dynamic Content Rewriting** \u2013 Modify requests before they reach your server.\\n\\n\uD83D\uDD39 **Serverless Applications** \u2013 Build URL shorteners, real-time webhooks, and microservices.\\n\\n---\\n\\nCloudflare Workers make it **super easy** to build **fast, secure, and scalable** applications **without managing infrastructure**. Since they run on the edge, your code executes closer to users, reducing delays and improving performance.\\n\\n\uD83D\uDE80 **Want to give it a try?** You can start for free with [Cloudflare\u2019s Workers Playground](https://workers.cloudflare.com/playground#LYVwNgLglgDghgJwgegGYHsHALQBM4RwDcABAEbogB2+CAngLzbPYDqApmQNJQQBimYACFKNRHQBqADVwBNAI50oABjIBlAJLKAorKggAXCxYduvAVhHVakmQqWrNOvSACwAKADC6KhHa-sABEoAGcYdBDeKB8DEgwsPAJiEio4YHYGACJ8QgA6ACsQzNJUKDB-NIzspIKij29ffwhsABU6GHZYuBgYMCgAYwJoqmR8uAA3OBD+hFgIAGpgdFxwdg8PdgAPcKQSXHZUOHAIEgBvdwBIVPTYzO1NtN72EgBBAAUNTIAaS8IAcxCsQA2pkto9yt8SJlulBIZkEOwwj4QuxMgBdH4AXyI7g8xmYph4-EEVjE9GkckUKnUWl0+nqPj8AWCSMi0BicUEiUIpGuVSgNC2tWKcTKFXSWQF+02woZjQCbQ6XR6fUG7JGY0m01mMAWSxW5XW7igwB2JwA7uwwP10Ok4ghbVDLdbbexcgALCDAMDFdzuZAAKgD7hIAZIAAEIO12PtUGcAPJkfLsfoQTEkbRUcYhgPIP1bM17A5HSBnS6B4MXUMR+AINJnABK7HkIERaZICJbbcu1fDtfrp0z43T-mzVbDfcQA-uKZA6oafk27dTmx7E4REBACCoITObwdwFC7AAPE2kTv2AA+TFrvMXKZ0Kj9OLsCD9d0ACk7rZCEC+JFHf8VwASjLC4LhtHcTi3MASAYFJ2HNEgAFUGwAGS-ZsfwgXIYOAnFwMgkJ0HKXIwHQP4PwAAwACStciSAAElOVJxigP4CEwXCUQQF4-iadMCBIeAIHdJjThg3IRPdPlMQAQio-C-XAqA4w-STpL5OCGHgzJkBhTJQPOcCLmQZASFkSgSBtcBcBIOAwGI6yHNguASFEqAEDs2so1eD4SHddgEUuQjkROHI3PguBzTgXgSBNM0P0yXJkAi4UlJMjctyoEgz3CC9ah8D8Ioyi4b3ArLtwQpC8uRdgP2dG10n-YzwMCuB9gQQEwJMzJIKZZoow6TJbkXFBPW9b4QrKn5wMxDLMSxHE8XxQlzBJUQbApexqScOk3C8RkmiCUJwjZYZYniHAIt5Soska10PS9H0SjFPl7qtJq3Qmn05QG1po1iMbkF6WKqCNY85MCeNPBaWQ3m0ALnsvdxjx+kgwDgKg-iyfxMhRi40fYDqCcJ9JCGs91EBRCAsmQlo+GwAAOTISGQUnj3JtzPQgGBsCwqBxiyKRsGQl5sG8U0hjICFrKO3wsg0bQGBjfjWfZkLOdfNz3syNjELNVn+qae6oFwUSGH2Nj+nYbBzTN0T-wFKIHOwaYHIyABGXJlHVjnoAgcpL08ciQFwVBMYREhWEwABrILdzeTG6D+B1rGPZAA6DzW+ioWPpoRMAsl-OhyhCQLX0yab3QRVAsh5mBATM0GU7TmhcitmAHVwXJ+lD8PI7dK3kAe9I3ajUj+hCIoQo1wnkHa3AUcuY8KFwOgOdwQXrMx6esgjxBEXx6bjxNP4SBCBB+nriBeabkHk9TzaO-YcYu+WXv+4PhEX-GNBB5CFJbGftNapUFhzYAYNSaEy3uMHeUwQj3TjgnbA5E-joHxhnWB0DjwwGgRcDgLp0hyRQiidy7pQgkCTnAVum13LoHcm2PYsxxjPDcjHBA8cEBAQRAQNhRYlj0Omhccuh8SA+Fzuwf8WM7LmkCjlXh68iy9HQHQPYnkUyBzURABholniq2eGQNRNNoDYxICAGA9lhEh0oAPMRcB+g2V8LkE+IMcHuk9peVgVMTiUPYcghAAB+DOHicF4OES8EgNiw7f2eBwrh8VdwACkJhwDUDMOYct9gkDoFZc0sw-DkKElTGgZccmUAQCQS0ZBhFsnYAAcl3DRFoLQ3juTrKgUoz4t4IlTGANRAoolf0Ho0gCuB+IY3QGqYYu5EB0L0cI80mAwC4GkWAci9szG5JAPQyZapng2myX3CIzwdHlK3ABGg5ieK7kGZgTqQiTIXAROeOyZy9HABIEsKOLYBix36a48JJk0aeJaPQeKJxtldStKgEJniT5ApMvGHKUKMYHF8bMi+4I4kBKKRijs1AqACnPj4chlC6m5AslZQYVBhExjinFPorD7JXJRKcwKHZETHF3IFH+GYt4nD0cJAgYk4AUGZWc-SMAoCPJMmygK6AkJCrBKaco0dcUlNwGUrenSgpNA7JQPwgCqU7JpfZRyDD6UQGEUKw5pyGHyrkQQUZZ1IgyzYVcsgswtkVIQkueK+w3JnL6KgN0gKObIEgQKAmGc14b1RgvZGuJ3D4jYJwIkFhhCbXENtKkjhaQuD+sdFkZ0ogciutyZIusuYRRFKUcousZboDIJkItCpAb2RVAMIYPhRjEXBsm04fVbQiSgGQMovA6AAH0ciogMJkAATMoBdAAWbAygADM66ADs3xh1S2gOOvoUYp0HwBCNEEVBljsEKFOpqIl0RfEyFGqgU79SrBGpkKUQpCiZExCtYwa1iSWGzeSOweaaTOH0MwDwQA) or deploy your first Worker in minutes!"},{"id":"bidding-and-auctions","metadata":{"permalink":"/blog/bidding-and-auctions","source":"@site/blog/2024-12-09-bidding-and-auctions.md","title":"Real-Time Bidding and Auctions: A Guide to Building a High-Performance Platform","description":"In the modern digital landscape, auctions have gone beyond the traditional auction houses and taken center stage online. Whether you\u2019re building an e-commerce platform, a ticket resale marketplace, or a fundraising site,  real-time bidding keeps your users engaged and ensures fair competition. This guide will walk you through the process of designing and implementing a high-performance real-time auction system using AWS services\u2014specifically Amazon SQS FIFO queues, AWS Lambda, and Pusher.","date":"2024-12-09T00:00:00.000Z","tags":[],"hasTruncateMarker":true,"authors":[{"name":"Rajesh Nautiyal","title":"Software Engineer, Betalectic","page":{"permalink":"/blog/authors/rajesh"},"socials":{"x":"https://x.com/Rajssj4","linkedin":"https://www.linkedin.com/in/rajesh-nautiyal/"},"imageURL":"https://media.licdn.com/dms/image/v2/D5603AQEIKaGPajQL8w/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1700601582406?e=1745452800&v=beta&t=mUhaJGqeKP5wuUlWEa5Xg2YetoB_R49CzKetQtcjixA","key":"rajesh"}],"frontMatter":{"slug":"bidding-and-auctions","title":"Real-Time Bidding and Auctions: A Guide to Building a High-Performance Platform","authors":["rajesh"],"image":"https://img.freepik.com/free-vector/judge-online-service-platform-court-worker-stand-justice-law-judge-traditional-black-robe-hearing-case-website-flat-vector-illustration_613284-1530.jpg"},"unlisted":false,"prevItem":{"title":"When to Use Cloudflare Workers | Serverless Computing Explained","permalink":"/blog/cloudflare-worker"},"nextItem":{"title":"Building a Dynamic Table Component: Backend Config Driven","permalink":"/blog/dynamic-table-component"}},"content":"In the modern digital landscape, auctions have gone beyond the traditional auction houses and taken center stage online. Whether you\u2019re building an e-commerce platform, a ticket resale marketplace, or a fundraising site, \x3c!-- truncate --\x3e real-time bidding keeps your users engaged and ensures fair competition. This guide will walk you through the process of designing and implementing a high-performance real-time auction system using AWS services\u2014specifically Amazon SQS FIFO queues, AWS Lambda, and Pusher.\\n\\n1.  [ Introduction to Real-Time Bidding and Auctions](#1-introduction-to-real-time-bidding-and-auctions)\\n\\n2.  [ Core Architecture Overview](#2-core-architecture-overview)\\n\\n3.  [ Why Amazon SQS FIFO Queues?](#3-why-amazon-sqs-fifo-queues)\\n\\n4.  [ Processing Bids with AWS Lambda](#4-processing-bids-with-aws-lambda)\\n\\n5.  [ Ensuring Real-Time Updates with Pusher](#5-ensuring-real-time-updates-with-pusher)\\n\\n6.  [ Handling Multiple Auctions Concurrently](#6-handling-multiple-auctions-concurrently)\\n\\n7.  [ Best Practices and Tips](#7-best-practices-and-tips)\\n\\n8.  [ Conclusion](#8-conclusion)\\n\\n---\\n\\n## 1. Introduction to Real-Time Bidding and Auctions\\n\\n**What is real-time bidding (RTB)?**\\n\\nReal-time bidding refers to the process of making live offers or bids in a fraction of a second\u2014while an auction is ongoing. In an online auction environment, multiple bidders simultaneously submit their bids on an item (or multiple items) within a specified timeframe. The goal is to capture each bid accurately, determine the highest valid offer, and then display the latest leading bid to all participants in real-time.\\n\\n**Key challenges:**\\n\\n- **Concurrency**: Multiple bidders submitting offers at the same time.\\n- **Ordering**: Ensuring that each bid is processed in the correct sequence.\\n- **Scalability**: Handling multiple concurrent auctions without performance degradation.\\n- **Real-time updates**: Notifying all bidders of the latest bid status as soon as possible.\\n\\n---\\n\\n## 2. Core Architecture Overview\\n\\nA robust real-time auction platform typically involves the following components:\\n\\n1. **Front-End**: Displays the auction interface, shows real-time bid updates, and captures user bids.\\n2. **Queue**: Ensures reliable, ordered message handling for incoming bids.\\n3. **Processing Layer**: A serverless or microservices layer that processes each bid and updates the system state.\\n4. **Real-Time Notification Service**: Broadcasts live updates to all participants.\\n5. **Database**: Stores bid history, user data, and auction details.\\n\\nBelow is a high-level architecture:\\n\\n```mermaid\\nflowchart LR\\n    A[Bidders] --\x3e|Submit Bid| B[Front-End]\\n    B --\x3e|Send Bid<br>to SQS FIFO| C[SQS FIFO Queue]\\n    C --\x3e|Trigger Lambda| D[AWS Lambda]\\n    D --\x3e|Update Auction<br>State| E[Database]\\n    D --\x3e|Publish<br>New Bid Event| F[Pusher]\\n    F --\x3e|Real-time Updates| B\\n\\n```\\n\\n---\\n\\n## 3. Why Amazon SQS FIFO Queues?\\n\\n**Amazon SQS (Simple Queue Service)** is a fully managed message queuing service from AWS. The FIFO (First-In-First-Out) variant guarantees that messages (bids) are processed in the exact order they are received and that each message is processed exactly once. This is critical in an auction environment where the timing and sequence of bids can determine the winner.\\n\\n### Key Benefits of SQS FIFO:\\n\\n- **Ordering Guarantee**: Ensures the first bid in is the first processed, preventing race conditions.\\n- **Exactly-Once Processing**: Avoids the dreaded \u201Cdouble-processing\u201D of a single bid.\\n- **High Throughput**: Scales to handle thousands of messages per second.\\n- **Easy Integration**: Works seamlessly with AWS Lambda.\\n\\nFor more details on the intricacies of FIFO queues, you can read [Solving Complex Ordering Challenges with Amazon SQS FIFO Queues](https://aws.amazon.com/blogs/compute/solving-complex-ordering-challenges-with-amazon-sqs-fifo-queues/).\\n\\n---\\n\\n## 4. Processing Bids with AWS Lambda\\n\\n**AWS Lambda** is a serverless compute service that lets you run code without managing servers. In a real-time auction scenario, each new bid triggers a Lambda function. The function then:\\n\\n1. **Validates the bid**: Checks if the bid is higher than the current highest bid, whether the auction is still open, etc.\\n2. **Updates the auction state**: Stores or updates relevant information in the database (e.g., new highest bid, bidder ID, timestamp).\\n3. **Notifies the front-end**: Publishes a message to Pusher (or another real-time messaging service) so all participants see the new highest bid.\\n\\nIn your Lambda code, you might have a structure like this:\\n\\n- **index.js**: Entry point for the Lambda, orchestrating the workflow.\\n- **processBids.js**: Contains the core business logic to validate and process bids.\\n- **Other utility files**: Handle different scenarios, such as auctions with extended bidding periods, concurrency checks, etc.\\n\\nThis modular approach keeps the code maintainable and easy to extend.\\n\\n---\\n\\n## 5. Ensuring Real-Time Updates with Pusher\\n\\nOnce a valid bid is processed, it\u2019s crucial to broadcast the updated information to all active participants immediately. **Pusher** is a popular real-time messaging service that makes this possible with minimal overhead. By integrating Pusher into your Lambda function:\\n\\n1. **Push New Bid Events**: Each time the Lambda validates a new highest bid, it sends a push notification to a Pusher channel dedicated to that auction.\\n2. **Front-End Listeners**: The browser (or mobile app) listens for these channel events. Upon receiving a new bid event, the interface updates automatically, showing the latest highest bid and the bidder\u2019s details (or masked identifier).\\n\\nThis mechanism provides a **seamless** real-time experience for users, similar to a live auction house setting.\\n\\n---\\n\\n## 6. Handling Multiple Auctions Concurrently\\n\\nWhen you have multiple auctions running at once, concurrency can skyrocket. Here\u2019s how you can manage it:\\n\\n1. **Unique Identifiers**: Each auction has a unique queue group ID or message group ID in SQS FIFO to ensure that bids for different auctions don\u2019t mix.\\n2. **Scalable Architecture**: AWS Lambda automatically scales to handle as many concurrent invocations as needed, provided your concurrency limits are set appropriately.\\n3. **Separate Pusher Channels**: Each auction should have its own Pusher channel. This way, messages (bid updates) only go to participants in that specific auction.\\n\\n---\\n\\n## 7. Best Practices and Tips\\n\\n1. **Use Timeouts Wisely**: Make sure your Lambda function has an appropriate timeout setting. In most cases, your bid processing should be quick, but be mindful of edge cases like network latency.\\n2. **Implement Idempotency**: If your system somehow reprocesses a message (very rare with FIFO queues, but still possible), ensure your logic can handle duplicates gracefully.\\n3. **Monitor and Alert**: Set up CloudWatch metrics and alarms to track Lambda invocation errors, queue backlogs, or unusual spikes in bidding volume.\\n4. **Database Transactions**: Use atomic database operations (like DynamoDB\u2019s conditional writes or relational transactions) to ensure data consistency when updating the highest bid.\\n5. **Security**: Implement appropriate authentication and authorization, ensuring only authorized bidders can place bids, and the data is transmitted securely (HTTPS/WSS).\\n\\n---\\n\\n## 8. Conclusion\\n\\nBuilding a **high-performance real-time bidding and auction platform** requires careful attention to concurrency, ordering, and real-time communication. By leveraging **Amazon SQS FIFO queues** for message ordering, **AWS Lambda** for bid processing, and **Pusher** for live updates, you can create an architecture that scales automatically and provides a seamless experience for your users.\\n\\nThis combination of services allows you to handle multiple auctions concurrently with **confidence** in the accuracy of each bid. With minimal infrastructure management (thanks to serverless components), your development team can focus on enhancing user experience, implementing new features, and ensuring the platform continues to run smoothly.\\n\\nIf you\u2019re looking to dive deeper, make sure to check out AWS\u2019s official guide on [Solving Complex Ordering Challenges with Amazon SQS FIFO Queues](https://aws.amazon.com/blogs/compute/solving-complex-ordering-challenges-with-amazon-sqs-fifo-queues/). By following these best practices and leveraging the right AWS services, you can build an auction platform that is both **powerful** and **reliable**\u2014ready for the demands of real-time bidding at any scale."},{"id":"dynamic-table-component","metadata":{"permalink":"/blog/dynamic-table-component","source":"@site/blog/2024-11-28-dynamic-table-component.md","title":"Building a Dynamic Table Component: Backend Config Driven","description":"Introduction","date":"2024-11-28T00:00:00.000Z","tags":[],"hasTruncateMarker":true,"authors":[{"name":"Shrey Dhyani","title":"Software Engineer & Avid Reader","page":{"permalink":"/blog/authors/all-sebastien-lorber-articles"},"socials":{"x":"https://x.com/ShreyDhyani","linkedin":"https://www.linkedin.com/in/shrey-dhyani-60a63b157/"},"imageURL":"https://media.licdn.com/dms/image/v2/C5103AQHtgCHMZRwvzw/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1519234254632?e=1745452800&v=beta&t=KkKxD3O4YQ5_pyH-HAxyRI8PF4wRGCZ_QpBWFR5_dlo","key":"shrey"}],"frontMatter":{"slug":"dynamic-table-component","title":"Building a Dynamic Table Component: Backend Config Driven","authors":["shrey"],"image":"https://img.freepik.com/free-vector/minimalist-project-management-daily-checklist_742173-5121.jpg"},"unlisted":false,"prevItem":{"title":"Real-Time Bidding and Auctions: A Guide to Building a High-Performance Platform","permalink":"/blog/bidding-and-auctions"},"nextItem":{"title":"Building Scalable Mobile Apps for Financial Services - Key Features and Best Practices","permalink":"/blog/user-story"}},"content":"### **Introduction**\\n\\nIn this post, I\'ll walk you through the development of a dynamic and highly customizable table component. The key idea behind this table is its configuration-driven nature\u2014where all the features, \x3c!-- truncate --\x3e such as column visibility, order, resizing, and more, are controlled by configurations fetched from a backend API. This allows for unparalleled flexibility and adaptability in building complex, data-heavy UIs.\\n\\n### **Why a Configuration-Driven Table?**\\n\\nModern applications often need tables that can handle various data types, support user interactions, and fit into different use cases. While building such a table from scratch could be cumbersome, a configuration-driven approach allows:\\n\\n- **Separation of concerns:** Let the backend decide on the table\u2019s structure, columns, and behaviour.\\n- **Flexibility:** Changing the table\'s configuration requires no code changes in the frontend, making it more scalable and adaptable.\\n- **Feature-rich tables:** Easily enable or disable powerful table features like sorting, resizing, and variant control by simply updating the configuration.\\n\\n### **Key Features of the Table Component**\\n\\n**1. Configuration-Driven Setup**\\nThe table component fetches its entire setup from an API. This includes which columns to display, their visibility, order, and custom configurations such as alignment or variant styling. Here\u2019s how the table structure is controlled: - **Column Definitions:** The API provides details about each column, including field name, label, and whether it\u2019s visible or hidden. - **Visibility Rules:** Specific columns can be hidden based on roles, user preferences, or other business rules. - **Dynamic Order:** The column order is not static, and the backend configuration can dictate how the columns should appear.\\n\\n**2. Out-of-the-Box Features**\\nTo enhance the user experience, this table component offers several built-in features: - **Column Ordering:** Users can reorder columns, and these settings can be synced with the backend, ensuring the changes persist across sessions. - **Column Visibility:** Users can toggle which columns to show or hide based on their preferences or needs. - **Resizing:** Column widths can be adjusted to improve readability and fit more content. - **Variants & Table Sizing:** The configuration also allows setting different table styles (compact, spacious, etc.) and variants (striped, bordered, etc.), giving the table a unique look-and-feel based on the context.\\n\\n**3. Backend-Driven Flexibility**\\nOne of the key aspects of this table is that most of its features are enabled or disabled by backend configurations. This allows for easy customization and quicker adaptations to business needs without touching frontend code. The API configuration includes: - **Feature Toggles:** Resizing, sorting, and even advanced features like pagination or infinite scroll can be toggled on/off via configuration. - **Responsive Design:** Backend can dictate how the table should behave at different breakpoints, ensuring optimal user experience across devices. - **Theme & Styling:** Configurations can also control table styles, enabling easy changes between themes (dark/light) or modifying borders, row colors, and more.\\n\\n### **How It Works: A Closer Look at the API Configuration**\\n\\nThe heart of this table component lies in the configuration fetched from the API. Here\'s an example of what a configuration response might look like:\\n\\n```json\\n{\\n  \\"resource\\": \\"sample-data\\",\\n  \\"identifierKey\\": \\"data-value\\",\\n  \\"selectionType\\": \\"multiple\\",\\n  \\"actions\\": {\\n    \\"header\\": \\"Actions\\",\\n    \\"align\\": \\"end\\",\\n    \\"fixed\\": true,\\n    \\"minWidth\\": 200,\\n    \\"options\\": [\\n      {\\n        \\"key\\": \\"edit\\",\\n        \\"url\\": \\"/edit/:id\\",\\n        \\"icon\\": \\"SquarePen\\",\\n        \\"method\\": \\"GET\\"\\n      }\\n    ]\\n  },\\n  \\"columns\\": [\\n    {\\n      \\"accessorKey\\": \\"id\\",\\n      \\"header\\": \\"Sr no.\\",\\n      \\"width\\": 80,\\n      \\"maxWidth\\": 80,\\n      \\"minWidth\\": 80,\\n      \\"fixed\\": true\\n    },\\n    {\\n      \\"accessorKey\\": \\"state\\",\\n      \\"header\\": \\"State\\",\\n      \\"width\\": 100,\\n      \\"minWidth\\": 100,\\n      \\"show\\": false\\n    }\\n  ],\\n  \\"filters\\": {\\n    \\"category\\": {\\n      \\"label\\": \\"Category\\",\\n      \\"type\\": \\"enum\\",\\n      \\"isNullable\\": false,\\n      \\"options\\": [\\n        {\\n          \\"label\\": \\"One\\",\\n          \\"value\\": \\"One\\"\\n        },\\n        {\\n          \\"label\\": \\"Two\\",\\n          \\"value\\": \\"Two\\"\\n        }\\n      ]\\n    },\\n    \\"state\\": {\\n      \\"label\\": \\"State\\",\\n      \\"type\\": \\"enum\\",\\n      \\"isNullable\\": false,\\n      \\"modelName\\": \\"state\\"\\n    },\\n    \\"city\\": {\\n      \\"label\\": \\"City\\",\\n      \\"type\\": \\"enum\\",\\n      \\"isNullable\\": false,\\n      \\"dependsOn\\": [\\"state\\", \\"district\\"],\\n      \\"modelName\\": \\"city\\"\\n    },\\n    \\"locality\\": {\\n      \\"label\\": \\"Locality\\",\\n      \\"type\\": \\"enum\\",\\n      \\"isNullable\\": false,\\n      \\"dependsOn\\": [\\"state\\", \\"city\\"],\\n      \\"modelName\\": \\"locality\\"\\n    },\\n    \\"availability\\": {\\n      \\"label\\": \\"Availablity\\",\\n      \\"type\\": \\"boolean\\"\\n    }\\n  }\\n}\\n```\\n\\nThis configuration informs the table component of:\\n\\n- What columns to display.\\n- The initial order of columns.\\n- Filters to be available to users and type of value input to be rendered for that filter.\\n\\n### **Benefits of This Approach**\\n\\n**1. Easy to Maintain and Scale:** No need to update the frontend codebase every time a column or feature needs to be added or removed\u2014just update the backend configuration.\\n\\n**2. Improved User Experience:** By giving users control over how they view and interact with the table, it caters to personalized experiences.\\n\\n**3. Faster Development Cycles:** Decoupling the table\u2019s features from the code allows for faster iterations, as the backend can dictate new table features or adjustments.\\n\\n### **Challenges & Considerations**\\n\\n- **API Design**: The backend needs to be designed carefully to ensure the configurations are granular enough for flexibility but not overly complex.\\n- **Syncing State**: Handling user preferences, such as column order or visibility, and syncing them with the backend can be challenging, especially in real-time scenarios.\\n- **Performance**: Fetching large configurations or dealing with very complex tables may introduce performance bottlenecks, which would require optimisation.\\n\\n### **Conclusion**\\n\\nBuilding a configuration-driven table component has made managing data-rich interfaces easier, more flexible, and more powerful. By leveraging backend configurations, this approach decouples the frontend and backend, allowing for greater scalability, maintainability, and faster iteration times. Whether you\'re building dashboards, reports, or admin panels, this method ensures your tables are not just functional but also adaptive to changing business needs\\n\\n---"},{"id":"user-story","metadata":{"permalink":"/blog/user-story","source":"@site/blog/2024-10-12-welcome/index.md","title":"Building Scalable Mobile Apps for Financial Services - Key Features and Best Practices","description":"In today\u2019s fast-paced digital landscape, mobile apps have become an essential tool for financial services to engage with customers and deliver value. With the rise of fintech innovations and the proliferation of smartphones, consumers now expect instant access to banking, investment, insurance, and payment services at their fingertips. This shift has driven financial institutions to prioritize mobile-first strategies to meet the demands of tech-savvy users.","date":"2024-10-12T00:00:00.000Z","tags":[],"hasTruncateMarker":true,"authors":[{"name":"Manasa Madapu","title":"Co-Founder, Betalectic","url":"https://github.com/ManasaMadapu","page":{"permalink":"/blog/authors/manasa"},"socials":{"x":"https://x.com/ManasaMadapu","linkedin":"https://www.linkedin.com/in/manasa-madapu/"},"imageURL":"https://pbs.twimg.com/profile_images/1854874782384201728/ad8jUVyx_400x400.jpg","key":"manasa"}],"frontMatter":{"slug":"user-story","title":"Building Scalable Mobile Apps for Financial Services - Key Features and Best Practices","authors":["manasa"]},"unlisted":false,"prevItem":{"title":"Building a Dynamic Table Component: Backend Config Driven","permalink":"/blog/dynamic-table-component"}},"content":"In today\u2019s fast-paced digital landscape, mobile apps have become an essential tool for financial services to engage with customers and deliver value. With the rise of fintech innovations and the proliferation of smartphones, consumers now expect instant access to banking, investment, insurance, and payment services at their fingertips. This shift has driven financial institutions to prioritize mobile-first strategies to meet the demands of tech-savvy users.\\n\\n\x3c!-- truncate --\x3e\\n\\nFrom managing portfolios to making real-time payments, the convenience and accessibility offered by mobile apps have redefined the way financial services are consumed. As a result, the financial services sector is witnessing a growing demand for mobile apps that combine functionality, security, and personalization to create a superior user experience.\\n\\nHowever, meeting this demand isn\u2019t without challenges. One critical aspect of mobile app development in the financial domain is scalability. Financial apps often face significant fluctuations in usage, particularly during market volatility, seasonal peaks, or promotional campaigns. Scalability ensures that an app can handle these surges in traffic and transactions without compromising on performance or user satisfaction. A scalable app not only provides a seamless experience during peak loads but also supports long-term growth as the user base expands.\\n\\n## Key Features of Scalable Financial Apps\\n\\n## Robust Security\\n\\n**End-to-end encryption and secure data storage**: End-to-end encryption ensures that sensitive data, such as financial transactions and personal details, remains secure during transmission by encrypting it from the sender\u2019s device to the recipient\u2019s, making it inaccessible to unauthorized parties. Complementing this, secure data storage techniques, such as encrypted databases and tokenization, protect user information from breaches and unauthorized access, ensuring compliance with regulatory standards and safeguarding user trust.\\n\\n**Multi-factor authentication** and compliance with regulations like RBI, SEBI, IRDAI, Data Protection Bill (expected) etc. In the financial services sector, robust security measures are non-negotiable, with multi-factor authentication (MFA) serving as a cornerstone for user protection. MFA adds an extra layer of security by requiring users to verify their identity through multiple factors such as passwords, biometric scans, or one-time passwords (OTPs), ensuring that sensitive financial data remains safeguarded.\\n\\n## User-Friendly Interface:\\n\\n**Intuitive UI/UX for financial literacy and accessibility**\\n\\nAn intuitive UI/UX is essential in financial apps to simplify complex financial processes and make them easily understandable for users of all experience levels, thereby promoting financial literacy. Additionally, accessibility features, such as screen readers, adjustable text sizes, and multi-language support, ensure that the app is inclusive and usable by a diverse audience, enhancing user engagement and satisfaction.\\n\\n## Real-Time Data Processing\\n\\nReal-time data processing enables financial apps to integrate live market feeds, providing users with up-to-the-minute updates on stock prices, currency rates, and other market dynamics essential for informed decision-making. Additionally, instant transaction updates ensure transparency and build user trust by confirming payments, transfers, or trades without delays, creating a seamless and reliable user experience.\\n\\n## Customizable Dashboards\\n\\nCustomizable dashboards empower users by presenting personalized insights tailored to their financial goals, preferences, and activity patterns, such as spending trends, portfolio performance, or savings milestones. By allowing users to configure widgets, select relevant data, and prioritize key metrics, these dashboards enhance engagement and decision-making, creating a more user-centric experience.\\n\\n**In modern mutual fund (MF) apps**, custom portfolios and dashboards go beyond basic portfolio tracking by offering deeply personalized goal-tracking features tailored to each investor\u2019s unique objectives. Investors can define specific financial goals, such as saving for a vacation, purchasing a home, or planning for retirement, and the app aligns their investments with these targets.\\n\\nThe dashboard provides clear visualizations of progress toward each goal, highlighting contributions, returns, and remaining targets in an intuitive format. Additionally, these apps often use advanced algorithms to suggest rebalancing strategies or additional investments to help users stay on track, ensuring a highly individualized investment experience that evolves with their needs."}]}}')}}]);